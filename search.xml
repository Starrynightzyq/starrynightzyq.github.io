<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cadence ASM Tutorial</title>
    <url>/2020/12/16/CadenceASMTutorial/</url>
    <content><![CDATA[<p>最近接触了 Verilog-A。记录一下 Cadence AMS-Designer
数模混合的仿真过程。需要用到的软件有 Cadence IC617, INCISIVE152。</p>
<span id="more"></span>
<blockquote>
<p>INCISIVE152 的安装可以参考
https://blog.csdn.net/yy345730585/article/details/90407408</p>
</blockquote>
<h1 id="初始化设置">初始化设置</h1>
<p>在打开 cadence
的文件夹下面需要新建一个‘<em>hdl.var</em>’文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">softinclude <span class="variable">$INCISIVDIR</span>/tools/inca/files/hdl.var</span><br><span class="line">define ams</span><br><span class="line">define NCVLOGOPTS -linedebug</span><br><span class="line">define VIEW_MAP (<span class="variable">$VIEW_MAP</span>, .vs =&gt; shell)</span><br></pre></td></tr></table></figure>
<p>其中 <em>$INCISIVDIR</em> 是 <strong>Cadence INCISIV</strong>
的安装路径。</p>
<p>需要在文件‘<em>cds.lib</em>’中加入一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SOFTINCLUDE <span class="variable">$INCISIVDIR</span>/tools/inca/files/cds.lib</span><br></pre></td></tr></table></figure>
<h1 id="verilog-a-设计-以理想-dac-为例">Verilog-A 设计 — 以理想 DAC
为例</h1>
<h2 id="ieadl_dac-veriloga-cellview"><em>ieadl_dac (verilogA
cellview)</em></h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727174104.png" alt="ieadl_dac" style="zoom:50%;"></p>
<p>首先创建一个新的 Library 叫做 ‘<em>AMS_Tutorial</em>’。然后创建一个
<strong>verilogA</strong> cellview 叫做
‘<em>ieadl_dac</em>’。文件内容如下：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VerilogA for AMS_Tutorial, ideal_dac, veriloga</span></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="keyword">include</span> &quot;constants.vams&quot;</span></span><br><span class="line"><span class="meta">`<span class="keyword">include</span> &quot;disciplines.vams&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> ideal_dac(in, agnd, out);</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span> [<span class="number">10</span>:<span class="number">0</span>] in;</span><br><span class="line"><span class="keyword">input</span> agnd;</span><br><span class="line"><span class="keyword">output</span> out;</span><br><span class="line">electrical [<span class="number">10</span>:<span class="number">0</span>] in;</span><br><span class="line">electrical agnd;</span><br><span class="line">electrical out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">parameter</span> <span class="keyword">real</span> logic_thresh = <span class="number">2</span><span class="variable">.5</span>;</span><br><span class="line"><span class="keyword">parameter</span> <span class="keyword">real</span> full_scale = <span class="number">1</span><span class="variable">.0</span>;</span><br><span class="line"><span class="keyword">parameter</span> <span class="keyword">real</span> trise = <span class="number">1</span>n from [<span class="number">0</span>:inf);</span><br><span class="line"><span class="keyword">parameter</span> <span class="keyword">real</span> tfall = <span class="number">1</span>n from [<span class="number">0</span>:inf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">real</span> code, delta;</span><br><span class="line"><span class="keyword">real</span> pow2[<span class="number">11</span>:<span class="number">0</span>];</span><br><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"></span><br><span class="line">analog <span class="keyword">begin</span></span><br><span class="line">    @(initial_step) <span class="keyword">begin</span></span><br><span class="line">        pow2[<span class="number">0</span>] = <span class="number">1</span><span class="variable">.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i = i+<span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">            pow2[i] = <span class="number">2</span><span class="variable">.0</span> * pow2[i-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    code = <span class="number">0</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">generate</span> j (<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (V(in[j]) &lt; logic_thresh) <span class="keyword">begin</span></span><br><span class="line">            delta = <span class="number">0</span><span class="variable">.0</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span> </span><br><span class="line">            delta = pow2[j];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        code = code + delta;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (V(in[<span class="number">10</span>]) &gt; logic_thresh) <span class="keyword">begin</span></span><br><span class="line">        code = code - pow2[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    code = full_scale * code / pow2[<span class="number">10</span>];</span><br><span class="line">    V(out) &lt;+ V(agnd) + transition(code, <span class="number">0</span> , trise, tfall);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>保存后如果没有错误会自动弹出一个创建 symbol 的窗口，确保 symbol
正确创建了。</p>
<h2 id="dac_driver-verilog-cellview"><em>dac_driver (verilog
cellview)</em></h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727174132.png" alt="dac_driver" style="zoom:50%;"></p>
<p>然后创建一个 <strong>verilog</strong> cellview 叫做
‘<em>dac_driver</em>’。文件内容如下：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Verilog HDL for &quot;AMS_Tutorial&quot;, &quot;dac_driver&quot; &quot;functional&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> dac_driver (word_out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">output</span> [<span class="number">10</span>:<span class="number">0</span>] word_out;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">10</span>:<span class="number">0</span>] word_out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        word_out = <span class="number">12&#x27;h000</span>;</span><br><span class="line">        #<span class="number">20480</span> <span class="built_in">$finish</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> #<span class="number">5</span> word_out = word_out + <span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>保存后如果没有错误会自动弹出一个创建 symbol 的窗口，确保 symbol
正确创建了。</p>
<h2 id="interconnect-elements">interconnect elements</h2>
<p>由于 <em>dac_driver</em> 是一个 Verilog 的
cellview，其输出是数字量，而 <em>ieadl_dac</em> 是一个 verilogA 的
cellview，其输入是模拟量，因此需要 interconnect elements
来进行数字量和模拟量之间的转换。AMS-Designer 可以自动创建 interconnect
elements，不过自己来实现这个连接器，连接器应该有两种形式，分别是数字量到模拟量的转换和模拟量到数字量的转换。</p>
<h3 id="a_d-verilogams-cellview"><em>a_d (VerilogAMS cellview)</em></h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727174149.png" alt="a_d" style="zoom:50%;"></p>
<p>创建一个 <strong>VerilogAMS</strong> cellview 叫做
‘a_d’。文件内容如下：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Verilog-AMS HDL for &quot;AMS_Tutorial&quot;, &quot;a_d&quot; &quot;verilogams&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="meta">`<span class="keyword">include</span> &quot;constants.vams&quot;</span></span><br><span class="line"><span class="meta">`<span class="keyword">include</span> &quot;disciplines.vams&quot;</span></span><br><span class="line"></span><br><span class="line">connectmodule a_d (A, D);</span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> vh = <span class="number">4</span>; <span class="comment">// minimum voltage of a logic 1 (V) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> vl = <span class="number">1</span>; <span class="comment">// maximum voltage of a logic 0 (V) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> c = <span class="number">20</span>f; <span class="comment">// input capacitance (F) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> dt = <span class="number">1</span>m; <span class="comment">// time in x region before x is produced (s) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> dv = <span class="number">0</span><span class="variable">.5</span>; <span class="comment">// voltage between threshold and x region (V)</span></span><br><span class="line">    <span class="keyword">input</span> A; </span><br><span class="line">    <span class="keyword">output</span> D; </span><br><span class="line">    electrical A; </span><br><span class="line">    <span class="keyword">reg</span> D; </span><br><span class="line">    <span class="keyword">logic</span> D; </span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> vlx = vl + dv; </span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> vhx = vh - dv; </span><br><span class="line">    <span class="keyword">reg</span> inXregion;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(above(V(A) - vh)) <span class="keyword">begin</span></span><br><span class="line">        D = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        inXregion = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(above(vl - V(A))) <span class="keyword">begin</span></span><br><span class="line">        D = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        inXregion = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(above(vhx - V(A))) inXregion = <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">always</span> @(above(V(A) - vlx)) inXregion = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> inXregion) <span class="keyword">begin</span> : XRegionDelay </span><br><span class="line">        <span class="variable">#(dt/1.0n)</span> <span class="comment">// calculate how many time units are equal to the dt time</span></span><br><span class="line">        D = <span class="number">1&#x27;bx</span>;</span><br><span class="line">        inXregion = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">negedge</span> inXregion) <span class="keyword">disable</span> XRegionDelay;</span><br><span class="line"></span><br><span class="line">    analog I(A) &lt;+ c*ddt(V(A));</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>保存后如果没有错误会自动弹出一个创建 symbol 的窗口，确保 symbol
正确创建了。</p>
<h3 id="d_a-verilogams-cellview"><em>d_a (VerilogAMS cellview)</em></h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727174202.png" alt="d_a" style="zoom:50%;"></p>
<p>创建一个 <strong>VerilogAMS</strong> cellview 叫做
‘d_a’。文件内容如下：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Verilog-AMS HDL for &quot;AMS_Tutorial&quot;, &quot;d_a&quot; &quot;verilogams&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="meta">`<span class="keyword">include</span> &quot;constants.vams&quot;</span></span><br><span class="line"><span class="meta">`<span class="keyword">include</span> &quot;disciplines.vams&quot;</span></span><br><span class="line"></span><br><span class="line">connectmodule d_a (D, A);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> v0 = <span class="number">0</span><span class="variable">.0</span>;                <span class="comment">// output voltage for a logic 0 (V) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> v1 = <span class="number">5</span><span class="variable">.0</span>;                <span class="comment">// output voltage for a logic 1 (V) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> vx = <span class="number">2</span><span class="variable">.5</span>;               <span class="comment">// output voltage for a logic x (V) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> vz = <span class="number">5</span><span class="variable">.0</span>;                <span class="comment">// output voltage for a logic z (V) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> r0 = <span class="number">1</span>k from (<span class="number">0</span>:inf);    <span class="comment">// output resistance for a logic 0 (Ohms) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> r1 = <span class="number">1</span>k from (<span class="number">0</span>:inf);    <span class="comment">// output resistance for a logic 1 (Ohms) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> rx = <span class="number">100</span> from (<span class="number">0</span>:inf);   <span class="comment">// output resistance for a logic x (Ohms) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> rz = <span class="number">1</span>M from (<span class="number">0</span>:inf);    <span class="comment">// output resistance for a logic z (Ohms) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> tr=<span class="number">1</span>n from [<span class="number">0</span>:inf);      <span class="comment">// rise time (s) </span></span><br><span class="line">    <span class="keyword">parameter</span> <span class="keyword">real</span> tf=<span class="number">1</span>n from [<span class="number">0</span>:inf);      <span class="comment">// fall time (s)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">input</span> D; </span><br><span class="line">    <span class="keyword">output</span> A; </span><br><span class="line">    <span class="keyword">logic</span> D; </span><br><span class="line">    electrical A; </span><br><span class="line">    <span class="keyword">real</span> v, r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> D = D;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span> (D)</span><br><span class="line">            <span class="number">1&#x27;b0</span>: <span class="keyword">begin</span> v = v0; r = r0; <span class="keyword">end</span></span><br><span class="line">            <span class="number">1&#x27;b1</span>: <span class="keyword">begin</span> v = v1; r = r1; <span class="keyword">end</span></span><br><span class="line">            <span class="number">1&#x27;bx</span>: <span class="keyword">begin</span> v = vx; r = rx; <span class="keyword">end</span></span><br><span class="line">            <span class="number">1&#x27;bz</span>: <span class="keyword">begin</span> v = vz; r = rz; <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(D) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span> (D)</span><br><span class="line">            <span class="number">1&#x27;b0</span>: <span class="keyword">begin</span> v = v0; r = r0; <span class="keyword">end</span></span><br><span class="line">            <span class="number">1&#x27;b1</span>: <span class="keyword">begin</span> v = v1; r = r1; <span class="keyword">end</span></span><br><span class="line">            <span class="number">1&#x27;bx</span>: <span class="keyword">begin</span> v = vx; r = rx; <span class="keyword">end</span></span><br><span class="line">            <span class="number">1&#x27;bz</span>: <span class="keyword">begin</span> v = vz; r = rz; <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    analog <span class="keyword">begin</span></span><br><span class="line">       V(A) &lt;+ transition(v, <span class="number">0</span>, tr, tf) + transition(r, <span class="number">0</span>, tr, tf)*I(A); </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>保存后如果没有错误会自动弹出一个创建 symbol 的窗口，确保 symbol
正确创建了。</p>
<h2 id="ideal_dac_test-schematic-cellview"><em>ideal_DAC_test
（schematic cellview）</em></h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727174229.png" alt="ideal_DAC_test" style="zoom:50%;"></p>
<p>创建一个 <strong>schematic</strong> cellview 叫做
‘ideal_DAC_test’。将器件按照下图进行连接。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727170838.png" alt="schematic">
<figcaption aria-hidden="true">schematic</figcaption>
</figure>
<h1 id="仿真">仿真</h1>
<h2 id="config-config-cellview"><em>config (config cellview)</em></h2>
<h3 id="创建">创建</h3>
<p>为 <em>ideal_DAC_test</em> 创建一个 <strong>config
cellview</strong>，如下图所示。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727174248.png" alt="config" style="zoom: 50%;"></p>
<p>创建完成后，配置窗口会自动弹出，如下图所示，首先选择 ‘Use
Template…’，在弹出来的窗口中选择 ‘AMS’。剩下的信息按照下图配置。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727174302.png" alt="AMSconfig" style="zoom:50%;"></p>
<p>创建完成后，把 config(Hierarchy Editor) 和 Schematic
窗口<strong>都关闭</strong>。</p>
<h3 id="配置-view-to-use">配置 <em>View To Use</em></h3>
<p>然后<strong>再次打开 config
窗口</strong>，这时会弹出一个窗口，两项都选 ‘yes’，如下图所示。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727174315.png" alt="reopen" style="zoom:50%;"></p>
<p>点击 ‘OK’ 之后会看到 config 和 schematic 窗口都一起打开了。在
Hierarchy Editor 窗口中，右击 <em>View To Use</em> 上右击，选择
<em>Select View</em>，配置成如下图所示。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727170839.png" alt="view">
<figcaption aria-hidden="true">view</figcaption>
</figure>
<p><img src="https://pic.zhouyuqian.com/img/20210727174329.png" alt="AMS_view" style="zoom:50%;"></p>
<h3 id="配置-ams">配置 AMS</h3>
<p>点击 Plugins -&gt; AMS，然后 AMS 选项就会出现在 Hierarchy Editor
窗口中了。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727174347.png" alt="AMS_Plugin" style="zoom: 50%;"></p>
<p>然后点击 AMS -&gt; Initialize，配置 <em>Run Directory</em>，并且在
<em>Always use this run directory …</em> 后面打钩。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727174357.png" alt="AMS_Initialize" style="zoom:50%;"></p>
<p>在 AMS -&gt; Quick Setup 中，配置 <em>hdl.var</em> 为之前<a href="#初始化设置">初始化设置</a>中创建的 <em>hdl.var</em> 文件。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727174410.png" alt="AMS_quicksetup" style="zoom:50%;"></p>
<p>在 AMS -&gt; Detalied Setup -&gt; Analyses
中设置仿真结束时间，这里设置的是 <em>20e-6</em>。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727174424.png" alt="stoptime" style="zoom:50%;"></p>
<p>上面几步做完了记得保存一下。</p>
<h2 id="运行仿真">运行仿真</h2>
<p>点击 AMS -&gt; NetList and Run，打开一个 config
窗口，这里也可以设置仿真时间。需要注意的是 <em>Save/Plot…</em>
这个选项，该选项可以将需要观察的信号添加进来，不过不建议在这里添加，而是
Netlist 之后再添加，更加方便。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727174435.png" alt="AMS_run_config" style="zoom:50%;"></p>
<p>在上面的窗口中点击 <em>Run</em>，如果没有错误会弹出 SimVision
窗口。</p>
<p>在 <em>Design Browser</em> 窗口中想要观察的信号上右击 -&gt;
<strong>Send to Waveform Window</strong>，然后再点击 SimVision Console
窗口中的 <strong>Run</strong> 按钮，仿真就开始运行了。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727170840.png" alt="SimVision">
<figcaption aria-hidden="true">SimVision</figcaption>
</figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727170841.png" alt="wave">
<figcaption aria-hidden="true">wave</figcaption>
</figure>
<blockquote>
<p>PS：如果模拟量信号观察不到，但可以看到数值，可能需要设置一下 View
-&gt; Zoom -&gt; Full Y.</p>
</blockquote>
<hr>
<h1 id="reference">Reference</h1>
<ul>
<li><p><a href="https://wenku.baidu.com/view/cbd263c8192e45361166f5e5.html">Tufts
University Cadence AMS-Designer Tutorial</a></p></li>
<li><p>https://blog.csdn.net/YYP_8020/article/details/107332430</p></li>
<li><p>Cadence Verilog-AMS Language Reference</p>
<p>$INSTALL_DIR/doc/verilogamsref/verilogamsref.pdf</p></li>
<li><p>Virtuoso AMS Simulator User Guide</p>
<p>$INSTALL_DIR/doc/amssimug/amssimug.pdf</p></li>
<li><p>Cadence NC-Verilog Simulator Tutorial with SimVision</p>
<p>$INSTALL_DIR/doc/ncvlogtut/ncvlogtut.pdf</p></li>
<li><p>https://designers-guide.org/index.html</p></li>
</ul>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Cadence</tag>
        <tag>IC_design</tag>
      </tags>
  </entry>
  <entry>
    <title>Config static IP address on Ubuntu 18.04</title>
    <url>/2020/03/21/Config-static-IP-address-on-Ubuntu-18-04/</url>
    <content><![CDATA[<p>Netplan network configuration had been first introduced to Ubuntu
18.04 LTS Bionic Beaver. It is available to all new Ubuntu 18.04
installations.</p>
<span id="more"></span>
<p>当前的 <code>netplan</code> 配置文件在 <code>/etc/netplan/</code>
目录下，查看当前的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/netplan/01-network-manager-all.yaml</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的 <code>01-network-manager-all.yaml</code>
桌面版和服务器版的名字不一样</p>
</blockquote>
<p>结果如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="comment"># For more information, see netplan(5).</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">eno1:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<p>可以看到默认的 IP 配置是 DHCP，将其改为静态 IP：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Let NetworkManager manage all devices on this system</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">eno1:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.0</span><span class="number">.100</span><span class="string">/24</span>, ]       <span class="comment"># IP 地址/子网掩码长度</span></span><br><span class="line">      <span class="attr">gateway4:</span>  <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>                <span class="comment"># 网关</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">              <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>, <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span>] <span class="comment"># DNS 服务器</span></span><br></pre></td></tr></table></figure>
<p>然后是配置生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> netplan apply</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> netplan --debug apply</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>电流镜-1</title>
    <url>/2020/11/02/Current-Mirror/</url>
    <content><![CDATA[<p>在模拟电路中，电流源的设计是基于对基准电流的“复制”，其前提是存在一个<strong>精确</strong>的电流源可以利用。这里讨论电流复制的过程。</p>
<span id="more"></span>
<h1 id="一基本电流镜">一、基本电流镜</h1>
<p>两个都工作在饱和区且具有相同栅源电压 (<span class="math inline">\(V_{GS}\)</span>) 的相同 MOS 管传输相同的电流
(忽略沟道长度调制，即 <span class="math inline">\(\lambda =
0\)</span>)。</p>
<center>
<img style="zoom:67%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727174902.svg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图1.1 基本电流镜
</div>
</center>
<p>基本电流镜结构如图1.1所示，当 M1、M2 都工作在饱和区时，根据公式：
<span class="math display">\[
I_{D} = \frac{1}{2} \mu _n C_{ox} \frac{W}{L} (V_{GS} - V_{TH}) ^2 (1 +
\lambda V_{DS})
\]</span> 忽略沟道长度调制，流过两个 MOS 管的电流分别是： <span class="math display">\[
I_{REF} = \frac{1}{2} \mu _n C_{ox} (\frac{W}{L})_1 (V_{GS} - V_{TH}) ^2
\\
I_{out} = \frac{1}{2} \mu _n C_{ox} (\frac{W}{L})_2 (V_{GS} - V_{TH}) ^2
\]</span> 得出： <span class="math display">\[
I_{out} = \frac{(W/L)_1}{(W/L)_2} I_{REF}
\]</span>
<strong>特性</strong>：可以精确地复制电流而不受工艺和温度的影响。</p>
<p>电流镜中所有的晶体管都采用<strong>相同的栅长</strong>，及减小由于<strong>源漏区边缘扩散</strong>
(<code>$I_D$</code>) 所产生的误差。因为 <code>$L_&#123;drawn&#125;$</code>
加倍，但有效沟道长度 <code>$L_&#123;eff&#125; = L_&#123;drawn&#125; - 2L_D$</code>
并未加倍。<strong>因此电流值之比只能通过调节晶体管的宽度来实现。</strong></p>
<h1 id="二共源共栅电流镜-cascode-current-mirror">二、共源共栅电流镜
(Cascode Current Mirror)</h1>
<p>在基本电流镜的讨论部分，忽略了沟道长度调制，实际当使用最小长度的晶体管以便通过减小宽度来减小电流源的输出电容时，沟道长度调制会使镜像电流产生较大误差。</p>
<p>当考虑沟道长度调制后，基本电流镜的公式为： <span class="math display">\[
\frac{I_{D2}}{I_{D1}} = \frac{(W/L)_1}{(W/L)_2} \frac{1 + \lambda
V_{DS2}}{1 + \lambda V_{DS1}}
\]</span> 为了抑制沟道长度调制的影响，可以使用共源共栅电流源。</p>
<h2 id="cascade-效应">Cascade 效应</h2>
<center>
<img style="zoom:67%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727174920.svg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.1 cascode 效应
</div>
</center>
<p>如图2.1(a)所示，在 NMOS 管的源级串联一个电阻，计算其输出电阻 <span class="math inline">\(r_o\)</span>：</p>
<p>其小信号等效电路如图2.1(b)所示，在交流信号中，<span class="math inline">\(V_g = 0\)</span>，则 <span class="math display">\[
\Delta V_y = \Delta I_x R = - \Delta V_{gs} \\
\Delta I_x = g_m \Delta V_{gs} + (\Delta V_x - \Delta V_y)/r_{ds} = -g_m
\Delta V_y + (\Delta V_x - \Delta V_y)/r_{ds} = \frac{\Delta V_y}{R}
\]</span> —&gt; <span class="math display">\[
r_o = \frac{\Delta V_x}{\Delta I_x} = \frac{\Delta V_x}{\Delta V_y / R}
= R \frac{\Delta V_x}{\Delta V_y} = R + r_{ds} + g_m r_{ds} R
\]</span> 其中 <span class="math inline">\(g_m r_{ds} = \frac{g_m}{g_d}
&gt;&gt; 1\)</span>，相当于输出阻抗增加了 <span class="math inline">\((1+g_m r_{ds})R\)</span>，由此可以看出 Cascode
结构可以使输出阻抗增大很多。</p>
<blockquote>
<p>ps:</p>
<p>Cascode 为垂直级联，与之相对应的是 Cascade 水平级联</p>
</blockquote>
<h2 id="基本电路">基本电路</h2>
<center>
<img style="zoom:67%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727174937.svg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.2 共源共栅电流源
</div>
</center>
<p><strong>共源共栅电流镜</strong>如上图2.2所示，可知： <span class="math display">\[
V_{GS0} + V_X = V_{GS3} + V_Y
\]</span> 为了抑制沟道长度调制的影响，需要保持
<code>$V_&#123;DS1&#125; = V_&#123;DS2&#125;$</code>，即 <code>$V_X = V_Y$</code>，如果：
<span class="math display">\[
\frac{(W/L)_3}{(W/L)_0} = \frac{(W/L)_2}{(W/L)_1}
\]</span> 则
<code>$V_&#123;GS0&#125; = V_&#123;GS3&#125;$</code>，<code>$V_X = V_Y$</code>。</p>
<blockquote>
<ol type="1">
<li><span class="math inline">\(L_1 = L_2\)</span>，<span class="math inline">\(L_3\)</span> 不需要等于 <span class="math inline">\(L_1\)</span> 和 <span class="math inline">\(L_2\)</span>；</li>
<li>即使 <span class="math inline">\(M_0\)</span> 和 <span class="math inline">\(M_3\)</span> 存在衬偏效应，该结果任然成立；</li>
</ol>
</blockquote>
<p>该结构的电路虽然有很高的输出阻抗和精确的值，但却消耗了很大的电压余度。</p>
<p>假设所有的晶体管相同且忽略衬偏效应，为了保证所有晶体管工作在饱和状态，仅看
M2、M3 时，P 点需要的最小电压 (M2 与 M3 的过驱动电压之和) 为 <span class="math inline">\(2(V_{GS} - V_{TH})\)</span>，而由于 Y 点的电压与 X
点的电压相同，被钳制在 <span class="math inline">\(V_{GS}\)</span>，由此
P 点允许的最小电压为： <span class="math display">\[
\begin{split}
V_N - V_{TH} = {} &amp; V_{GS0} + V_{GS1} - V_{TH} \\
= {} &amp; (V_{GS0} - V_{TH}) + (V_{GS1} - V_{TH}) + V_{TH}
\end{split}
\]</span> 相当于两个过驱动电压加上一个阈值电压。一般 <span class="math inline">\(V_{TH} \approx 0.6 \sim 0.7 V\)</span>，从而限制了
P 点电压的摆幅，导致该结构的 Cascode
电流镜仅适用于高电压工作，不适合低压工作。</p>
<h2 id="低电压共源共栅结构">低电压共源共栅结构</h2>
<p>为了降低 X 点的电压，直接将 M1 的漏端接到 X 点，而为了保证 M2 和 M1
同时工作在饱和区，由此需要对 M2 单独做偏置。</p>
<center>
<img style="zoom:67%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727174957.svg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.3 低压共源共栅电流源
</div>
</center>
<p>图2.3电路中，所有晶体管都处在饱和区且选择了合适的尺寸以保证
<code>$V_&#123;GS2&#125; = V_&#123;GS4&#125;$</code>。如果
<code>$V_b = V_&#123;GS2&#125; + (V_&#123;GS1&#125; - V_&#123;TH1&#125;) = V_&#123;GS4&#125; + (V_&#123;GS3&#125; - V_&#123;TH3&#125;)$</code>，则当
M1 与和 M3 保持相等的漏源电压时，共源共栅电流源 M3-M4
消耗的电压余度最小，且可以精确地镜像
<code>$I_&#123;REF&#125;$</code>，其称为“低电压共源共栅结构”。</p>
<center>
<img style="zoom:67%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727175012.svg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.4 单独偏置的低压共源共栅电流源
</div>
</center>
<p><span class="math inline">\(V_b\)</span>
点的偏置可以用图2.4的结构来实现。M2 与 M4 通过 M5 提供的电压进行偏置。
<span class="math display">\[
V_1 = V_{gs} \\
V_2 = V_{gs} + \Delta
\]</span> —&gt; <span class="math display">\[
\Delta _5 = 2 \Delta
\]</span> 由于： <span class="math display">\[
I_5 = \frac{1}{2} k&#39; (\frac{W}{L})_5 \Delta ^2 _5
\]</span> —&gt; <span class="math display">\[
(\frac{W}{L})_5 = \frac{1}{4}(\frac{W}{L})_2
\]</span> 由此该结构的 Cadcode 电流镜 P 点允许的最小电压可以做到 <span class="math inline">\(2\Delta\)</span>。但由于 M5 的加入增加了功耗。</p>
<h2 id="cadence-仿真">Cadence 仿真</h2>
<h3 id="cascode-结构">Cascode 结构</h3>
<center>
<img style="zoom:100%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727175030.png"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.5 共源共栅电流源结构
</div>
</center>
<center>
<img style="zoom:100%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727175346.jpg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.5 共源共栅电流源DC仿真结果
</div>
</center>
]]></content>
      <categories>
        <category>Analog</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>CM</tag>
      </tags>
  </entry>
  <entry>
    <title>Delta-Sigma Modulator</title>
    <url>/2020/11/26/DSM/</url>
    <content><![CDATA[<p>整数分频锁相环中，生成频率的最小分辨率为参考频率，为了提高分辨率就要降低参考时钟的频率；而锁相环的带宽通常要小于参考频率的
<span class="math inline">\(1/10\)</span>,
因此整数分频锁相环的带宽受分辨率的限制只能很窄。</p>
<p>目前主流的有两种方案解决整数分频锁相环中分辨率和带宽矛盾的问题：<strong>欠采样整数型锁相环</strong>和<strong>分数型锁相环</strong>。</p>
<span id="more"></span>
<h1 id="分数型锁相环">分数型锁相环</h1>
<p>整数分频锁相环中的分频器只能进行整数分频，而分数型锁相环载气基础上加入了<strong>差分积分调制器
(delta-sigma modulator,
DSM)</strong>，控制分频比在不同参考时钟周期采用不同的整数值，这样其“<strong>平均</strong>”分频比就是一个非整数值。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180002.png" alt="image-20201126163214994" style="zoom:50%;"></p>
<p>分数型锁相环的结构如上图所示，其中 DSM
的作用是产生具有指定平均值的一系列整数值。</p>
<h1 id="差分积分调制器原理">差分积分调制器原理</h1>
<p><img src="https://pic.zhouyuqian.com/img/20210727180015.png" alt="image-20201126163436341" style="zoom:50%;"></p>
<p>差分积分调制器的工作原理如上图所示，其中 <span class="math inline">\(N.f\)</span> 表示需要的分数分频比。DSM
的输入为分频比中的小数部分 <span class="math inline">\(.f\)</span>，输出为一位数字输出，DSM 输出一系列的
0 或 1，其平均值为 <span class="math inline">\(.f\)</span>。</p>
<h1 id="差分积分调制器噪声整形">差分积分调制器噪声整形</h1>
<p>由于 DSM
的调制，小数型锁相环分频器输出频率和参考时钟频率瞬时相位差始终不为零。该瞬时相位差就是
DSM 引入噪声的表现，称为 DSM
噪声。小数型锁相环的输入相位差始终在一个有限的范围内变化，该<strong>相位差值范围</strong>是一个重要的
DSM 设计指标。</p>
<p>DSM
的噪声首先通过积分器成为瞬时相位噪声，然后注入锁相环鉴频鉴相器的输入，从
DSM 输出到锁相环输出端的噪声传递函数为： <span class="math display">\[
H_{DSM}(s) = \frac{\frac{I_{cp}K_v}{2\pi CN} \cdot \frac{RCs+1}{s}}{s^2
+ \frac{I_{cp}RK_v}{2\pi N}s + \frac{I_{cp}K_v}{2\pi CN}}
\]</span> 可以看到该传递函数为低通函数，即 DSM
噪声的高频部分会被锁相环的低通特性所抑制。DSM 的一个主要功能就是将 DSM
噪声转移到高频。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180030.png" alt="image-20201126170555897" style="zoom:33%;"></p>
<p>DSM 是一个反馈系统，由环路滤波器和量化器构成。由于量化器的存在，DSM
为非线性系统。其输入是一个长字长的数字信号，输出是短字长的数字信号，反馈是里离散取值的长字长数字信号。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180041.png" alt="image-20201126170450055" style="zoom:33%;"></p>
<p>DSM
的小信号模型如上图所示，当输入为固定值，输出将是平均分频比和叠加在上面的输出量化噪声。如果
DSM 的前向环路滤波器的传递函数为 <span class="math inline">\(H(z)\)</span>，则量化噪声到输出噪声的传递函数为：
<span class="math display">\[
NTF(z) = \frac{1}{1+H(z)}
\]</span> 因此量化噪声的传递函数与 <span class="math inline">\(H(z)\)</span> 相反，因此如果 <span class="math inline">\(H(z)\)</span>
为低通函数，那么量化噪声的传递函数为高通函数。通常采用<strong>含有积分器的低通函数</strong>作为环路滤波器的传递函数。</p>
<p>输入信号到输出信号的闭环传递函数为： <span class="math display">\[
STF(S) = \frac{H(z)}{1+H(z)}
\]</span> 因此如果 <span class="math inline">\(H(z)\)</span>
采用低通函数就可以输出量化噪声推到高频同时保留输入信号。</p>
<h1 id="差分积分调制器的主要结构类型">差分积分调制器的主要结构类型</h1>
<p>DSM 本质上是一个数字滤波器，对于同一个 DSM
传递函数可以用多种方法实现。</p>
<h2 id="单级多路反馈和前馈-dsm-single-stage-multi-feedback-feedforward-dsm">单级多路反馈和前馈
DSM (single stage multi-feedback-feedforward DSM)</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727180054.png" alt="image-20201126181412774" style="zoom:50%;"></p>
<p>上图是一个三阶单级 DSM
的例子，多路反馈和多路前馈可以分别实现所需要的环路极点和零点。</p>
<p><strong>优点</strong>：该结构在一级中实现多阶反馈和前馈，其随机性非常高，有干净的输出频谱和优良的杂散性能。是<strong>高性能射频应用</strong>中的首选
DSM 结构。</p>
<p><strong>缺点</strong>：对于二阶以上的 DSM
只是有条件稳定，当输入信号大于一定值，该结构容易进入不稳定状态。需要选取合适的滤波器系数保证在最大输入范围内保证其稳定性。其设计较为复杂。</p>
<h2 id="mash-结构">MASH 结构</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727180112.png" alt="image-20201126182429474" style="zoom:40%;"></p>
<p>多级噪声整形结构 (multi-stage noise shaping, MASH)
如上图所示，其将多个低阶 DSM 串联起来，实现高阶 DSM
噪声整形。如果每一级使用一阶 DSM，由于一阶 DSM
是无条件稳定的，所以串联起来的高阶 DSM 也是稳定的。</p>
<p><strong>优点</strong>：稳定性好。</p>
<p>如上图所示，由两级一阶 DSM 串联构成二阶 DSM，通常称为 MASH1-1
结构。MASH
将前一级的量化噪声作为下一级的输入，然后结合两级的输出，将前一级的量化噪声抵消得到最终输出。</p>
<p>第一级的输出： <span class="math display">\[
y_1 = z^{-1} x + (1-z^{-1})q_1
\]</span> 第二级的输出： <span class="math display">\[
y_2 = z^{-1} q_1 + (1-z^{-1})q_2
\]</span> 最终输出： <span class="math display">\[
y = z^{-1} y_1 + (1-z^{-1})y_2 = z^{-2}x+(1-z^{-1})^2 q_2
\]</span> MASH 结构要求串联各级系数之间严格匹配，锁相环电路中的 DSM
使用全数字实现，可以做到各级系数的完全匹配。</p>
<p>常用的 MASH 结构包括：MASH1-1-1，即三个一阶 DSM 串联实现三阶
DSM；MASH1-2，即一个一阶 DSM 和一个二阶 DSM 串联实现三阶 DSM。</p>
<p><strong>缺点</strong>：随机性较低。由于缺少跨级间的反馈通路，而低阶
DSM 随机性较差，因此整体上 MASH 结构的 DSM
随机性较低，锁相环输出含有较多的分数杂散。由于其数字输出位数通常较多，在
PFD
的输入端产生的相位差较大，对锁相环分频器和电荷泵的线性度要求较高。</p>
<h1 id="dsm-的性能指标和选择">DSM 的性能指标和选择</h1>
<ol type="1">
<li>DSM 的阶数</li>
<li>DSM 的结构</li>
<li>DSM 的数字输出比特数</li>
<li>DSM 的稳定输入范围</li>
<li>噪声整形性能与环路稳定性的考量</li>
</ol>
<h1 id="dsm-噪声补偿">DSM 噪声补偿</h1>
<p>当锁相环的带宽较宽时，DSM
的噪声就不能很好的被环路滤波器消除，就需要低通滤波之外的消除 DSM
噪声的方案。</p>
<p>DSM 的输入和输出都是数字的，因此在每个参考周期内，在数字信号范畴，DSM
的误差都是已知的。如果用此数字信号来补偿噪声，需要一个分辨率更高的
DAC。</p>
<h2 id="通过电荷输出的-dac-实现噪声补偿">通过电荷输出的 DAC
实现噪声补偿</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727180127.png" alt="image-20201126194055426" style="zoom:50%;"></p>
<p>如上图所示，通过一个电流
DAC，将量化误差以电流的形式注入到电荷泵之后的环路滤波器中。在该方案中，电流
DAC
的增益必须是已知的并且可以精确控制。通常需要自动校数模转换器的增益，通常用<strong>最小二乘法</strong>校准。</p>
<h2 id="相位补偿">相位补偿</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727180140.png" alt="image-20201126194607316" style="zoom:50%;"></p>
<p>如上图所示，在分频器的输出端加一个<strong>数控延迟线</strong>来补偿相位误差。该方法也需要预先知道数控延迟线的增益，一般通过<strong>最小二乘</strong>的方式进行校准。</p>
<blockquote>
<p>关于噪声补偿的一点点思考</p>
<p>Q1: 在电流补偿结构中，能不能取消 DSM，直接用分频比的小数部分作为电流
DAC 的输入，对电荷泵的输出电流进行补偿？</p>
<p>Q2: 在相位补偿结构中，能不能取消 DSM，直接用分频比的小数部分控制 TDC
进行相位补偿？</p>
<p>A: 似乎有点类似早期的模拟相位内插补偿法了，这种方法要求很高的精度
(<strong>?</strong>)，设计难度较大。</p>
<p><img src="/2020/11/26/DSM/截屏2020-11-26 下午9.23.56.png" alt="截屏2020-11-26 下午9.23.56" style="zoom:45%;"></p>
</blockquote>
<h2 id="减小-dsm-量化步长">减小 DSM 量化步长</h2>
<p>同时使用 VCO 的上升沿和下降沿信息分频器可以实现 0.5
倍步长分频比，从而将 DSM 的量化步长下降一倍，DSM 的噪声下降
6dB。在以环形振荡器为 VCO 的 PLL 中，环形振荡器可以提供多个相位，DSM
的量化步长可以进一步降低，从而大大降低 DSM 噪声。</p>
<p>该方法主要的缺点是会使分频器的线性度下降，从而带来额外的噪声和杂散。</p>
<h1 id="最小二乘法">最小二乘法</h1>
<p>最小二乘法 (least mean square algorithm) 在自适应滤波器 (adaptive
filter) 设计中有着重要的应用。</p>
<h1 id="参考文章">参考文章</h1>
<p>[1]张刚. CMOS集成锁相环电路设计[M]. 清华大学出版社, 2013.</p>
<p>[2]周晖.
小数N频率综合器中Sigma-Delta调制器的研究与设计[D].西安电子科技大学,2014.</p>
]]></content>
      <categories>
        <category>Delta-Sigma</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
      </tags>
  </entry>
  <entry>
    <title>Delta-Sigma Modulator (2) — Simulink Simulation</title>
    <url>/2020/11/27/DSM2/</url>
    <content><![CDATA[<p>PLL 中的 DSM 可以用全数字的方法实现，因此可以用 Simulink
工具建模，进行功能仿真和功率谱仿真，再用 Verilog 实现。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180306.png" alt="image-20201127220949901" style="zoom:33%;"></p>
<span id="more"></span>
<h1 id="一阶-dsm-传递函数计算">一阶 DSM 传递函数计算</h1>
<p>如上图所示，一阶 DSM 由一个 Delta
调制器，一个积分器以及一个量化器组成。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180324.png" alt="image-20201127221245628" style="zoom:33%;"></p>
<p>一阶 DSM 等效的 Z
域模型如上图所示，其中量化器等效为一个噪声的叠加，可以得到： <span class="math display">\[
W[z] = X[z] - z^{-1}Y[z] \\
V[z] = W[z] + z^{-1}V[z] \\
Y[z] = E[z] + V[z]
\]</span> 可以推导出传递函数为： <span class="math display">\[
H[z] = \frac{1}{1-z^{-1}} \\
Y[z] = X[z] + (1-z^{-1})E[z]
\]</span> 以及： <span class="math display">\[
STF = \frac{Y[z]}{X[z]} = \frac{H[z]}{1-z^{-1}H[z]} = 1\\
NFT = \frac{Y[z]}{E[z]} = \frac{1}{1+z^{-1}H[z]} = 1-z^{-1}
\]</span> 可以看到，一阶 DSM 对输入信号起到传递作用，增益为
1，而对噪声起到了高通滤波作用，因此实现了对噪声的整形，将噪声推向高频。</p>
<p>由上式还可以推出： <span class="math display">\[
V[z] = X[z] + (V[z] - Y[z])z^{-1}
\]</span> 由此可以得到该 DSM 的另一种 Z 域模型：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180340.png" alt="image-20201127223250969" style="zoom:33%;"></p>
<p>可以看到该一阶 DSM
本质上就是一个累加器，因此其在电路中信号流图可以描述如下：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180353.png" alt="image-20201127223534482" style="zoom:33%;"></p>
<p>其中累加器为两个 m 位输入，m+1 位输出，输入 <span class="math inline">\(X[n]\)</span> 为缩放到 <span class="math inline">\(2^m\)</span> 的小数部分，例如，当 m = 24 时，<span class="math inline">\(X[n] = 6291456\)</span> 表示输入为 0.375 (<span class="math inline">\(6291456/2^{24} = 0.375\)</span>)。<span class="math inline">\(C[n]\)</span>
为累加器输出结果的最高位，是累加的<strong>进位</strong>，相当于量化器的量化输出结果。累加器输出的低
m 位相当于量化误差。上面的结构可以用如下电路来实现：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180403.png" alt="image-20201127224405414" style="zoom:25%;"></p>
<p>其中 DFF 为 D 触发器，实现了延迟的功能。</p>
<h1 id="一阶-dsm-simulink-仿真">一阶 DSM Simulink 仿真</h1>
<p>根据上面的分析，可以在 Simulink 中对一阶 DSM 进行仿真。Simulink
中的结构如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180419.png" alt="截屏2020-11-27 下午10.48.32" style="zoom:25%;"></p>
<p>累加器进位使用一个大于等于的比较运算实现，累加器的低位输出使用取余运算实现。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727180222.svg" alt="OneStage">
<figcaption aria-hidden="true">OneStage</figcaption>
</figure>
<p>一阶 DSM 仿真结果如上图所示，第一个图是量化输出 C，第二个图是误差输出
e，输入设置为 6291456，累加器设置为 24 位，可以看到量化输出 C 每 8
个周期中会有 3 个高电平。</p>
<h1 id="mash1-1-1">MASH1-1-1</h1>
<p>一阶的 DSM
输出周期性很明显，对噪声的整形效果不好。可以将其级联起来组成 MASH1-1-1
结构，如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180436.png" alt="image-20201127225717497" style="zoom:40%;"></p>
<p>前一级的一阶 DSM 误差作为下一级的一阶 DSM
输入，每一级的输出通过延迟相加得到最终输出，传递函数推导如下： <span class="math display">\[
C_1 = e_1[n]*(1-z^{-1}) + X[n] \\
C_2 = e_2[n]*(1-z^{-1}) - e_1[n] \\
C_3 = e_3[n]*(1-z^{-1}) - e_2[n] \\
Y[n] = C_1 + C_2(1-z^{-1}) + C_3(1-z^{-1})^2
\]</span> 可以得到： <span class="math display">\[
Y[n] = X[n] + e_3[n]*(1-z^{-1})^3
\]</span>
可以看到最终输出的噪声只和第三级的噪声有关，并且对第三级噪声做了高阶整形。</p>
<h1 id="mash1-1-1-simulink-仿真">MASH1-1-1 Simulink 仿真</h1>
<p>Simulink 中的结构如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727180455.png" alt="截屏2020-11-28 上午9.14.25" style="zoom:40%;"></p>
<p>当输入为 0.375 (<span class="math inline">\(6291456/2^{24} =
0.375\)</span>)，输出如下：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727180223.svg" alt="ThreeStage6291456">
<figcaption aria-hidden="true">ThreeStage6291456</figcaption>
</figure>
<p>当输入为 0.1 (<span class="math inline">\(1677721/2^{24} =
0.1\)</span>)，输出如下：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727180224.svg" alt="ThreeStage1677721">
<figcaption aria-hidden="true">ThreeStage1677721</figcaption>
</figure>
<p>当输入为 0.9 (<span class="math inline">\(15099494/2^{24} =
0.9\)</span>)，输出如下：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727180225.svg" alt="ThreeStage15099494">
<figcaption aria-hidden="true">ThreeStage15099494</figcaption>
</figure>
<p>输出信号的功率谱密度：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727180226.svg" alt="PSD">
<figcaption aria-hidden="true">PSD</figcaption>
</figure>
<p><strong>结果分析</strong>：</p>
<p>从上面仿真的结果可以看到 MASH1-1-1 结构的 DSM
可以实现对噪声的高阶整形，将噪声推向高频。</p>
<p>MASH1-1-1 结构的 DSM 理论上输出范围是
[-3,4]，但实际上输入不同的值，输出范围也是不同的，某些输入值对应的输出周期性还是比较明显的，例如输入为
0.375 的时候。看论文上说要在低位加
dither，可以改善这种情况，让输出的随机性更高。</p>
<h1 id="参考文献">参考文献</h1>
<p>[1]Y. Wu, M. Shahmohammadi, Y. Chen, P. Lu and R. B. Staszewski, "A
3.5–6.8-GHz Wide-Bandwidth DTC-Assisted Fractional-N All-Digital PLL
With a MASH $$ -TDC for Low In-Band Phase Noise," in <em>IEEE Journal of
Solid-State Circuits</em>, vol. 52, no. 7, pp. 1885-1903, July 2017,
doi: 10.1109/JSSC.2017.2682841.</p>
<p>[2]周晖.
小数N频率综合器中Sigma-Delta调制器的研究与设计[D].西安电子科技大学,2014.</p>
]]></content>
      <categories>
        <category>Delta-Sigma</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
      </tags>
  </entry>
  <entry>
    <title>Delta-Sigma Modulator (3) — MASH &amp; HK-MASH &amp; SP-MASH</title>
    <url>/2020/12/04/DSM3/</url>
    <content><![CDATA[<h1 id="几种-dsm-结构">几种 DSM 结构</h1>
<h2 id="传统的-mash-结构">传统的 MASH 结构</h2>
<div data-align="center">
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727180617.png" alt="EFM" width="350px">
</div>
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727180638.png" alt="MASH" width="350px">
</div>
</div>
<p>传统的 MASH 结构如上图所示，其一阶调制器 (first-order error feedback
modulator, EFM) 如左边的图所示，其本质上是一个累加器，前一级的 EFM
误差作为后以及的输入。</p>
<h2 id="hk-mash-结构">HK-MASH 结构</h2>
<div data-align="center">
<p><img src="https://pic.zhouyuqian.com/img/20210727181208.png" width="400"></p>
</div>
<p>HK-MASH 结构的 EFM 如上图所示，其相比于原始的 EFM，加入了一个在输出
<span class="math inline">\(y[n]\)</span> 到输入 <span class="math inline">\(x[n]\)</span> 之间加入了一个增益为 <span class="math inline">\(a\)</span> 的反馈通路，使得模 <span class="math inline">\((M-a)\)</span>
成为一个<strong>质数</strong>，对于大多数输入其输出周期为 <span class="math inline">\((M-a)\)</span>，因此对于 <span class="math inline">\(l\)</span> 级的 MASH，其输出周期为 <span class="math inline">\((M-a)^l\)</span>。</p>
<p>由于反馈的加入，HK-MASH
结构的输出平均值不再等于输入，而是呈线性关系： <span class="math display">\[
Mean(Y) = Mean(X)/(M-a)
\]</span>
<img src="https://pic.zhouyuqian.com/img/20210727181245.png" alt="HK_MASH_RES" style="zoom:50%;"></p>
<p>如果想让输出平均值为 <span class="math inline">\(\alpha\)</span>，则输入值需要缩放为 <span class="math inline">\(\alpha(M-a)/M\)</span>，因此 HK-MASH 结构的 DSM
<strong>不支持全范围输入</strong>，并且需要额外的电路来实现这个缩放过程。</p>
<h2 id="sp-mash">SP-MASH</h2>
<div data-align="center">
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727181245.png" width="350px">
</div>
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727181318.png" width="350px">
</div>
</div>
<p>Spur-Free MASH 的结构如上图所示，相对于原始的 EFM，SP-EFM
增加了一个前一级的量化输出作为本级的输入。该结构的改动几乎不消耗额外的硬件资源，并且输入和输出是相等的，即输入时全范围的。</p>
<p>为了扩大输出的周期，可以增加除第一级之外的 EFM
的位数，例如上面的结构中，第一级设为 5bit，第二级和第三级设为
9bit，将第一级的量化误差左移 4 位再作为第二级的输入。</p>
<p>SP-MASH 的输出的周期为 <span class="math inline">\(N_1L^2\)</span>，其中 <span class="math inline">\(L = 2^r\)</span>，<span class="math inline">\(r\)</span> 为后面几级的位宽；<span class="math inline">\(N_1\)</span>
为第一级的输出周期，例如在上面的结构中 <span class="math inline">\(r=9\)</span>，<span class="math inline">\(N_1\)</span> 最小等于 2。</p>
<h1 id="使用-simulink-仿真">使用 Simulink 仿真</h1>
<h2 id="传统的-mash-结构-1">传统的 MASH 结构</h2>
<div data-align="center">
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727181332.jpg" width="260">
</div>
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727181344.jpg" width="600">
</div>
</div>
<h2 id="hk-mash">HK-MASH</h2>
<div data-align="center">
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727181357.jpg" width="260">
</div>
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727181405.jpg" width="600">
</div>
</div>
<h2 id="sp-mash-1">SP-MASH</h2>
<div data-align="center">
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727181421.jpg" width="260">
</div>
<div style="display:inline-block;">
<img src="https://pic.zhouyuqian.com/img/20210727181507.jpg" width="600">
</div>
</div>
<h1 id="仿真结果-mash-hk-mash-sp-mash">仿真结果 MASH &amp; HK-MASH &amp;
SP-MASH</h1>
<h2 id="输出序列">输出序列</h2>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180533.svg" alt="MASH input 16"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180534.svg" alt="HK-MASH input 16"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180535.svg" alt="SP-MASH input 16"></div></div></div></div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180536.svg" alt="MASH input 17"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180537.svg" alt="HK-MASH input 17"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180538.svg" alt="SP-MASH input 17"></div></div></div></div>
<p>三种 MASH DSM 结构的输出序列如上图所示，由左到右分别是传统的
MASH、HK-MASH 和 SP-MASH，三种 MASH 均为 5bit，其中第一行为输入值
16（相当于 0.5），第二行输入值为 17（相当于 17/32）。</p>
<h2 id="功率谱密度">功率谱密度</h2>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180539.svg" alt="MASH input 16"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180540.svg" alt="HK-MASH input 16"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180541.svg" alt="SP-MASH input 16"></div></div></div></div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180542.svg" alt="MASH input 17"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180543.svg" alt="HK-MASH input 17"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://pic.zhouyuqian.com/img/20210727180544.svg" alt="SP-MASH input 17"></div></div></div></div>
<p>三种 MASH DSM 结构的功率谱如上图所示，由左到右分别是传统的
MASH、HK-MASH 和 SP-MASH，三种 MASH 均为 5bit，其中第一行为输入值
16（相当于 0.5），第二行输入值为 17（相当于 17/32）。</p>
<h1 id="结果分析思考">结果分析&amp;思考🤔</h1>
<ol type="1">
<li><p>从上面的时序的输出和功率谱密度都可以看出 HK-MASH 结构和 SP-MASH
结构对噪声的整形效果都比传统的 MASH 结构好；</p></li>
<li><p>传统的 EFM 结构的输出序列的周期为： <span class="math display">\[
N = \frac{M}{GCD(X, M)}
\]</span> 其中 <span class="math inline">\(GCD\)</span>
表示最大公约数，<span class="math inline">\(X\)</span> 为输入值，<span class="math inline">\(M\)</span> 为 EFM 中计数器的最大值。</p>
<p>因此在一些特定的输入时，其输出的周期很短，不能实现对噪声的整形，例如
5bit 的 EFM，<span class="math inline">\(M=2^5\)</span>，当输入 <span class="math inline">\(X= 16\)</span> 时，输出序列的周期为 2，三级 EFM​
级联实现的 MASH1-1-1 结构的输出周期也只有 4，因此传统结构的 MASH DSM
周期偏短，在某些特定的输入下不能实现对噪声的整形。</p></li>
<li><p>HK-MASH 和 SP-MASH 结构都可以避免传统 MASH 周期短的问题，不过
HK-MASH
的输出不等于输入，需要<strong>消耗额外的硬件资源进行缩放</strong>，并且<strong>输入不是全范围</strong>；</p></li>
<li><p>在低位宽下 HK-MASH 和 SP-MASH 结构相比于传统的 MASH
结构提升较为明显，例如上面的例子都是在 5bit
先进行比较的，个人觉得当位宽较大时，HK-MASH 和 SP-MASH 结构相比于传统的
MASH 结构优势就没有那么明显了，在 24bit 的 EFM
结构中验证了这个想法。</p></li>
<li><p>就功率谱密度来看，感觉 SP-MASH 对比 HK-MASH
并没有明显的提升，我自己的仿真中没有论文中的差距那么大：</p></li>
</ol>
<p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://pic.zhouyuqian.com/img/20210727180540.svg" alt="HK-MASH input 16"></div><div class="group-picture-column" style="width: 50%;"><img src="https://pic.zhouyuqian.com/img/20210727180541.svg" alt="SP-MASH input 16"></div></div></div></div></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727180545.png" alt="result in paper">
<figcaption aria-hidden="true">result in paper</figcaption>
</figure>
<p>上面一行是我自己的仿真结果，下面一行是论文中的结果，输入都为 16。</p>
<h1 id="参考文献">参考文献</h1>
<p>[1] Y. Liao, X. Fan and Z. Hua, "Influence of LFSR Dither on the
Periods of a MASH Digital Delta–Sigma Modulator," in <em>IEEE
Transactions on Circuits and Systems II: Express Briefs</em>, vol. 66,
no. 1, pp. 66-70, Jan. 2019, doi: 10.1109/TCSII.2018.2828600.</p>
<p>[2] J. Song and I. Park, "Spur-Free MASH Delta-Sigma Modulation," in
<em>IEEE Transactions on Circuits and Systems I: Regular Papers</em>,
vol. 57, no. 9, pp. 2426-2437, Sept. 2010, doi:
10.1109/TCSI.2010.2043993.</p>
<h1 id="psd-matlab-代码">PSD MATLAB 代码</h1>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% PSD</span></span><br><span class="line"><span class="comment">% reference: https://zhuanlan.zhihu.com/p/50272016</span></span><br><span class="line">clc</span><br><span class="line">clear</span><br><span class="line">ADD_WIN_FLAG = <span class="number">1</span>;</span><br><span class="line">LOG_PLOT_FLAG = <span class="number">1</span>;</span><br><span class="line"><span class="comment">% name = &quot;SP MASH 5bit input 17&quot;;</span></span><br><span class="line"><span class="comment">% figname = &quot;results/sp_mash_5bit_17_psd.png&quot;;</span></span><br><span class="line"><span class="comment">% load(&quot;SP_MASH_5bit_output_17.mat&quot;);</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;MASH 9bit input 255&quot;</span>;</span><br><span class="line">figname = <span class="string">&quot;results/mash_9bit_255_psd.svg&quot;</span>;</span><br><span class="line">load(<span class="string">&quot;MASH_9bit_input_255.mat&quot;</span>);</span><br><span class="line"></span><br><span class="line">x = y.Data;</span><br><span class="line">x = double(x);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% FFT 求功率谱密度</span></span><br><span class="line">L = <span class="built_in">length</span>(x);</span><br><span class="line"><span class="comment">% N = L;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% % 比当前长度大的下一个最小的 2 的次幂值</span></span><br><span class="line"><span class="comment">% N = 2^nextpow2(L);</span></span><br><span class="line"><span class="comment">% x_new = zeros(1, N-L);</span></span><br><span class="line"><span class="comment">% x = [x, x_new];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 取2的幂次方</span></span><br><span class="line">N = <span class="number">2</span>^(<span class="built_in">nextpow2</span>(L)<span class="number">-1</span>);</span><br><span class="line">x = x(<span class="number">1</span>:N);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 加窗</span></span><br><span class="line"><span class="keyword">if</span> ADD_WIN_FLAG</span><br><span class="line">    wn=hann(N);  <span class="comment">%汉宁窗</span></span><br><span class="line">    x=x.*wn;   <span class="comment">% 原始信号时域加窗</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">xdft = fft(x, N);</span><br><span class="line">psdx = xdft.*<span class="built_in">conj</span>(xdft)/N; <span class="comment">% 双边功率谱密度，conj 共轭复数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 加窗系数修正</span></span><br><span class="line"><span class="keyword">if</span> ADD_WIN_FLAG</span><br><span class="line">    zz = wn.*wn;</span><br><span class="line">    zz1 = sum(zz);</span><br><span class="line">    psdx = psdx*N/zz1;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">spsdx = psdx(<span class="number">1</span>:<span class="built_in">floor</span>(N/<span class="number">2</span>)+<span class="number">1</span>)*<span class="number">2</span>; <span class="comment">% 单边功率谱密度</span></span><br><span class="line">spsdx(<span class="number">1</span>) = psdx(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">spsdx_log = <span class="number">10</span>*<span class="built_in">log10</span>(spsdx); <span class="comment">% 取log</span></span><br><span class="line">spsdx_log(spsdx_log == -<span class="built_in">inf</span>) = <span class="number">-300</span>; <span class="comment">% 处理 log10(0) 的情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 单边带</span></span><br><span class="line">freq = <span class="number">0</span>:(<span class="number">2</span>*<span class="built_in">pi</span>)/N:<span class="built_in">pi</span>;</span><br><span class="line"><span class="comment">% 双边带</span></span><br><span class="line"><span class="comment">% freq = 0:(2*pi)/N:(2*pi-(2*pi)/N);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% NTF 3阶</span></span><br><span class="line">NTF = <span class="number">3</span>*<span class="number">20</span>*<span class="built_in">log10</span>(<span class="number">2</span>*<span class="built_in">sin</span>(freq/<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> LOG_PLOT_FLAG</span><br><span class="line">    semilogx(freq/<span class="built_in">pi</span>, spsdx_log, freq/<span class="built_in">pi</span>, NTF, <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">plot</span>(freq/<span class="built_in">pi</span>, spsdx_log, freq/<span class="built_in">pi</span>, NTF, <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">grid on</span><br><span class="line"><span class="built_in">legend</span>(name, <span class="string">&#x27;NTF&#x27;</span>,<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;northwest&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;Periodogram Using FFT&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;Normalized Frequency (\times\pi rad/sample)&#x27;</span>) </span><br><span class="line">ylabel(<span class="string">&#x27;Power/Frequency (dB/rad/sample)&#x27;</span>)</span><br><span class="line">saveas(gcf,figname)</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% periodogram 求功率谱密度</span></span><br><span class="line"><span class="comment">% win: hann rectwin</span></span><br><span class="line">[h, w] = periodogram(x,rectwin(<span class="built_in">length</span>(x)),<span class="built_in">length</span>(x));</span><br><span class="line"><span class="built_in">plot</span>(w/<span class="built_in">pi</span>, h)</span><br><span class="line"><span class="comment">% periodogram(x,rectwin(length(x)),length(x));</span></span><br><span class="line">semilogx(w/<span class="built_in">pi</span>, <span class="number">10</span>*<span class="built_in">log10</span>(h))</span><br><span class="line">grid on</span><br><span class="line"><span class="built_in">legend</span>(name, <span class="string">&#x27;NTF&#x27;</span>,<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;northwest&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;Periodogram Using FFT&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;Normalized Frequency (\times\pi rad/sample)&#x27;</span>) </span><br><span class="line">ylabel(<span class="string">&#x27;Power/Frequency (dB/rad/sample)&#x27;</span>)</span><br><span class="line"><span class="comment">% test</span></span><br><span class="line"><span class="comment">% fs = 1000;</span></span><br><span class="line"><span class="comment">% t = 0:1/fs:5-1/fs;</span></span><br><span class="line"><span class="comment">% x = cos(2*pi*100*t) + randn(size(t));</span></span><br><span class="line"><span class="comment">% x = cos(2*pi*100*t);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% pwelch</span></span><br><span class="line"><span class="comment">% fs = 100000;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% NTF</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">-3</span>,<span class="number">3</span>,<span class="number">-1</span>];</span><br><span class="line">[h_ntf,w_ntf] = freqz(b,a,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">N = <span class="built_in">length</span>(x);</span><br><span class="line">win = hanning(N);  <span class="comment">%汉宁窗</span></span><br><span class="line"><span class="comment">% win = rectwin(N);</span></span><br><span class="line">nfft = N;</span><br><span class="line">noverlap = <span class="number">50</span>;</span><br><span class="line">[pxx,w] = pwelch(x, win, noverlap, nfft);</span><br><span class="line"></span><br><span class="line"><span class="comment">% plot(w/pi,10*log10(pxx))</span></span><br><span class="line">semilogx(w/<span class="built_in">pi</span>,<span class="number">10</span>*<span class="built_in">log10</span>(pxx),w_ntf/<span class="built_in">pi</span>,<span class="number">20</span>*<span class="built_in">log10</span>(<span class="built_in">abs</span>(h_ntf)), <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;\omega / \pi&#x27;</span>)</span><br><span class="line">grid on</span><br><span class="line"><span class="built_in">legend</span>(name, <span class="string">&#x27;NTF&#x27;</span>,<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;northwest&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;Periodogram Using FFT&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;Normalized Frequency (\times\pi rad/sample)&#x27;</span>) </span><br><span class="line">ylabel(<span class="string">&#x27;Power/Frequency (dB/rad/sample)&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Delta-Sigma</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
        <tag>DSM</tag>
      </tags>
  </entry>
  <entry>
    <title>FIR</title>
    <url>/2020/10/03/DSP-FIR/</url>
    <content><![CDATA[<p>数字滤波器是从原始信号中提取用户所需要的信息，滤除不需要的信号成分。根据信号与干扰的不同关系，可以从时域、频域或变换域（同态）进行信号滤波设计。</p>
]]></content>
      <categories>
        <category>DSP</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>DSP</tag>
      </tags>
  </entry>
  <entry>
    <title>DDS</title>
    <url>/2020/10/02/DSP-DDS/</url>
    <content><![CDATA[<h1 id="数控振荡器">数控振荡器</h1>
<p>数控振荡器（NCO，numerically controlled
oscillator）是软件无线电、直接数据频率合成器（DDS，Direct digital
synthesizer）、快速傅立叶变换（FFT，Fast Fourier
Transform）等的重要组成部分，同时也是决定其性能的主要因素之一，用于产生可控的正弦波或余弦波。</p>
<p>数控振荡器有多种实现方法，最常用的方式就是基于直接数字频率合成技术（DDS，Direct
digital synthesizer）的三角函数发生器。与传统的频率合成器相比，DDS
具有成本低、功耗低、分辨率高和转换时间短等优点。</p>
<span id="more"></span>
<h2 id="dds-算法原理">DDS 算法原理</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727181600.png" alt="DDS" style="zoom:25%; margin: auto;"></p>
<p>DDS结构如上图所示，在参考时钟的驱动下，相位累加器对频率控制字进行线性累加，得到的相位码对波形存储器寻址，使之输出相应的幅度码，经过数模转换器得到相应的阶梯波，最后再使用低通滤波器对其进行平滑，得到所需频率的平滑连续的波形。</p>
<h3 id="相位累加器">相位累加器</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727181601.png" alt="Phase_accumulator" style="zoom:25%; margin: auto;"></p>
<p>相位累加器的结构如上图所示，由 N 位加法器与 N
为累加寄存器级联构成。每来一个时钟 <span class="math inline">\(f_{CLK}\)</span>，加法器将频率控制字 K
与累加寄存器输出的累加相位数据相加，把相加后的结果送至累加寄存器的数据输入端。这样在相位累加器在时钟的控制下，不断对频率控制字进行线性相位累加。由此可以看出，相位累加器在每一个时钟周期里，将频率控制字累加一次，相位累加器输出的数据就是合成信号的相位，相位累加器的溢出频率就是
DDS 的输出的信号频率。</p>
<p>DDS 的输出的信号频率计算方式如下： <span class="math display">\[
f_{OUT} = \frac{f_{CLK}K}{2^N}
\]</span> 频率分辨率（即频率的变化间隔）为： <span class="math display">\[
\Delta f=\frac{f_{CLK}}{2^N}
\]</span></p>
<h3 id="波形存储器">波形存储器</h3>
<p>波形存储器所存储的幅度值与余弦信号有关。用相位累加器输出的数据作为波形存储器（ROM）的相位取样地址，这样就可以将存储在波形存储器内的波形抽样值取出，完成相位到幅值的变换。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727181602.png" alt="三角函数相位与幅度对应关系" style="zoom:40%; margin: auto;"></p>
<p>余弦信号在一个周期内相位和幅度的变化关系如上图所示。一个 <span class="math inline">\(N\)</span> 位的相位累加器对应着圆上的 <span class="math inline">\(2^N\)</span> 个相位点，其分辨率为 <span class="math inline">\(\Delta \phi = 2\pi/2^N\)</span>。上图 <span class="math inline">\(N = 4\)</span>，共存在 16 种相位值与 16
种幅度值相对应，波形存储器的字节数决定了相位量化误差，量化的比特数决定了幅度量化误差。在实际的
DDS 中，可以利用余弦波形的对称性，将 <span class="math inline">\(2\pi\)</span> 范围内的幅值相位点减小到 <span class="math inline">\(\pi/2\)</span> 内以降低所需的存储量。</p>
<h3 id="da-转化器-低通滤波器">D/A 转化器 &amp; 低通滤波器</h3>
<p>波形存储器的输出送到 D/A 转换器，D/A
转换器将其转化为合成信号的模拟量幅值，低通信号用于滤除不需要的取样分量，以便输出频谱纯净的余弦信号。</p>
<h2 id="dds-算法的-verilog-实现">DDS 算法的 Verilog 实现</h2>
<blockquote>
<p>待完成</p>
</blockquote>
]]></content>
      <categories>
        <category>DSP</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>DSP</tag>
      </tags>
  </entry>
  <entry>
    <title>以太网视频传输</title>
    <url>/2020/07/31/EthernetVideo/</url>
    <content><![CDATA[<p>在用 FPGA
进行图像处理时，通常的作法是接一个显示器，查看输出结果，不过这也太不方便了，手上的这块
<a href="http://www.tul.com.tw/ProductsPYNQ-Z2.html">PYNQ-Z2</a>
带有千兆以太网口，就想着用以太网传输视频，这样就可以抛弃笨重的显示器了。由于
Lei 同学已经完成了裸机的方案（见<a href="http://leiblog.wang/Ethernet-Video/">千兆以太网视频传输</a>）,并且之前已经在
ZYNQ 上移植了 Linux 系统，那就做一个运行在 Linux
系统上的以太网图像传输吧。其实这样做起来更简单，网上可以参考的也一大堆。</p>
<p><strong><em>GitHub Repository :</em></strong>
https://github.com/Starrynightzyq/streaming-udp-video</p>
<p>这个工程是用 C++ 写的，UDP 传输，依赖 OpenCV2，在 Mac 与 Linux 以及
ZYNQ 上都测试通过了。</p>
<!---more-->
<p>由于是为了验证图像算法的正确性，需要对输出的图像进行一些分析，因此我想得到的是原始的图像数据而不是压缩后的数据，稍微计算了一下，$
640 24bit $ 大小，30fps 的帧率的视频码率是
27.648MBps，用千兆网传输足够了。</p>
<h2 id="todo">TODO</h2>
<ul class="task-list">
<li><label><input type="checkbox">优化数据包结构，做物理包和逻辑包的区分，便于传输不同大小和格式的图像。目前包结构为
4 字节的 id 加上 1200
字节的图像数据，对图像大小和格式有很强的依赖性；</label></li>
<li><label><input type="checkbox">增加原始图像传输和压缩图像传输的切换功能，在不需要原始图像的时候传输压缩后的图像，减小网络压力；</label></li>
<li><label><input type="checkbox">使用 TCP
传输图像的大小和格式等配置信息，这样接收端就不需要手动设置这些数据了，实现接收端的自动化；</label></li>
<li><label><input type="checkbox">根据网络环境动态调整数据包大小；</label></li>
<li><label><input type="checkbox">加密，接收端目前接收任意数据；</label></li>
</ul>
<p><strong>由于之前没有系统地学习过计算机网络的知识，这次补了一下。</strong></p>
<h1 id="udp-or-tcp">UDP or TCP</h1>
<p><a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">TCP/IP
协议族</a>映射到 OSI 模型中分为 4
层，从下往上分别是：网络访问(链接)层(Network Access(link)
layer)、网络互连层(internet layer)、传输层(transport
layer)、应用层(application layer)。TCP 和 UDP 工作在传输层。</p>
<h1 id="tcp">TCP</h1>
<p>TCP(Transmission Control Protocol)
是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP协议的运行可划分为三个阶段：连接创建(<em>connection
establishment</em>)、数据传送（<em>data
transfer</em>）和连接终止（<em>connection termination</em>）。</p>
<h2 id="连接创建">连接创建</h2>
<p>TCP用三次握手（或称三路握手，three-way
handshake）过程创建一个连接:</p>
<ol type="1">
<li>客户端通过向服务器端发送一个<a href="https://zh.wikipedia.org/wiki/传输控制协议#建立通路">SYN</a>来创建一个主动打开，作为三次<a href="https://zh.wikipedia.org/wiki/握手_(技术)">握手</a>的一部分。客户端把这段连接的序号设定为随机数<strong>A</strong>。</li>
<li>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK的确认码应为<strong>A+1</strong>，SYN/ACK包本身又有一个随机产生的序号<strong>B</strong>。</li>
<li>最后，客户端再发送一个<a href="https://zh.wikipedia.org/wiki/確認訊息">ACK</a>。此时包的序号被设定为<strong>A+1</strong>，而ACK的确认码则为<strong>B+1</strong>。当服务端收到这个ACK的时候，就完成了三次握手，并进入了连接创建状态。</li>
</ol>
<p>如果服务器端接到了客户端发的SYN后回了SYN-ACK后客户端掉线了，服务器端没有收到客户端回来的ACK，那么，这个连接处于一个中间状态，既没成功，也没失败。于是，服务器端如果在一定时间内没有收到的TCP会重发SYN-ACK。在Linux下，默认重试次数为5次，重试的间隔时间从1s开始每次都翻倍，5次的重试时间间隔为1s,
2s, 4s, 8s,
16s，总共31s，第5次发出后还要等32s才知道第5次也超时了，所以，总共需要 1s
+ 2s + 4s+ 8s+ 16s + 32s =
63s，TCP才会断开这个连接。使用三个TCP参数来调整行为：tcp_synack_retries
减少重试次数；tcp_max_syn_backlog，增大SYN连接数；tcp_abort_on_overflow决定超出能力时的行为。
<img src="https://pic.zhouyuqian.com/img/20210727181731.png" alt="three-way handshake"></p>
<h2 id="数据传输">数据传输</h2>
<p>在TCP的数据传送状态，很多重要的机制保证了TCP的可靠性和强壮性。它们包括：使用序号，对收到的TCP报文段进行排序以及检测重复的数据；使用校验和检测报文段的错误，即无错传输；使用确认和计时器来检测和纠正丢包或延时；流控制（Flow
control）；拥塞控制（Congestion control）；丢失包的重传。</p>
<h2 id="连接终止">连接终止</h2>
<p>连接终止使用了四路握手过程（或称四次握手，four-way
handshake），在这个过程中连接的每一侧都独立地被终止。当一个端点要停止它这一侧的连接，就向对侧发送FIN，对侧回复ACK表示确认。因此，拆掉一侧的连接过程需要一对FIN和ACK，分别由两侧端点发出。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727181732.png" alt="four-way handshake">
<figcaption aria-hidden="true">four-way handshake</figcaption>
</figure>
<h2 id="tcp-包头结构">TCP 包头结构</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727181733.png" alt="tcp-head">
<figcaption aria-hidden="true">tcp-head</figcaption>
</figure>
<p>源端口 16位；目标端口 16位；序列号 32位；回应序号 32位；TCP头长度
4位；reserved 3位；控制代码 9位；窗口大小 16位；偏移量 16位；校验和
16位；选项 32位(可选)；</p>
<p>这样我们得出了TCP包头的最小长度，为20字节。</p>
<h1 id="udp">UDP</h1>
<p>UDP 是一个简单的面向数据报的通信协议。UDP
只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以
UDP 有时候也被认为是不可靠的数据报协议）。UDP 在 IP
数据报的头部仅仅加入了复用和数据校验字段。</p>
<p>UDP
适用于不需要或在程序中执行错误检查和纠正的应用，它避免了协议栈中此类处理的开销。对时间有较高要求的应用程序通常使用
UDP，因为丢弃数据包比等待或重传导致延迟更可取。</p>
<h2 id="udp-的分组结构">UDP 的分组结构</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727181734.png" alt="udp-head">
<figcaption aria-hidden="true">udp-head</figcaption>
</figure>
<p>UDP 头部包含了以下几个数据：</p>
<ul>
<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口；</li>
<li>整个数据报文的长度；</li>
<li>整个数据报文的检验和（IPv4 可选
字段），该字段用于发现头部信息和数据中的错误；</li>
</ul>
<p>因此 UDP 的头部开销小，只有 8 字节，相比 TCP 的至少 20
字节要少得多，在传输数据报文时是很高效的。</p>
<h2 id="udp数据分包大小的原则与一些思考">UDP数据分包大小的原则与一些思考</h2>
<p>编写程序时不可避免遇到一个疑惑，一次发多大的数据包为宜？理论上IP数据报最大长度是65535字节，这是由IP首部16比特总长度字段所限制，去除20字节的IP首部和8个字节的UDP首部，UDP数据报中用户数据的最长长度为65507字节，但是，大多数实现所提供的长度比这个最大值小。</p>
<p>以太网 IP 层的最大传输单元 (Maximum Transmission Unit,MTU) 为 1500
字节。如果以分包大小应该使在 IP 层不再进行分包为宜作为原则，那么因为 UDP
数据报的首部 8 字节，IP 首部 20 字节，所以 UDP 数据报的数据区最大长度为
1472 字节。如果说 IP 数据报大于 1500 字节,大于 MTU，这个时候发送方 IP
层就需要分片，把数据报分成若干片,使每一片都小于 MTU，而接收方 IP
层则需要进行数据报的重组，这样就会多做许多事情。而更严重的是，由于 UDP
的特性，当某一片数据传送中丢失时，接收方便无法重组数据报，将导致丢弃整个
UDP 数据报。因此，在普通的局域网环境下，建议将 UDP 的数据控制在 1472
字节以下为好，以降低丢包率。 进行 Internet 编程时则不同，因为 Internet
上的路由器可能会将 MTU 设为不同的值，鉴于 Internet 上的标准 MTU 值为 576
字节，建议在进行 Internet 的 UDP 编程时，最好将 UDP 的数据长度控件在 548
字节 (576-8-20) 以内。</p>
<h1 id="tcp与udp区别总结">TCP与UDP区别总结：</h1>
<ol type="1">
<li>TCP 面向连接（如打电话要先拨号建立连接）；UDP
是无连接的，即发送数据之前不需要建立连接；</li>
<li>TCP
提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP尽最大努力交付，即不保证可靠交付；</li>
<li>TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流；UDP
是面向报文的；UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如
IP 电话，实时视频会议等）；</li>
<li>每一条 TCP 连接只能是点到点的；UDP
支持一对一，一对多，多对一和多对多的交互通信；</li>
<li>TCP 首部开销 20 字节；UDP 的首部开销小，只有 8 个字节；</li>
<li>TCP 的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道；</li>
</ol>
<h1 id="reference">Reference</h1>
<ul>
<li>https://en.wikipedia.org/wiki/Internet_protocol_suite</li>
<li>https://en.wikipedia.org/wiki/Transmission_Control_Protocol</li>
<li>https://en.wikipedia.org/wiki/User_Datagram_Protocol</li>
<li>https://blog.fundebug.com/2019/03/22/differences-of-tcp-and-udp/</li>
<li>https://www.cnblogs.com/skyfsm/p/6287787.html</li>
</ul>
]]></content>
      <categories>
        <category>Ethernet</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>HDB3&amp;BPSK</title>
    <url>/2018/12/24/HDB3-BPSK/</url>
    <content><![CDATA[<h1 id="可行性分析">可行性分析</h1>
<h2 id="需要的资源">需要的资源</h2>
<ul>
<li>ADC；</li>
<li>DDS；</li>
<li>DAC；</li>
</ul>
<h2 id="实现">实现</h2>
<p>根据上述要求，选择EGo1板卡。</p>
<ul>
<li><p>ADC可使用Artix7芯片自带的XADC；</p>
<blockquote>
<p>http://xilinx.eetrend.com/d6-xilinx/blog/2014-02/6676.html</p>
<p>https://forums.xilinx.com/t5/Xcell-Daily-Blog-Archived/Adam-Taylor-s-MicroZed-Chronicles-Part-104-XADC-with-Real-World/ba-p/659668</p>
<p>https://zhuanlan.zhihu.com/p/44495333</p>
</blockquote>
<p><a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842057/Zynq+AXI+XADC+App+Note">Zynq
AXI XADC App Note</a></p></li>
<li><p>DDS可使用xilinx的DDS IP核；</p>
<blockquote>
<p>https://zhuanlan.zhihu.com/p/36929424</p>
</blockquote></li>
<li><p>DAC可使用板卡上的DAC0832芯片；</p>
<blockquote>
<p>https://e-elements.readthedocs.io/zh/ego1_v2.1/EGo1.html#dac</p>
</blockquote></li>
</ul>
<h1 id="hdb3-编码">HDB3 编码</h1>
<p><a href="https://wenku.baidu.com/view/24b7bc227fd5360cba1adb6c">参考</a></p>
]]></content>
      <categories>
        <category>课设</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>HDB3</tag>
        <tag>BPSK</tag>
        <tag>通信原理</tag>
      </tags>
  </entry>
  <entry>
    <title>LC-VCO</title>
    <url>/2021/03/24/LC-VCO/</url>
    <content><![CDATA[<h1 id="lc-vco-原理">LC-VCO 原理</h1>
<h2 id="lc-振荡器">LC 振荡器</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727182903.png" alt="image-20210327165004749" style="zoom:33%;"></p>
<p>振荡器的本质是一个非线性反馈系统，如上图所示，该系统的开环传递函数为
<span class="math inline">\(H(s)\)</span>，则其闭环传递函数可以表示为：
<span class="math display">\[
\frac{V_{out}}{V_{in}}=\frac{H(s)}{1+H(s)}
\]</span> 当 <span class="math inline">\(H(s)=-1\)</span>
时，负反馈系统的输出为无穷大，这样系统中的任何节点上有一个小的抖动或者噪声都能够使得系统发生振荡，这时候负反馈系统变成正反馈。</p>
<p>一个负反馈系统必须满足以下两个 Barkhausen
振荡原则，电路才能够在频率点 <span class="math inline">\(\omega
_0(s=j\omega _0)\)</span> 上发生振荡：</p>
<ul>
<li>振荡器开环增益 <span class="math inline">\(|H(j\omega
_0)|\geq1\)</span>；</li>
<li>振荡器的开环相移为 180°。</li>
</ul>
<p>在实际电路设计中，振荡器的开环增益往往是计算值的 2-3
倍。这主要是为了克服工艺和温度的偏差，以及由于电路非线性造成的开环增益的下降。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182903.png" alt="image-20210328191139257" style="zoom:50%;"></p>
<p>如上图(a)所示，一个理想的电感电容谐振电路，在频率 <span class="math inline">\(\omega_{res}=1/\sqrt{LC}\)</span>
处谐振，在此频率下，电感的阻抗 <span class="math inline">\(jL\omega_{res}\)</span> 和电容的阻抗 <span class="math inline">\(1/(jC\omega_{res})\)</span>
幅值相等而方向相反，因此产生了无穷大的阻抗，回路的品质因数Q
为无穷大。实际的片上电感和电容都存在串联电阻，如图(b)所示，可以将其等效为电路(c)，电路(b)和电路(c)阻抗相等，有如下的关系：
<span class="math display">\[
Ls+R_L=\frac{R_{P,L}\cdot L_Ps}{R_{P,L}+L_Ps}
\]</span> 只考虑稳态，假设 <span class="math inline">\(s=j\omega\)</span>，上式可以写成： <span class="math display">\[
(L\cdot R_{P,L}+L_P\cdot R_L)j\omega+R_{L}\cdot R_{P,L}-L\cdot L_P \cdot
\omega^2=R_{P,L}\cdot L_P\cdot j\omega
\]</span> 要求对所有的 <span class="math inline">\(\omega\)</span>
值都成立，则： <span class="math display">\[
L\cdot R_{P,L}+L_P\cdot R_L =R_{P,L}\cdot L_P
\]</span></p>
<p><span class="math display">\[
R_{L}\cdot R_{P,L}-L\cdot L_P \cdot \omega^2 = 0
\]</span></p>
<p>则有： <span class="math display">\[
L_P= L(1+\frac{1}{Q_L^2})\quad , \quad Q_L= \frac{L\omega}{R_L}
\]</span></p>
<p><span class="math display">\[
R_{P,L}=(1+Q_L)^2R_L
\]</span></p>
<p>同样的可以推导出： <span class="math display">\[
C_P= \frac{C}{1+\frac{1}{Q_C^2}}\quad,\quad Q_C = \frac{1}{\omega C R_C}
\]</span></p>
<p><span class="math display">\[
R_{P,C} =(1+Q_C)^2R_C
\]</span></p>
<p><span class="math display">\[
R_P =R_{P,L}+ R_{P,C}=(1+Q_L)^2+(1+Q_C)^2R_C
\]</span></p>
<p>RLC 并联谐振回路的品质因数 <span class="math inline">\(Q_{tank} =
{R_P}/{\omega L_P}=\omega C_P R_P\)</span>，谐振频率为 <span class="math inline">\(\omega _{res} =
1/\sqrt{L_PC_P}\)</span>，在谐振频率处，RLC 并联等效电路的输出阻抗为
<span class="math inline">\(R_P\)</span>。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182932.png" alt="截屏2021-03-28 下午7.54.27" style="zoom:50%;"></p>
<p>上图画出振荡回路的阻抗和频率的关系。</p>
<h2 id="交叉耦合振荡器">交叉耦合振荡器</h2>
<h2 id="从负电阻角度理解">从"负电阻"角度理解</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727182944.png" alt="image-20210328195729413" style="zoom:50%;"></p>
<p>如上图(a)所示，当有一个电流脉冲刺激 RLC 并联电路时，RLC
电路将发生振荡，由于电阻 <span class="math inline">\(R_P\)</span>
的存在，振荡将慢慢衰减为零。如果将一负阻 <span class="math inline">\(-R_P\)</span> 与该电路并联，如图(b)所示，RLC
电路的并联电阻为
0，这样振荡将永远维持下去。因此如果单端口电路有一负电阻与振荡回路并联，如图(c)所示，电路就会永远振荡。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182954.png" alt="image-20210328204242084" style="zoom:50%;"></p>
<p>上图为采用 MOS 管实现的负阻电路和其交流小信号等效电路。忽略 MOS 管
Mn1 和Mn2 的衬底效应和沟道调制效应，可以得到： <span class="math display">\[
V_x = V_2-V_1,\quad I_x = g_{m2}V_1=-g_{m1}V_2
\]</span> 则： <span class="math display">\[
V_x = V_2-V_1=-\frac{-I_x}{g_{m2}}-\frac{-I_x}{g_{m1}} = -I_x\left(
\frac{1}{g_{m1}}+ \frac{1}{g_{m2}} \right)
\]</span> 如果 Mn1 和 Mn2 相同，则： <span class="math display">\[
\frac{V_x}{I_x}= -\frac{2}{g_m}
\]</span>
当加在负阻的两端的电压增加时，负阻将对外输出电流。如果将上图中的交叉耦合差分对管与
RLC 回路相并联，如下图所示，并且保证 <span class="math inline">\(R_P\leq
2/g_m\)</span> 时，负阻就能够为 RLC 回路中的并联电阻 <span class="math inline">\(R_P\)</span> 消耗的能量进行源源不断的补偿。节点 X
和 Y
将产生差分振荡信号，<strong>振荡波形与尾电流偏置大小有关。</strong></p>
<p><img src="https://pic.zhouyuqian.com/img/20210727183006.png" alt="image-20210328205400270" style="zoom:50%;"></p>
<h1 id="谐振振荡器内在振荡机制">谐振振荡器内在振荡机制</h1>
<h2 id="振荡器谐振幅度">振荡器谐振幅度</h2>
<h1 id="vco-压控振荡器">VCO 压控振荡器</h1>
<h2 id="指标">指标</h2>
<h2 id="lc-vco-的调节">LC-VCO 的调节</h2>
<p>LC 振荡器的振荡频率等于 <span class="math inline">\(f_{osc}=1/(2\pi
\sqrt{LC})\)</span>，因为改变单片电感的值很困难，我们可以调节电容值来调节振荡器。电容值与电压值有关的电容被称为“可变电容器”
(varactor)。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727183016.png" alt="image-20210328213837766" style="zoom:50%;"></p>
<p>如上图所示，变容二极管可以使用 MOS 管构成。</p>
<h2 id="vco-的数学模型">VCO 的数学模型</h2>
<h1 id="lc-vco-的设计">LC-VCO 的设计</h1>
<h2 id="电路结构">电路结构</h2>
<h2 id="varactor-变容二极管仿真">**Varactor 变容二极管仿真</h2>
<h3 id="ac">AC</h3>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727182839.png" alt="tb-ac">
<figcaption aria-hidden="true">tb-ac</figcaption>
</figure>
<p>AC
仿真使用的电路如上图所示。<strong>为了减小栅电阻，使用多指结构；为了减小沟道电阻，使用最小的沟道长度。</strong></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727182840.svg" alt="imaginary-L10u-W10u">
<figcaption aria-hidden="true">imaginary-L10u-W10u</figcaption>
</figure>
<p>仿真结果 imaginary 和频率的关系如上图所示。<span class="math inline">\(imag=2\pi fC_{var}\)</span>。</p>
<h3 id="dc">DC</h3>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727182841.png" alt="tb-dc">
<figcaption aria-hidden="true">tb-dc</figcaption>
</figure>
<p>DC 仿真使用的电路如上图所示。同时使用 "DC" 和 "parametric
analysis"，扫描控制电压 VB。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727182842.svg" alt="cgg-L10u-W10u">
<figcaption aria-hidden="true">cgg-L10u-W10u</figcaption>
</figure>
<p>使用 "calculator" 中的 "op" 选项 (operating point)，获取变容二极管的
"cgg" 参数，画出其与控制电压的关系。可以看到，当控制电压在 0-1.2 V
之间时，cgg 和 VB
近似可以看成一个线性的关系。当要在相同的控制电压下获得其他值的电容，只需要按比例缩放变容二极管的
W 和 L。</p>
<h2 id="inductor-电感仿真">Inductor 电感仿真</h2>
<blockquote>
<p>待完成</p>
</blockquote>
<h2 id="电路参数确定">电路参数确定</h2>
<blockquote>
<p>待完成</p>
</blockquote>
<h2 id="整体仿真">整体仿真</h2>
<blockquote>
<p>待完成</p>
</blockquote>
<h1 id="references">References</h1>
<p>[] <a href>L100-VCOs-2UP(9_1_03) by P.E.Allen</a></p>
<p>[] <a href>唐长文博士论文_PhD_Thesis</a></p>
<p>[] <a href>RFIC Design Tutorial Voltage Controlled Oscillators
Prepared By: Burak Catli</a></p>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Learning</title>
    <url>/2019/02/12/Linux-Learning/</url>
    <content><![CDATA[<p>磁盘分区工具：gparted</p>
]]></content>
  </entry>
  <entry>
    <title>Linux Wake on Lan</title>
    <url>/2020/04/04/Linux-Wake-on-Lan/</url>
    <content><![CDATA[<h1 id="wake-on-lan-原理">Wake on Lan 原理</h1>
<p>局域网唤醒（“
WOL”）使用称为魔术包的特殊设计的帧实现，该帧发送到网络中的所有计算机，其中包括要唤醒的计算机。魔术包包含目标计算机的MAC地址，每个网卡内置的标识号（“
NIC”）或计算机中的其他以太网设备，使其能够在网络上被唯一识别和寻址。局域网唤醒功能需要计算机包含能够在系统关闭电源时以低功耗模式“侦听”传入数据包的网络设备。如果收到指向设备
MAC 地址的魔术包，则 NIC
会以与按电源按钮相同的方式向计算机的电源或主板发出信号，以启动系统唤醒。</p>
<p>魔术包在<a href="https://en.wikipedia.org/wiki/Data_link_layer">数据链路层</a>（<a href="https://en.wikipedia.org/wiki/OSI_model">OSI 模型</a>中的第 2
层）上发送，并在发送时使用网络<a href="https://en.wikipedia.org/wiki/Broadcast_address">广播地址</a>广播到给定网络上的所有连接的设备；IP地址（OSI
模型中的第 3 层）未使用。</p>
<p>由于局域网唤醒是基于广播技术构建的，因此它通常只能在当前网络子网中使用。但是，也有一些例外情况，只要适当的配置和硬件（包括跨
Internet 的远程唤醒），局域网唤醒实际上就可以在任何网络上运行。</p>
<p>为了使局域网唤醒工作，部分网络接口需要保持打开状态。这消耗了少量的待机功率，远低于正常工作功率。通常将链路速度降低到可能的最低速度，以免浪费功率（例如，千兆以太网
NIC 仅保持10 Mbit /
s的链路）。在不需要时禁用LAN唤醒可以非常轻微地减少已关闭但仍插入电源插座的计算机的功耗。</p>
<h2 id="magic-packet">Magic Packet</h2>
<p>Magic Packet 是一个广播帧（frame），透过端口 7 或端口
<strong><em>9</em></strong> 进行发送，且可以用无连接（Connectionless
protocol）的通讯协议（如UDP、IPX）来传递，不过一般而言多是用 UDP。</p>
<p>Magic Packet 首先是连续 6 个字节的
“FF”（十六进制），其次是目标计算机的 48 位 MAC 地址的 16
次重复（有时还会带出 4 字节或 6 字节的密码），总共102个字节。</p>
<h1 id="注意事项">注意事项</h1>
<ol type="1">
<li><p>局域网被唤醒的IP地址是广播地址：192.168.x.255，端口为
9，路由器收到后通过广播，数据包一定可以发送该局域网内待唤醒的这台机器；</p></li>
<li><p>公网唤醒我们无办法填写具体的内网地址，只能配置路由器的公网
IP，然后通过数据转发到具体的电脑 IP 地址，由于不是广播地址，也由于路由器
ARP 映射表在电脑关机后一定时间会丢失，所以路由器没有办法知道哪个 IP
是MAC所对应那台机器，所以魔术包被丢弃，所以要么增加 ARP
绑定，要么添加端口转发规则到广播地址 (192.168.x.255 和 端口 9)。</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Broadcast_address">广播地址</a>计算方法:</p>
<p><code>&lt;IP&gt;</code> | (~ <code>&lt;net mask&gt;</code>)</p>
<p>如：<code>192.168.0.11</code> | (~ <code>255.255.255.0</code>) =
<code>192.168.0.255</code></p>
</blockquote></li>
</ol>
<span id="more"></span>
<blockquote>
<p>启动者(电脑A) -----------&gt; 被远程开启的电脑(电脑B)</p>
</blockquote>
<h1 id="被远程开启的电脑电脑b-设置">被远程开启的电脑(电脑B) 设置</h1>
<ol type="1">
<li><p>在主板 BIOS 中将 <em>Wake On Land / Wake On PCI(E)</em> 设为
Enable；</p></li>
<li><p>在 Linux 系统中安装 ethtool：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install ethtool</span><br></pre></td></tr></table></figure></li>
<li><p>查看 WOL 是否打开：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ethtool &lt;网卡名称&gt;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ethtool eno1</span><br></pre></td></tr></table></figure>
<p>如果没有发现 <em>Wake-on: g</em>，说明网络唤醒没打开</p></li>
<li><p>打开 WOL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ethtool -s &lt;网卡名称&gt; wol g</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ethtool -s eno1 wol g</span><br></pre></td></tr></table></figure>
<p>然后再用 <code>sudo ethtool &lt;网卡名称&gt;</code> 查看 WOL
是否打开，看到 <em>Wake-on: g</em>，说明 WOL 已经打开了。</p></li>
</ol>
<h1 id="启动者电脑a-设置">启动者(电脑A) 设置</h1>
<p>这里只说 A 电脑也是 Linux 的情况，因为其他平台上的 WOL
软件很多，Android、Mac、路由器上都有。</p>
<ol type="1">
<li><p>安装 wakeonlan：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install wakeonlan</span><br></pre></td></tr></table></figure></li>
<li><p>启动 B 电脑：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wakeonlan &lt; B 电脑配好 WOL 的网卡的 MAC 地址&gt;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wakeonlan 4c:cc:6a:f5:ab:84</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>Reference:</p>
<p>https://en.wikipedia.org/wiki/Wake-on-LAN</p>
<p>https://zhuanlan.zhihu.com/p/29100480</p>
</blockquote>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Samba Server</title>
    <url>/2020/03/15/Linux-Samba-Server/</url>
    <content><![CDATA[<p>在 Linux 下搭建 Samba Server，以 Ubuntu 18.04 为例。</p>
<blockquote>
<p>Samba is a free and open-source re-implementation of the <a href="https://docs.microsoft.com/en-us/windows/desktop/FileIO/microsoft-smb-protocol-and-cifs-protocol-overview">SMB/CIFS
network file sharing protocol</a> that allows end users to access files,
printers, and other shared resources.</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p><strong>reference:</strong>
https://linuxize.com/post/how-to-install-and-configure-samba-on-ubuntu-18-04/</p>
</blockquote>
<h1 id="安装-samba">安装 Samba</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install samba</span><br></pre></td></tr></table></figure>
<p>安装完成后，Samba 服务会自动开启，可以用如下命令检查其状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status smbd</span><br></pre></td></tr></table></figure>
<p>结果类似这样：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">● smbd.service - Samba SMB Daemon</span><br><span class="line">   Loaded: loaded (/lib/systemd/<span class="built_in">system</span>/smbd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sun <span class="number">2020</span>-<span class="number">03</span>-<span class="number">15</span> <span class="number">22</span>:<span class="number">16</span>:<span class="number">30</span> CST; 49<span class="built_in">min</span> ago</span><br><span class="line">     Docs: man:smbd(<span class="number">8</span>)</span><br><span class="line">           man:samba(<span class="number">7</span>)</span><br><span class="line">           man:smb.conf(<span class="number">5</span>)</span><br><span class="line"> Main PID: <span class="number">1434</span> (smbd)</span><br><span class="line">   Status: <span class="string">&quot;smbd: ready to serve connections...&quot;</span></span><br><span class="line">    Tasks: <span class="number">4</span> (<span class="built_in">limit</span>: <span class="number">4915</span>)</span><br><span class="line">   CGroup: /<span class="built_in">system</span>.slice/smbd.service</span><br><span class="line">           ├─<span class="number">1434</span> /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           ├─<span class="number">1436</span> /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           ├─<span class="number">1437</span> /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           └─<span class="number">1439</span> /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>月 <span class="number">15</span> <span class="number">22</span>:<span class="number">16</span>:<span class="number">30</span> fitz-MS-<span class="number">7B00</span> systemd[<span class="number">1</span>]: Starting Samba SMB Daemon...</span><br><span class="line"><span class="number">3</span>月 <span class="number">15</span> <span class="number">22</span>:<span class="number">16</span>:<span class="number">30</span> fitz-MS-<span class="number">7B00</span> systemd[<span class="number">1</span>]: Started Samba SMB Daemon.</span><br></pre></td></tr></table></figure>
<h1 id="配置防火墙">配置防火墙</h1>
<p>If you have a firewall running on your Ubuntu system you’ll need to
allow incoming UDP connections on ports <code>137</code> and
<code>138</code> and TCP connections on ports <code>139</code> and
<code>445</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ufw allow <span class="string">&#x27;Samba&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="创建-samba-用户和目录">创建 Samba 用户和目录</h1>
<ol type="1">
<li><p>创建 Samba 根目录 (暂且这么说吧)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /samba</span><br></pre></td></tr></table></figure>
<p>设置用户组，将 <code>/samba</code> 目录的用户组改为
<code>sambashare</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chgrp</span> sambashare /samba</span><br></pre></td></tr></table></figure></li>
<li><p>创建 Samba 普通用户：</p>
<p>首先创建一个名为 <code>josh</code> 的用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> useradd -M -d /samba/josh -s /usr/sbin/nologin -G sambashare josh</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>-M</code> -do not create the user’s home directory. We’ll
manually create this directory.</li>
<li><code>-d /samba/josh</code> - set the user’s home directory to
<code>/samba/josh</code>.</li>
<li><code>-s /usr/sbin/nologin</code> - disable shell access for this
user.</li>
<li><code>-G sambashare</code> - add the user to the
<code>sambashare</code> group.</li>
</ul>
</blockquote>
<p>创建该用户的 <code>home</code> 目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /samba/josh</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> josh:sambashare /samba/josh</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 2770 /samba/josh</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>chmod</code> 命令说明：</p>
<p>This command here will add the setgid bit to the
<code>/samba/josh</code> directory so the newly created files in this
directory will inherit the group of the parent directory. This way, no
matter which user creates a new file, the file will have group-owner of
<code>sambashare</code>. For example, if you don’t set the directory’s
permissions to <code>2770</code> and the <code>sadmin</code> user
creates a new file the user <code>josh</code> will not be able to
read/write to this file.</p>
</blockquote>
<p>将用户添加到 Samba 数据库中，同时设置的 Samba 密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> smbpasswd -a josh</span><br></pre></td></tr></table></figure>
<p>在 Samba 中启用该用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> smbpasswd -e josh</span><br></pre></td></tr></table></figure></li>
<li><p>创建 Samba 管理员用户：</p>
<p>过程与创建普通用户类似。</p>
<p>首先创建名为 <code>sadmin</code> 的用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> useradd -M -d /samba/users -s /usr/sbin/nologin -G sambashare sadmin</span><br></pre></td></tr></table></figure>
<p>设置密码并启用该用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> smbpasswd -a sadmin</span><br><span class="line"><span class="built_in">sudo</span> smbpasswd -e sadmin</span><br></pre></td></tr></table></figure>
<p>创建用户的 <code>home</code> 目录 (同时也是 Samba 共享目录)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /samba/users</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> sadmin:sambashare /samba/users</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 2770 /samba/users</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="配置-samba-共享">配置 Samba 共享：</h1>
<p>编辑文件 <code>/etc/samba/smb.conf</code> ，加入如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line">    path = /samba/<span class="type">users</span></span><br><span class="line">    <span class="variable">browseable</span> <span class="operator">=</span> yes</span><br><span class="line">    <span class="type">read</span> <span class="variable">only</span> <span class="operator">=</span> no</span><br><span class="line">    force <span class="type">create</span> <span class="variable">mode</span> <span class="operator">=</span> <span class="number">0660</span></span><br><span class="line">    force <span class="type">directory</span> <span class="variable">mode</span> <span class="operator">=</span> <span class="number">2770</span></span><br><span class="line">    <span class="type">valid</span> <span class="variable">users</span> <span class="operator">=</span> <span class="meta">@sambashare</span> <span class="meta">@sadmin</span></span><br><span class="line"></span><br><span class="line">[josh]</span><br><span class="line">    path = /samba/<span class="type">josh</span></span><br><span class="line">    <span class="variable">browseable</span> <span class="operator">=</span> no</span><br><span class="line">    <span class="type">read</span> <span class="variable">only</span> <span class="operator">=</span> no</span><br><span class="line">    force <span class="type">create</span> <span class="variable">mode</span> <span class="operator">=</span> <span class="number">0660</span></span><br><span class="line">    force <span class="type">directory</span> <span class="variable">mode</span> <span class="operator">=</span> <span class="number">2770</span></span><br><span class="line">    <span class="type">valid</span> <span class="variable">users</span> <span class="operator">=</span> josh <span class="meta">@sadmin</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>[users]</code> and <code>[josh]</code> - The names of the
shares that you will use when logging in.</li>
<li><code>path</code> - The path to the share.</li>
<li><code>browseable</code> - Whether the share should be listed in the
available shares list. By setting to <code>no</code> other users will
not be able to see the share.</li>
<li><code>read only</code> - Whether the users specified in the
<code>valid users</code> list are able to write to this share.</li>
<li><code>force create mode</code> - Sets the permissions for the newly
created files in this share.</li>
<li><code>force directory mode</code> - Sets the permissions for the
newly created directories in this share.</li>
<li><code>valid users</code> - A list of users and groups that are
allowed to access the share. Groups are prefixed with the <code>@</code>
symbol.</li>
</ul>
</blockquote>
<p>最后重启 Samba 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart smbd</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart nmbd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 权限问题</title>
    <url>/2020/03/10/Linux-%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>记录一下 Linux 下的用户、用户组、文件权限等基本知识，不能动不动就
777。</p>
<p>主要参考了 <a href="https://juejin.im/post/5bad92cd6fb9a05cde1d6076">一言不合就改成
777 权限？会出人命的！</a></p>
<span id="more"></span>
<h1 id="基本操作">基本操作</h1>
<p>在 Linux
中，一个用户是可以属于多个组的，一个组也是可以包含多个用户的。</p>
<h2 id="用户和用户组">用户和用户组</h2>
<ol type="1">
<li><p>查看所有的用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d<span class="string">&#x27;:&#x27;</span> -f 1 /etc/passwd</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line">daemon</span><br><span class="line">bin</span><br><span class="line">sys</span><br><span class="line"><span class="built_in">sync</span></span><br><span class="line">...</span><br><span class="line">sshd</span><br></pre></td></tr></table></figure></li>
<li><p>查看所有的用户组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d<span class="string">&#x27;:&#x27;</span> -f 1 /etc/group</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line">kmem</span><br><span class="line">dialout</span><br><span class="line">fax</span><br><span class="line">voice</span><br><span class="line">cdrom</span><br><span class="line">floppy</span><br><span class="line"><span class="meta prompt_">...</span></span><br><span class="line">lpadmin</span><br></pre></td></tr></table></figure></li>
</ol>
<p>结果基本是类似的，因为每个用户在被创建的时候都会自动创建一个同名的组作为其默认的用户组。</p>
<ol start="3" type="1">
<li><p>查看一个用户所属的用户组，这里用 ubuntu 用户演示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">groups</span> ubuntu</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">ubuntu : <span class="type">ubuntu</span> adm cdrom sudo dip plugdev lxd lpadmin sambashare</span><br></pre></td></tr></table></figure>
<p>这个用户被分配到了很多组下，比如同名的组 ubuntu，还有 sudo
组，另外还有一些其他的组。</p>
<p>其中 sudo 组比较特殊，如果被分到了这个组里面就代表该账号拥有 root
权限，可以使用 sudo 命令。</p></li>
<li><p>查看一个用户组里有哪些用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">members &lt;group&gt;</span><br></pre></td></tr></table></figure>
<p>不过这个命令不是自带的，需要额外安装 members 包</p></li>
<li><p>一个比较有用的命令，就是 id
命令，它可以用来查看用户的所属组别，格式如下：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span> &lt;username&gt;</span><br></pre></td></tr></table></figure>
<p>这里有一个 gid，作为主工作组，后面还有个
groups，它列出了用户所在的所有组。主工作组只有一个，而后者的数量则不限。可以看到用户组的结果和使用
groups 命令看到的结果是一致的。</p></li>
<li><p>何创建一个用户和怎样为用户分配组别</p>
<p>添加用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> adduser &lt;username&gt;</span><br></pre></td></tr></table></figure>
<p>添加组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> groupadd &lt;group&gt;</span><br></pre></td></tr></table></figure>
<p>把某个用户加入到某个组里面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> adduser &lt;username&gt; &lt;group&gt;</span><br></pre></td></tr></table></figure>
<p>或者使用 usermod 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -G &lt;group&gt; &lt;username&gt;</span><br></pre></td></tr></table></figure>
<p>如果要添加多个组的话，可以通过 -a 选项指定多个名称：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG &lt;group1,group2,group3..&gt; &lt;username&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="文件权限管理">文件权限管理</h2>
<p>首先列出某个目录下文件的详细信息，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -all</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">total 80</span><br><span class="line">drwxr-xr-x  <span class="number"> 7 </span>root root <span class="number"> 4096 </span>Jun<span class="number"> 21 </span>22:16 ./</span><br><span class="line">drwxr-xr-x<span class="number"> 103 </span>root root <span class="number"> 4096 </span>Sep <span class="number"> 4 </span>18:04 ../</span><br><span class="line">drwxr-xr-x  <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Jul<span class="number"> 12 </span><span class="number"> 2017 </span>conf.d/</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root <span class="number"> 1077 </span>Feb<span class="number"> 12 </span><span class="number"> 2017 </span>fastcgi.conf</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root <span class="number"> 1007 </span>Feb<span class="number"> 12 </span><span class="number"> 2017 </span>fastcgi_params</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root <span class="number"> 2837 </span>Feb<span class="number"> 12 </span><span class="number"> 2017 </span>koi-utf</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root <span class="number"> 2223 </span>Feb<span class="number"> 12 </span><span class="number"> 2017 </span>koi-win</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root <span class="number"> 3957 </span>Feb<span class="number"> 12 </span><span class="number"> 2017 </span>mime.types</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root <span class="number"> 1505 </span>Jun<span class="number"> 21 </span>20:24 nginx.conf</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root<span class="number"> 12288 </span>Jun<span class="number"> 21 </span>20:44 .nginx.conf.swp</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root  <span class="number"> 180 </span>Feb<span class="number"> 12 </span><span class="number"> 2017 </span>proxy_params</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root  <span class="number"> 636 </span>Feb<span class="number"> 12 </span><span class="number"> 2017 </span>scgi_params</span><br><span class="line">drwxr-xr-x  <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Jun<span class="number"> 21 </span>22:42 sites-available/</span><br><span class="line">drwxr-xr-x  <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Jun<span class="number"> 21 </span>19:08 sites-enabled/</span><br><span class="line">drwxr-xr-x  <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Jun<span class="number"> 21 </span>19:08 snippets/</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root  <span class="number"> 664 </span>Feb<span class="number"> 12 </span><span class="number"> 2017 </span>uwsgi_params</span><br><span class="line">drwxr-xr-x  <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Jun<span class="number"> 22 </span>02:44 vhosts/</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root <span class="number"> 3071 </span>Feb<span class="number"> 12 </span><span class="number"> 2017 </span>win-utf</span><br></pre></td></tr></table></figure>
<p>一共包括七列：</p>
<ul>
<li>第一列是文件的权限信息</li>
<li>第二列表示该文件夹连接的文件数</li>
<li>第三列表示文件所属用户</li>
<li>第四列表示文件所属用户组</li>
<li>第五列表示文件大小（字节）</li>
<li>第六列表示最后修改日期</li>
<li>第七列表示文件名</li>
</ul>
<p>其中第一列的文件权限信息是非常重要的，它由十个字符组成：</p>
<ul>
<li>第一个字符代表文件的类型，有三种，- 代表这是一个文件，d
代表这是一个文件夹，l 代表这是一个链接。</li>
<li>第 2-4 个字符代表文件所有者对该文件的权限，r 就是读，w 就是写，x
就是执行，如果是文件夹的话，执行就意味着查看文件夹下的内容，例如 rw-
就代表文件所有者可以对该文件进行读取和写入。</li>
<li>第 5-7 个字符代表文件所属组对该文件的权限，含义是一样的，如 r-x
就代表该文件所属组内的所有用户对该文件有读取和执行的权限。</li>
<li>第 8-10 个字符代表是其他用户对该文件的权限，含义也是一样的，如 r--
就代表非所有者，非用户组的用户只拥有对该文件的读取权限。</li>
</ul>
<ol type="1">
<li><p>修改文件权限</p>
<p>我们可以使用 chmod 命令来改变文件或目录的权限，有这么几种用法。</p>
<p>一种是数字权限命名，rwx 对应一个二进制数字，如 101
就代表拥有读取和执行的权限，而转为十进制的话，r 就代表 4，w 就代表 2，x
就代表 1，然后三个数字加起来就和二进制数字对应起来了。如
7=4+2+1，这就对应着 rwx；5=4+1，这就对应着 r-x。所以，相应地 777
就代表了
rwxrwxrwx，即所有者、所属用户组、其他用户对该文件都拥有读取、写入、执行的权限，这是相当危险的！</p>
<p>赋予权限的命令如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">sudo chmod <span class="tag">&lt;<span class="name">permission</span>&gt;</span> <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>例如我要为一个 file.txt 赋予 777 权限，就写成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 file.txt</span><br></pre></td></tr></table></figure>
<p>另外我们也可以使用代号来赋予权限，代号有 u、g、o、a
四中，分别代表所有者权限，用户组权限，其他用户权限和所有用户权限，这些代号后面通过
+ 和 - 符号来控制权限的添加和移除，再后面跟上权限类型就好，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> u-x file.txt</span><br></pre></td></tr></table></figure>
<p>就是给所有者移除 x 权限，也就是执行权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> g+w file.txt</span><br></pre></td></tr></table></figure>
<p>就是为用户组添加 w 权限，即写入权限。</p>
<p>另外如果是文件夹的话还可以对文件夹进行递归赋权限操作，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 777 share</span><br></pre></td></tr></table></figure>
<p>就是将 share 文件夹和其内所有内容都赋予 777 权限。</p></li>
<li><p>修改文件所属用户和所属用户组</p>
<p>命令格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> &lt;username&gt; &lt;file&gt; <span class="comment"># 修改文件所属用户</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chgrp</span> &lt;group&gt; &lt;file&gt;    <span class="comment"># 修改文件所属用户组</span></span><br></pre></td></tr></table></figure>
<p>另外同样可以使用 -R 来进行递归操作，如将 share
文件夹及其内所有内容的所有者都换成 cqc，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R cqc share/</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 自动挂载磁盘</title>
    <url>/2020/03/15/Linux-%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98/</url>
    <content><![CDATA[<blockquote>
<p>主要参考了：https://www.jianshu.com/p/ce31ae7da616</p>
</blockquote>
<h1 id="挂载点目录简介">挂载点目录简介</h1>
<ol type="1">
<li><p>Linux 常见的挂载目录结构：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183057.jpg" alt="img">
<figcaption aria-hidden="true">img</figcaption>
</figure></li>
</ol>
<span id="more"></span>
<ol start="2" type="1">
<li><p>常见挂载目录说明：</p>
<p><code>/</code>
根目录，存放系统命令和用户数据等（如果下面挂载点没有单独的分区，它们都将在根目录的分区中）
<code>/boot</code> boot loader 的静态链接文件，存放与Linux启动相关的程序
<code>/home</code> 用户目录，存放普通用户的数据 <code>/tmp</code>
临时文件 <code>/usr</code>
是Linux系统存放软件的地方,如有可能应将最大空间分给它
<code>/usr/local</code> 自已安装程序安装在此 <code>/var</code>
不断变化的数据，服务器的一些服务、日志放在下面 <code>/opt</code>
（Option可选的）附加的应用程序软件包 <code>/bin</code> 基本命令执行文
<code>/dev</code> 设备文件 <code>/etc</code> 主机特定的系统配置
<code>/lib</code> 基本共享库以及内核模块 <code>/media</code>
用于移动介质的挂载点 <code>/mnt</code>
用于临时挂载文件系统或者别的硬件设备（如光驱、软驱） <code>/proc</code>
系统信息的虚拟目录(2.4 和 2.6
内核)，这些信息是在内存中，由系统自己产生的 <code>/root</code> root
用户的目录 <code>/sbin</code> 基本系统命令执行文件 <code>/sys</code>
系统信息的虚拟目录(2.6 内核) <code>/srv</code> 系统提供的用于 service
的数据 <code>/usr/X1186</code>
X-Windows目录，存放一些X-Windows的配置文件 <code>/usr/include</code>
系统头文件，存储一些C语言的头文件 <code>/usr/src</code>
Linux内核源代码，Linux系统所安装的内核源代码都保存在此
<code>/usr/bin</code> 对/bin目录的一些补充 <code>/usr/sbin</code>
对/sbin目录的一些补充 <code>/lost+found</code>
这个目录在大多数情况下都是空的。但是如果你正在工作突然停电，或是没有用正常方式关机，在你重新启动机器的时候，有些文件就会找不到应该存放的地方，对于这些文件，系统将他们放在这个目录下。</p></li>
<li><p>什么 linux 的分区需要有挂载这个动作呢 因为 linux
下一切皆文件！换句说法就是 linux
操作系统将系统中的一切都作为文件来管理。在 windows
中我们常见的硬件设备（打印机、网卡、声卡...）、磁盘分区等，在 linux
中统统都被视作文件，对设备、分区的访问就是读写对应的文件。</p></li>
</ol>
<h1 id="挂载分区">挂载分区</h1>
<ol type="1">
<li><p>临时挂载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mount /dev/sda3 /data   <span class="comment"># sda3分区挂载在data目录下</span></span><br><span class="line">$ umount /data            <span class="comment"># 卸载data目录下分区</span></span><br></pre></td></tr></table></figure></li>
<li><p>开机自动挂载：</p>
<p>需要修改 <code>/etc/fstab</code></p>
<blockquote>
<p>fstab 是文件系统分配表的配置文件，该文件有着严格的语法格式限制，类似
crontab
一样，保存时也会对你的输入格式进行校验，请慎重使用，否则会有意想不到的问题发生。其一共有
6 个字段，空格分隔。</p>
</blockquote>
<p><strong>Sample:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UUID=8CBA-F92C /samba/users exfat         defaults     0          1</span><br><span class="line">&lt;fs spec&gt;      &lt;fs file&gt;    &lt;fs vfstype&gt;  &lt;fs mntops&gt;  &lt;fs freq&gt;  &lt;fs passno&gt;</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong>
<code>&lt;fs spec&gt;</code>：分区定位，可以给 UUID 或
LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software，建议不要用
<code>/dev/sda1</code> 这种格式，重新启动可能会导致磁盘顺序变化
<code>&lt;fs file&gt;</code>：具体挂载点的位置，例如：<code>/samba/users</code>，必须是一个<strong>已经存在的目录</strong>，挂载后不会影响原先目录下的文件，卸载该分区后可以看到原先目录下的文件没有变化
<code>&lt;fs vfstype&gt;</code>：挂载磁盘类型，linux 分区一般为
ext4，windows 分区一般为 ntfs
<code>&lt;fs mntops&gt;</code>：挂载参数，一般为 defaults
<code>&lt;fs freq&gt;</code>：磁盘检查，默认为0。能否被 dump
备份指令作用：在 Linux 当中，可以利用 dump
这个指令来进行系统的备份的。而 dump 指令则会针对 /etc/fstab
的设定值，去选择是否要将该 partition 进行备份的动作呢！ 0 代表不要做
dump 备份， 1 代表要进行 dump 的动作。 2 也代表要做 dump 备份动作，
不过，该 partition 重要度比 1 小。
<code>&lt;fs passno&gt;</code>：磁盘检查，默认为0，不需要检查。是否以
fsck 检验扇区：开机的过程中，系统预设会以 fsck 检验我们的 partition 内的
filesystem 是否完整 (clean)。 不过，某些 filesystem
是不需要检验的，例如虚拟内存 swap ，或者是特殊档案系统， 例如 /proc 与
/sys 等等。所以，在这个字段中，我们可以设定是否要以 fsck 检验该
filesystem 喔。 0 是不要检验， 1 是要检验， 2 也是要检验，不过 1
会比较早被检验啦！ 一般来说，根目录设定为 1 ，其它的要检验的 filesystem
都设定为 2 就好了。</p>
<p><strong>检查：</strong></p>
<p>修改完 <code>/etc/fstab</code>
文件后，运行以下命令检查配置是否正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -a</span><br></pre></td></tr></table></figure>
<p>如果配置不正确可能会导致系统无法正常启动。</p></li>
<li><p>常用命令：</p>
<ul>
<li><p>查看硬盘信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> fdisk -l</span><br></pre></td></tr></table></figure></li>
<li><p>查看磁盘分区的 UUID：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> blkid</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ol>
<h1 id="自动挂载-smb">自动挂载 smb</h1>
<blockquote>
<p>ref：https://gythialy.github.io/How-to-Mount-a-SMB-Share-in-Ubuntu/</p>
</blockquote>
<h2 id="临时挂载">临时挂载</h2>
<ol type="1">
<li><p>安装 cifs-utils</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install cifs-utils</span><br></pre></td></tr></table></figure></li>
<li><p>挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -t cifs //xx.xx.xx.x/share /mnt -o username=xx,password=xx,vers=1.0</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="开机自动挂载">开机自动挂载</h2>
<ol type="1">
<li><p>创建一个挂载点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /mnt/local_share</span><br></pre></td></tr></table></figure></li>
<li><p>创建文件保存 <em>~/.smbcredentials</em> 来保存 SMB
用户名和密码</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">username</span><span class="operator">=</span>smb_share</span><br><span class="line"><span class="attribute">password</span><span class="operator">=</span>share_password</span><br></pre></td></tr></table></figure></li>
<li><p>在 <em>/etc/fstab</em> 最后添加配置实现自动挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/fstab</span></span><br><span class="line"><span class="meta prompt_">/$</span><span class="language-bash">smb_server/share /mnt/local_share cifs credentials=/home/<span class="variable">$user</span>/.smbcredentials,uid=1000,gid=1000,iocharset=utf8 0 0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>PS：<code>$smb_server</code> 为 SMB 服务器地址，<code>$user</code>
为当前用户名，<code>uid/gid</code> 为当前用户的 <code>uid</code> 和
<code>gid</code>，可以通过 <code>id $(whoami)</code> 查看</p>
</blockquote></li>
<li><p>通过 <code>mount -a</code> 命令检查 fstab
文件是否有错，如果错误可能会导致无法开机。</p></li>
</ol>
<h1 id="挂载-nfs">挂载 NFS</h1>
<p>首先需要安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nfs-common</span><br></pre></td></tr></table></figure>
<h2 id="临时挂载-1">临时挂载</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /nfs/general</span><br><span class="line"><span class="built_in">sudo</span> mount nfs_ip:/var/nfs/general /nfs/general</span><br></pre></td></tr></table></figure>
<h2 id="开机自动挂载-1">开机自动挂载</h2>
<p>编辑 <em>/etc/fstab</em>，在最后添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nfs_ip:/var/nfs/general /nfs/general nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0</span><br></pre></td></tr></table></figure>
<p>然后通过 <code>mount -a</code> 命令检查 fstab
文件是否有错，如果错误可能会导致无法开机。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC开发问题记录</title>
    <url>/2020/03/04/MAC%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="opencv-python">opencv-python</h1>
<ul>
<li><p>问题描述</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">QFactoryLoader::QFactoryLoader() checking <span class="built_in">directory</span> path <span class="string">&quot;/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/Resources/Python.app/Contents/MacOS/platforms&quot;</span> ...</span><br><span class="line">qt.qpa.plugin: Could <span class="keyword">not</span> find <span class="keyword">the</span> Qt <span class="built_in">platform</span> plugin <span class="string">&quot;cocoa&quot;</span> <span class="keyword">in</span> <span class="string">&quot;&quot;</span></span><br><span class="line">This application failed <span class="built_in">to</span> <span class="built_in">start</span> because no Qt <span class="built_in">platform</span> plugin could be initialized. Reinstalling <span class="keyword">the</span> application may fix this problem.</span><br></pre></td></tr></table></figure></li>
<li><p>解决方法</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">pip3 uninstall opencv-<span class="keyword">python</span></span><br><span class="line">pip3 install opencv-<span class="keyword">python</span>-headless</span><br></pre></td></tr></table></figure></li>
<li><p>原因</p>
<p><code>opencv-python-headless</code> ：与 <code>opencv-python</code>
相同但没有GUI功能。适用于无界面系统。</p></li>
</ul>
<h1 id="proxychains-ng">proxychains-ng</h1>
<ul>
<li><p>问题描述</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[proxychains] config <span class="keyword">file</span> found: <span class="regexp">/Users/</span>zhouyugan<span class="regexp">/.proxychains/</span>proxychains.conf</span><br><span class="line">[proxychains] preloading <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>proxychains-ng<span class="regexp">/4.14/</span>lib/libproxychains4.dylib</span><br><span class="line">[proxychains] DLL init: proxychains-ng <span class="number">4.14</span></span><br><span class="line">dyld: warning: could not load inserted library <span class="string">&#x27;/usr/local/Cellar/proxychains-ng/4.14/lib/libproxychains4.dylib&#x27;</span> <span class="keyword">into</span> hardened process because no suitable image found.  Did <span class="keyword">find</span>:</span><br><span class="line">    <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>proxychains-ng<span class="regexp">/4.14/</span>lib<span class="regexp">/libproxychains4.dylib: code signature in (/u</span>sr<span class="regexp">/local/</span>Cellar<span class="regexp">/proxychains-ng/</span><span class="number">4.14</span><span class="regexp">/lib/</span>libproxychains4.dylib) not valid <span class="keyword">for</span> use in process using Library Validation: mapped <span class="keyword">file</span> has no cdhash, completely unsigned? Code has to be at least ad-hoc signed.</span><br><span class="line">    <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>proxychains-ng<span class="regexp">/4.14/</span>lib/libproxychains4.dylib: stat() failed with errno=<span class="number">1</span></span><br><span class="line">Cloning <span class="keyword">into</span> <span class="string">&#x27;themes/next-reloaded&#x27;</span>...</span><br><span class="line">dyld: warning: could not load inserted library <span class="string">&#x27;/usr/local/Cellar/proxychains-ng/4.14/lib/libproxychains4.dylib&#x27;</span> <span class="keyword">into</span> hardened process because no suitable image found.  Did <span class="keyword">find</span>:</span><br><span class="line">    <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>proxychains-ng<span class="regexp">/4.14/</span>lib<span class="regexp">/libproxychains4.dylib: code signature in (/u</span>sr<span class="regexp">/local/</span>Cellar<span class="regexp">/proxychains-ng/</span><span class="number">4.14</span><span class="regexp">/lib/</span>libproxychains4.dylib) not valid <span class="keyword">for</span> use in process using Library Validation: mapped <span class="keyword">file</span> has no cdhash, completely unsigned? Code has to be at least ad-hoc signed.</span><br><span class="line">    <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>proxychains-ng<span class="regexp">/4.14/</span>lib/libproxychains4.dylib: stat() failed with errno=<span class="number">1</span></span><br><span class="line">^C</span><br></pre></td></tr></table></figure></li>
<li><p>解决方案</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">export PATH=<span class="regexp">/usr/</span>local<span class="regexp">/bin:/u</span>sr<span class="regexp">/local/</span>bin:<span class="variable">$&#123;PATH&#125;</span></span><br></pre></td></tr></table></figure>
<p>查看一下使用的是哪个版本的 git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> git</span><br><span class="line">/usr/local/bin/git</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>MIPS处理器学习报告</title>
    <url>/2018/12/19/MIPS%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<span id="more"></span>
<blockquote>
<p>未完成，占坑</p>
</blockquote>
<blockquote>
<p>参考《自己动手写CPU》</p>
</blockquote>
<h1 id="报告框架">报告框架</h1>
<h2 id="一-设计方案工作原理">一、 设计方案工作原理</h2>
<ol type="1">
<li><p>系统总体介绍</p>
<ol type="1">
<li>计算机的简单组成模型(P2)与计算机的简单实用模型(P3);</li>
<li>MIPS32指令集架构(P9);</li>
</ol></li>
<li><p>预期实现目标定位</p>
<p>本课设的目标是实现一款兼容MIPS32指令集架构的处理器，该处理器是通过硬件描述语言Verilog
HDL编写代码实现的，编写后的代码经过编译可以下载到FPGA芯片上，组成实际的硬件电路。</p>
<p>目标：五级流水线、 ... (P50)</p>
<p>实现的指令集：(P11)</p></li>
<li><p>系统结构工作原理</p>
<p>(P56 图3-7)</p>
<p>将编译好的指令放入指令存储器，五级流水线在时钟的控制下完成取址、译码、执行、访存、回写这5个阶段，完成程序的执行。</p></li>
</ol>
<h2 id="二-核心部件设计">二、 核心部件设计</h2>
<ol type="1">
<li>五级流水线的整体架构，工作流程：(P50)(详细)</li>
<li>详细说明ori指令的实现过程：(P58)(详细)</li>
<li>最小SOPC的实现：(P87)</li>
<li>流水线数据相关问题：(P107,P135)</li>
<li>流水线暂停机制：(P174)</li>
<li>除法指令的实现：(P192)(详细)</li>
<li>转移指令与延迟槽：(P206)</li>
<li>协处理器CP0的功能与实现：(P287)</li>
<li>异常处理：(P316)(详细)</li>
</ol>
<h2 id="三-作品成效总结">三、 作品成效总结</h2>
<ol type="1">
<li>整体RTL图；</li>
<li>实现的指令集的仿真图；</li>
<li>异常处理的仿真；</li>
<li>下载到FPGA芯片里的运行情况；</li>
</ol>
<h2 id="四-参考资料及文献">四、 参考资料及文献</h2>
<h2 id="五-附件">五、 附件</h2>
]]></content>
      <categories>
        <category>MIPS32学习</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>MPIS32</tag>
        <tag>课程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab应用实践</title>
    <url>/2019/01/11/Matlab%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="实验一-基础练习">实验一 基础练习</h1>
<h2 id="练习1-基本操作和简单语句输入">练习1 基本操作和简单语句输入</h2>
<ol type="1">
<li><p>用函数sym定义符号矩阵：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; sym_matrix = sym(<span class="string">&#x27;[a b c;Jack Help_Me NO_WAY]&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">sym_matrix =</span><br><span class="line"> </span><br><span class="line">[    a,       b,      c]</span><br><span class="line">[ Jack, Help_Me, NO_WAY]</span><br></pre></td></tr></table></figure></li>
<li><p>用函数syms定义符号矩阵</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms a b c ;</span><br><span class="line">&gt;&gt; M1 = sym(<span class="string">&#x27;Classical&#x27;</span>);</span><br><span class="line">&gt;&gt; M2 = sym(<span class="string">&#x27; Jazz&#x27;</span>);</span><br><span class="line">&gt;&gt; M3 = sym(<span class="string">&#x27;Blues&#x27;</span>);</span><br><span class="line">&gt;&gt; A = [a b c;M1,M2,M3;sym([<span class="number">2</span> <span class="number">3</span> <span class="number">5</span>])]</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A =</span><br><span class="line"> </span><br><span class="line">[         a,    b,     c]</span><br><span class="line">[ Classical, Jazz, Blues]</span><br><span class="line">[         <span class="number">2</span>,    <span class="number">3</span>,     <span class="number">5</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>输入<code>A=[7 1 5;2 5 6;3 1 5],B=[1 1 1; 2 2 2; 3 3 3]</code>，在命令窗口中执行下列表达式，掌握其含义：<code>A(2, 3) A(:,2) A(3,:) A(:,1:2:3) A(:,3).*B(:,2) A(:,3)*B(2,:) A*B A.*B A^2 A.^2 B/A B./A</code></p>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">7</span> <span class="number">1</span> <span class="number">5</span>;<span class="number">2</span> <span class="number">5</span> <span class="number">6</span>;<span class="number">3</span> <span class="number">1</span> <span class="number">5</span>],B=[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>; <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>; <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">7</span>     <span class="number">1</span>     <span class="number">5</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">1</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">2</span>     <span class="number">2</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">3</span>     <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><code>A(2,3)</code>——输出矩阵A第二行第三列的值</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><code>A(:,2)</code>——输出矩阵A第二列的所有值</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A(:,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">5</span></span><br><span class="line">     <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>A(3,:)</code>——输出矩阵A第三行的所有值</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A(<span class="number">3</span>,:)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>     <span class="number">1</span>     <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><code>A(:,1:2:3)</code>—— 输出矩阵A的第一列和第三列的值</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A(:,<span class="number">1</span>:<span class="number">2</span>:<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">7</span>     <span class="number">5</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><code>A(:,3).*B(:,2)</code>——输出矩阵A的第三列与矩阵B的第二列的乘积</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A(:,<span class="number">3</span>).*B(:,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">5</span></span><br><span class="line">    <span class="number">12</span></span><br><span class="line">    <span class="number">15</span></span><br></pre></td></tr></table></figure>
<p><code>A(:,3).*B(2,:)</code>——输出矩阵A的第三列与矩阵B的第二行的乘积</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A(:,<span class="number">3</span>).*B(<span class="number">2</span>,:)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span></span><br><span class="line">    <span class="number">12</span>    <span class="number">12</span>    <span class="number">12</span></span><br><span class="line">    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p><code>A*B</code>——将矩阵A与矩阵B进行矩阵乘法运算</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A*B</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">24</span>    <span class="number">24</span>    <span class="number">24</span></span><br><span class="line">    <span class="number">30</span>    <span class="number">30</span>    <span class="number">30</span></span><br><span class="line">    <span class="number">20</span>    <span class="number">20</span>    <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p><code>A.*B</code>——将矩阵A与矩阵B中相同位置的元素相乘</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A.*B</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">7</span>     <span class="number">1</span>     <span class="number">5</span></span><br><span class="line">     <span class="number">4</span>    <span class="number">10</span>    <span class="number">12</span></span><br><span class="line">     <span class="number">9</span>     <span class="number">3</span>    <span class="number">15</span></span><br></pre></td></tr></table></figure>
<p><code>A^2</code>——将矩阵A与矩阵A进行矩阵乘法运算</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A^<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">66</span>    <span class="number">17</span>    <span class="number">66</span></span><br><span class="line">    <span class="number">42</span>    <span class="number">33</span>    <span class="number">70</span></span><br><span class="line">    <span class="number">38</span>    <span class="number">13</span>    <span class="number">46</span></span><br></pre></td></tr></table></figure>
<p><code>A.^2</code>——将矩阵A与矩阵A相对应位置的元素相乘</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A.^<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">49</span>     <span class="number">1</span>    <span class="number">25</span></span><br><span class="line">     <span class="number">4</span>    <span class="number">25</span>    <span class="number">36</span></span><br><span class="line">     <span class="number">9</span>     <span class="number">1</span>    <span class="number">25</span></span><br></pre></td></tr></table></figure>
<p><code>B/A</code>——矩阵B乘矩阵A的逆</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; B/A</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.1842</span>    <span class="number">0.2105</span>   <span class="number">-0.2368</span></span><br><span class="line">    <span class="number">0.3684</span>    <span class="number">0.4211</span>   <span class="number">-0.4737</span></span><br><span class="line">    <span class="number">0.5526</span>    <span class="number">0.6316</span>   <span class="number">-0.7105</span></span><br></pre></td></tr></table></figure>
<p><code>B./A</code>——矩阵B与矩阵A相对应的元素相除</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; B./A</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.1429</span>    <span class="number">1.0000</span>    <span class="number">0.2000</span></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">0.4000</span>    <span class="number">0.3333</span></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">3.0000</span>    <span class="number">0.6000</span></span><br></pre></td></tr></table></figure></li>
<li><p>输入<code>C=1:2:20</code>，则<code>C(i)</code>表示什么？其中<code>i=1,2,3,…,10</code>；</p>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; C=<span class="number">1</span>:<span class="number">2</span>:<span class="number">20</span></span><br><span class="line"></span><br><span class="line">C =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">3</span>     <span class="number">5</span>     <span class="number">7</span>     <span class="number">9</span>    <span class="number">11</span>    <span class="number">13</span>    <span class="number">15</span>    <span class="number">17</span>    <span class="number">19</span></span><br></pre></td></tr></table></figure>
<p><code>C(i)</code>表示第i位的数据</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; C(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; C(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">9</span></span><br></pre></td></tr></table></figure></li>
<li><p>查找已创建变量的信息，删除无用的变量</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">7</span>     <span class="number">1</span>     <span class="number">5</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">1</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; clear A</span><br><span class="line">&gt;&gt; A</span><br><span class="line">未定义函数或变量 <span class="string">&#x27;A&#x27;</span>。</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="练习2-编程">练习2 编程</h2>
<ol type="1">
<li><p>编写程序,计算1+3+5+7+…+(2n+1)的值(用input 语句输入n 值)</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">n = input(<span class="string">&#x27;input n = &#x27;</span>);</span><br><span class="line">sum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    sum = sum + (<span class="number">2</span>*<span class="built_in">i</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;sum = &#x27;</span> num2str(sum)]);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">input n = <span class="number">10</span></span><br><span class="line">sum = <span class="number">121</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写分段函数$y = {</p>
<span class="math display">\[\begin{array}{ll}
x &amp; \textrm{$0 \leq x&lt;1$}\\
2-x &amp; \textrm{$1 \leq x \leq 2$}\\
0 &amp; \textrm{其他}
\end{array}\]</span>
<p>.<span class="math inline">\(的函数文件，存放于文件ff.m中，计算出\)</span>f(-3)<span class="math inline">\(、\)</span>f()<span class="math inline">\(、\)</span>f()$的值。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = input(<span class="string">&#x27;x = &#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;<span class="number">1</span>)</span><br><span class="line">    fx = x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= <span class="number">2</span>)</span><br><span class="line">        fx = <span class="number">2</span> - x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        fx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;f(x) = &#x27;</span>, num2str(fx)]);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0.5</span></span><br><span class="line">f(x) = <span class="number">0.5</span></span><br><span class="line">x = <span class="number">1.5</span></span><br><span class="line">f(x) = <span class="number">0.5</span></span><br><span class="line">x = <span class="number">-2</span></span><br><span class="line">f(x) = <span class="number">0</span></span><br><span class="line">x = <span class="number">3</span></span><br><span class="line">f(x) = <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="练习3-矩阵计算">练习3 矩阵计算</h2>
<ol type="1">
<li><p>加、减运算</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">A=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>];</span><br><span class="line">B=[<span class="number">8</span>, <span class="number">1</span>, <span class="number">6</span>; <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>; <span class="number">4</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line">X=A+B;</span><br><span class="line">Y=A-B;</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;A+B = &#x27;</span>]);</span><br><span class="line"><span class="built_in">disp</span>(X);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;A-B = &#x27;</span>]);</span><br><span class="line"><span class="built_in">disp</span>(Y);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A+B = </span><br><span class="line">     <span class="number">9</span>     <span class="number">2</span>     <span class="number">7</span></span><br><span class="line">     <span class="number">4</span>     <span class="number">7</span>    <span class="number">10</span></span><br><span class="line">     <span class="number">5</span>    <span class="number">12</span>     <span class="number">8</span></span><br><span class="line"></span><br><span class="line">A-B = </span><br><span class="line">    <span class="number">-7</span>     <span class="number">0</span>    <span class="number">-5</span></span><br><span class="line">    <span class="number">-2</span>    <span class="number">-3</span>    <span class="number">-4</span></span><br><span class="line">    <span class="number">-3</span>    <span class="number">-6</span>     <span class="number">4</span></span><br></pre></td></tr></table></figure></li>
<li><p>乘法</p>
<ol type="1">
<li><p>两个矩阵相乘</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X= [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> </span><br><span class="line">    <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span>];</span><br><span class="line">Y=[<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line">   <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line">   <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line">   <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">Z = X*Y;</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;Z = &#x27;</span>]);</span><br><span class="line"><span class="built_in">disp</span>(Z);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Z = </span><br><span class="line">     <span class="number">8</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">3</span>     <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li><p>矩阵的数乘</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span>*X;</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;a = &#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(a);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = </span><br><span class="line">     <span class="number">4</span>     <span class="number">6</span>     <span class="number">8</span>    <span class="number">10</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">4</span>     <span class="number">4</span>     <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li><p>向量的点乘（内积）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X=[<span class="number">-1</span> <span class="number">0</span> <span class="number">2</span>]; Y=[<span class="number">-2</span> <span class="number">-1</span> <span class="number">1</span>];</span><br><span class="line">Z=<span class="built_in">dot</span>(X, Y)</span><br><span class="line"><span class="comment">% 或者</span></span><br><span class="line">sum(X.*Y)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Z =</span><br><span class="line"></span><br><span class="line">     <span class="number">4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">4</span></span><br></pre></td></tr></table></figure></li>
<li><p>向量叉乘</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>];</span><br><span class="line">b=[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>];</span><br><span class="line">c=<span class="built_in">cross</span>(a,b)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">c =</span><br><span class="line"></span><br><span class="line">    <span class="number">-3</span>     <span class="number">6</span>    <span class="number">-3</span></span><br></pre></td></tr></table></figure></li>
<li><p>混合积</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]; b=[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]; c=[<span class="number">-3</span> <span class="number">6</span> <span class="number">-3</span>];</span><br><span class="line">x=<span class="built_in">dot</span>(a, <span class="built_in">cross</span>(b, c))</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x =</span><br><span class="line"></span><br><span class="line">    <span class="number">54</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>矩阵的除法</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">2</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">4</span> <span class="number">9</span>];</span><br><span class="line">b=[<span class="number">4</span>; <span class="number">1</span>; <span class="number">2</span>];</span><br><span class="line">x=a\b</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x =</span><br><span class="line"></span><br><span class="line">   <span class="number">-1.5000</span></span><br><span class="line">    <span class="number">2.0000</span></span><br><span class="line">    <span class="number">0.5000</span></span><br></pre></td></tr></table></figure></li>
<li><p>矩阵乘方</p>
<ol type="1">
<li><p>A为方阵，p 为大于0 的整数时，A^P 表示A 的P 次方，即A 自乘P 次；p
为小于0 的整数时，A^P 表示A-1 的P 次方。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">2</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">4</span> <span class="number">9</span>];</span><br><span class="line">A^<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">30</span>    <span class="number">18</span>    <span class="number">42</span></span><br><span class="line">    <span class="number">54</span>    <span class="number">36</span>    <span class="number">78</span></span><br><span class="line">    <span class="number">86</span>    <span class="number">58</span>   <span class="number">126</span></span><br></pre></td></tr></table></figure></li>
<li><p>A 为方阵，p 为非整数时，则其中V 为A
的特征向量，为特征值矩阵。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">2</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">4</span> <span class="number">9</span>];</span><br><span class="line">A^<span class="number">0.5</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">-0.6094</span> - <span class="number">0.0000</span><span class="built_in">i</span>   <span class="number">2.4744</span> + <span class="number">0.0000</span><span class="built_in">i</span>  <span class="number">-0.1031</span> - <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">0.3712</span> - <span class="number">0.0000</span><span class="built_in">i</span>   <span class="number">1.3908</span> + <span class="number">0.0000</span><span class="built_in">i</span>   <span class="number">1.3197</span> - <span class="number">0.0000</span><span class="built_in">i</span></span><br><span class="line">   <span class="number">2.8112</span> - <span class="number">0.0000</span><span class="built_in">i</span>  <span class="number">-0.6461</span> + <span class="number">0.0000</span><span class="built_in">i</span>   <span class="number">3.1847</span> - <span class="number">0.0000</span><span class="built_in">i</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>矩阵的转置</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">2</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">4</span> <span class="number">9</span>];</span><br><span class="line">A&#x27;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">4</span>     <span class="number">7</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">2</span>     <span class="number">4</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span></span><br></pre></td></tr></table></figure></li>
<li><p>矩阵的逆矩阵</p>
<ol type="1">
<li><p>方法一</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">2</span> <span class="number">2</span> <span class="number">1</span>; <span class="number">3</span> <span class="number">4</span> <span class="number">3</span>];</span><br><span class="line">inv(A)</span><br><span class="line"><span class="comment">%或 A^(-1)</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">3.0000</span>   <span class="number">-2.0000</span></span><br><span class="line">   <span class="number">-1.5000</span>   <span class="number">-3.0000</span>    <span class="number">2.5000</span></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">1.0000</span>   <span class="number">-1.0000</span></span><br></pre></td></tr></table></figure></li>
<li><p>方法二</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">B=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>; <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>; <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">C=rref(B); <span class="comment">%化行最简形</span></span><br><span class="line">X=C(:, <span class="number">4</span>:<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">3.0000</span>   <span class="number">-2.0000</span></span><br><span class="line">   <span class="number">-1.5000</span>   <span class="number">-3.0000</span>    <span class="number">2.5000</span></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">1.0000</span>   <span class="number">-1.0000</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>方阵的行列式</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">2</span> <span class="number">2</span> <span class="number">1</span>; <span class="number">3</span> <span class="number">4</span> <span class="number">3</span>];</span><br><span class="line">D=det(A)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">D =</span><br><span class="line"></span><br><span class="line">    <span class="number">2.0000</span></span><br></pre></td></tr></table></figure></li>
<li><p>符号矩阵的四则运算</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=sym(<span class="string">&#x27;[1/x,1/(x+1);1/(x+2),1/(x+3)]&#x27;</span>);</span><br><span class="line">B=sym(<span class="string">&#x27;[x,1;x+2,0]&#x27;</span>);</span><br><span class="line">C=B-A</span><br><span class="line">D=A\B</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">C =</span><br><span class="line"> </span><br><span class="line">[           x - <span class="number">1</span>/x, <span class="number">1</span> - <span class="number">1</span>/(x + <span class="number">1</span>)]</span><br><span class="line">[ x - <span class="number">1</span>/(x + <span class="number">2</span>) + <span class="number">2</span>,    <span class="number">-1</span>/(x + <span class="number">3</span>)]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">D =</span><br><span class="line"> </span><br><span class="line">[ -x*(<span class="number">2</span>*x^<span class="number">2</span> + <span class="number">7</span>*x + <span class="number">6</span>),  (x*(x^<span class="number">2</span> + <span class="number">3</span>*x + <span class="number">2</span>))/<span class="number">2</span>]</span><br><span class="line">[  <span class="number">2</span>*(x + <span class="number">1</span>)^<span class="number">2</span>*(x + <span class="number">3</span>), -(x*(x + <span class="number">1</span>)*(x + <span class="number">3</span>))/<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>符号矩阵的简化</p>
<ol type="1">
<li><p>因式分解</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms x;</span><br><span class="line"><span class="built_in">factor</span>(x^<span class="number">9</span><span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> </span><br><span class="line">[ x - <span class="number">1</span>, x^<span class="number">2</span> + x + <span class="number">1</span>, x^<span class="number">6</span> + x^<span class="number">3</span> + <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>符号矩阵的展开</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms x y;</span><br><span class="line">p=expand((x+<span class="number">1</span>)^<span class="number">3</span>)</span><br><span class="line">q=expand(<span class="built_in">sin</span>(x+y))</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p =</span><br><span class="line"> </span><br><span class="line">x^<span class="number">3</span> + <span class="number">3</span>*x^<span class="number">2</span> + <span class="number">3</span>*x + <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">q =</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cos</span>(x)*<span class="built_in">sin</span>(y) + <span class="built_in">cos</span>(y)*<span class="built_in">sin</span>(x)</span><br></pre></td></tr></table></figure></li>
<li><p>同类式合并</p>
<p><code>Collect(s,v)</code>将<code>s</code>中的变量<code>v</code>的同幂项系数合并。</p></li>
<li><p>符号简化</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Simple(s);</span><br><span class="line">Pretty(s);</span><br></pre></td></tr></table></figure></li>
</ol></li>
</ol>
<h2 id="练习4-秩与线性相关性">练习4 秩与线性相关性</h2>
<ol type="1">
<li><p>矩阵和向量组的秩以及向量组的线性相关性</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span> <span class="number">-2</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">-2</span> <span class="number">4</span> <span class="number">-1</span> <span class="number">3</span>;<span class="number">-1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span>;<span class="number">0</span> <span class="number">6</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">2</span> <span class="number">-6</span> <span class="number">3</span> <span class="number">4</span>];</span><br><span class="line">B=rank(A)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">B =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>由于秩为3 &lt; 向量个数，因此向量组线性相关。</p></li>
<li><p>向量组的最大无关组</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a1=[<span class="number">1</span> <span class="number">-2</span> <span class="number">2</span> <span class="number">3</span>]&#x27;;</span><br><span class="line">a2=[<span class="number">-2</span> <span class="number">4</span> <span class="number">-1</span> <span class="number">3</span>]&#x27;;</span><br><span class="line">a3=[<span class="number">-1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span>]&#x27;;</span><br><span class="line">a4=[<span class="number">0</span> <span class="number">6</span> <span class="number">2</span> <span class="number">3</span>]&#x27;;</span><br><span class="line">a5=[<span class="number">2</span> <span class="number">-6</span> <span class="number">3</span> <span class="number">4</span>]&#x27;;</span><br><span class="line">A=[a1 a2 a3 a4 a5]</span><br><span class="line">format <span class="built_in">rat</span> <span class="comment">%以有理格式输出</span></span><br><span class="line">B=rref(A) <span class="comment">%求A的行最简形</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>    <span class="number">-2</span>    <span class="number">-1</span>     <span class="number">0</span>     <span class="number">2</span></span><br><span class="line">    <span class="number">-2</span>     <span class="number">4</span>     <span class="number">2</span>     <span class="number">6</span>    <span class="number">-6</span></span><br><span class="line">     <span class="number">2</span>    <span class="number">-1</span>     <span class="number">0</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">3</span>     <span class="number">3</span>     <span class="number">3</span>     <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">0</span>              <span class="number">1</span>/<span class="number">3</span>            <span class="number">0</span>             <span class="number">16</span>/<span class="number">9</span>     </span><br><span class="line">       <span class="number">0</span>              <span class="number">1</span>              <span class="number">2</span>/<span class="number">3</span>            <span class="number">0</span>             <span class="number">-1</span>/<span class="number">9</span>     </span><br><span class="line">       <span class="number">0</span>              <span class="number">0</span>              <span class="number">0</span>              <span class="number">1</span>             <span class="number">-1</span>/<span class="number">3</span>     </span><br><span class="line">       <span class="number">0</span>              <span class="number">0</span>              <span class="number">0</span>              <span class="number">0</span>              <span class="number">0</span>  </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="练习5-线性方程的组的求解">练习5 线性方程的组的求解</h2>
<ol type="1">
<li><p>利用矩阵除法求线性方程组的特解（或一个解） <span class="math display">\[
\left\{ \begin{array}{ll}
5x_1 + &amp; 6x_2 &amp; &amp; &amp; &amp; = &amp; 1\\
x_1  + &amp; 5x_2 + &amp; 6x_3   &amp;      &amp;    &amp; = &amp; 0\\
       &amp; x_2  + &amp; 5x_3 + &amp; 6x_4 &amp;    &amp; = &amp; 0\\
       &amp;        &amp; x_3  + &amp; 5x_4 + &amp; 6x_5 &amp; = &amp;
0\\
       &amp;        &amp;        &amp; x_4  + &amp; 5x_5 &amp; = &amp; 1
\end{array} \right.
\]</span></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">5</span> <span class="number">6</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">0</span></span><br><span class="line">   <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">   <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span>];</span><br><span class="line">B=[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]&#x27;;</span><br><span class="line">R_A=rank(A) <span class="comment">%求秩</span></span><br><span class="line">X=A\B <span class="comment">%求解</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">R_A =</span><br><span class="line"></span><br><span class="line">       <span class="number">5</span>       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X =</span><br><span class="line"></span><br><span class="line">    <span class="number">1507</span>/<span class="number">665</span>   </span><br><span class="line">    <span class="number">-229</span>/<span class="number">133</span>   </span><br><span class="line">      <span class="number">37</span>/<span class="number">35</span>    </span><br><span class="line">     <span class="number">-79</span>/<span class="number">133</span>   </span><br><span class="line">     <span class="number">212</span>/<span class="number">665</span>   </span><br></pre></td></tr></table></figure>
<p>这就是方程的解。</p></li>
<li><p>求方程组的解： <span class="math display">\[
\left\{ \begin{array}{ll}
x_1 +  &amp; x_2 -  &amp; 3x_3 - &amp; x_4  &amp; = &amp; 1\\
3x_1 - &amp; x_2 -  &amp; 3x_3 + &amp; 4x_4 &amp; = &amp; 4\\
x_1 +  &amp; 5x_2 - &amp; 9x_3 - &amp; 8x_4 &amp; = &amp; 0
\end{array} \right.
\]</span></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span> <span class="number">1</span> <span class="number">-3</span> <span class="number">-1</span>;<span class="number">3</span> <span class="number">-1</span> <span class="number">-3</span> <span class="number">4</span>;<span class="number">1</span> <span class="number">5</span> <span class="number">-9</span> <span class="number">-8</span>];</span><br><span class="line">B=[<span class="number">1</span> <span class="number">4</span> <span class="number">0</span>]&#x27;;</span><br><span class="line">X=A\B</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X =</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>       </span><br><span class="line">       <span class="number">0</span>       </span><br><span class="line">      <span class="number">-8</span>/<span class="number">15</span>    </span><br><span class="line">       <span class="number">3</span>/<span class="number">5</span>    </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="实验二离散时间信号分析">实验二离散时间信号分析</h1>
]]></content>
      <categories>
        <category>课设</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
        <tag>数字信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>二级运放设计</title>
    <url>/2021/03/17/OTA/</url>
    <content><![CDATA[<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183531.png" alt="电路结构">
<figcaption aria-hidden="true">电路结构</figcaption>
</figure>
<p>最基本的 CMOS
二级密勒补偿运算跨导放大器结构如图所示，主要包括四个部分：第一级输入级放大电路、第二级放大电路、偏置电路和相位补偿电路。</p>
<span id="more"></span>
<h1 id="电路分析">电路分析</h1>
<p>输入级电路由 M1~M5 组成；</p>
<p>输出级电路由 M6、M7 组成，M6 为共源放大器，M7
为其提供恒定的偏置电流，同时作为第二级输出负载。相位补偿电路由 M14 和 Cc
构成，M14 工作在线性区，可等效为一个电阻，与电容 Cc
一起跨接在第一级和第二级输出之间，构成 RC 密勒补偿。</p>
<h2 id="静态特性">静态特性</h2>
<p>不考虑 M14，电路的等效模型如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727183651.png" alt="image-20210319101141088" style="zoom:50%;"></p>
<p>第一级和第二级都是跨导放大器，M1 和 M2 相同，则第一级的跨导为： <span class="math display">\[
G_{m1} = g_{m1}=g_{m2}
\]</span></p>
<p>第一级的输出电阻为： <span class="math display">\[
R_1 = r_{o2} || r_{o4}
\]</span> 则第一级的增益为： <span class="math display">\[
A_1 = G_{m1}R_1 = g_{m2}(r_{o2} || r_{o4})
\]</span> 对于第二级，M6、M7 为共源放大器，则： <span class="math display">\[
G_{m2} = g_{m6}=\frac{2I_{DS6}}{V_{GST6}}
\]</span></p>
<p><span class="math display">\[
R_2 = r_{o6}||r_{o7}
\]</span></p>
<p>其中 <span class="math inline">\(V_{GST6} = V_{GS6} -
V_{TH6}\)</span>。</p>
<p>则第二级的电压增益为： <span class="math display">\[
A_2 = -G_{m2}R_2 = -g_{m6}(r_{o6}||r_{o7})
\]</span> 故总的直流开环电压增益为： <span class="math display">\[
A_0 = A_1A_2=-g_{m2}g_{m6}(r_{o2} || r_{o4})(r_{o6}||r_{o7})
\]</span>
<strong>为了得到较高的增益，应当选取较小的过驱动电压和较大的沟道长度。</strong></p>
<h2 id="频率特性">频率特性</h2>
<p>在等效电路图中，第一级的输出节点的电容 <span class="math inline">\(C_1\)</span> 为： <span class="math display">\[
C_1 = C_{GD2} + C_{DB2} + C_{GD4} + C_{DB4} + C_{GS6}
\]</span> 第二级的输出节点的电容 <span class="math inline">\(C_2\)</span> 为： <span class="math display">\[
C_2 = C_{DB6} + C_{DB7} + C_{GD7} + C_{L}
\]</span> 一般，<span class="math inline">\(C_L\)</span>
远大于晶体管电容，所以 <span class="math inline">\(C_2\)</span> 远大于
<span class="math inline">\(C_1\)</span>，对节点 3 和节点 5 运用
KCL，得： <span class="math display">\[
G_{m1}V_{id}+\frac{V_{i2}}{R_1}+sC_1V_{i2}+sC_c(V_{i2}-V_o) = 0
\]</span></p>
<p><span class="math display">\[
G_{m2}V_{i2}+\frac{V_{o}}{R_2}+sC_2V_{o}+sC_c(V_{o}-V_{12}) = 0
\]</span></p>
<p>联立上面两式，消去中间量 <span class="math inline">\(V_{i2}\)</span>
得到电路的<strong>传输函数</strong>： <span class="math display">\[
\frac{V_o}{V_{id}} = \frac{G_{m1}(G_{m2}-sC_c)R_1R_2}{as^2+bs+1}
\]</span> 其中 <span class="math inline">\(a=[C_1C_2+C_c(C_1+C_2)]R_1R_2
\\ b=C_1R_1+C_2R_2+C_c(G_{m2}R_1R_2+R_1+R_2)\)</span></p>
<p>由传输函数的分子可以得到一个位于<strong>右半平面的零点</strong>：
<span class="math display">\[
f_z = \frac{G_{m2}}{2\pi C_c}=\frac{g_{m6}}{2\pi C_c}
\]</span> 分析传输函数的分母，对于 <span class="math inline">\(as^2+bs+c=0\)</span>
的方程，如果有两个相距很远的实根，则 <span class="math inline">\(s_1\approx -c/b, s_2\approx
-b/a\)</span>。由此得到： <span class="math display">\[
s_1 = -\frac{1}{C_1R_1+C_2R_2+C_c(G_{m2}R_1R_2+R_1+R_2)}
\]</span></p>
<p><span class="math display">\[
s_2 =
-\frac{C_1R_1+C_2R_2+C_c(G_{m2}R_1R_2+R_1+R_2)}{[C_1C_2+C_c(C_1+C_2)]R_1R_2}
\]</span></p>
<p>从而得电路<strong>主极点</strong>为： <span class="math display">\[
f_d = \frac{s_1}{2\pi}=\frac{1}{2\pi R_1 [C_1+C_c(1+G_{m2}R_2)]}
\]</span> 通常 <span class="math inline">\(C_1\)</span> 远小于 <span class="math inline">\(C_c\)</span>，且 <span class="math inline">\(G_{m2}R_2\)</span> 远大于 1，上式可以近似为：
<span class="math display">\[
f_d = \frac{1}{2\pi R_1R_2G_{m2}C_c}
\]</span> 而次极点为： <span class="math display">\[
f_{nd} =\frac{s_2}{2\pi}=\frac{G_{m2}C_c}{2\pi (C_1C_2 + C_1C_c+C_2C_c)}
\]</span> 单位增益带宽： <span class="math display">\[
GBW = A_0f_d= G_{m1}G_{m2}R_1R_2 \times \frac{1}{2\pi R_1R_2G_{m2}C_c} =
\frac{g_{m2}}{2\pi C_c}
\]</span> 由 <span class="math inline">\(g_m = \mu C_{ox} (W/L)
(V_{GS}-VT)\)</span> 得： <span class="math display">\[
GBW = \frac{1}{2\pi C_c}\mu_p C_{ox}(\frac{W}{L})_2V_{GST2}
\]</span> <strong>得到高的 GBW 就需要增大 M1 和 M2
管的过驱动电压或者减小其沟道长度</strong>，<strong>这与提高增益的要求是相互抵触的，而且管子面积的减小也会使得噪声性能变差</strong>，所以在设计电路的时候，需要根据具体应用和设计指标进行权衡。</p>
<p>GBW 也可以写成电流有关的形式 ( <span class="math inline">\(g_m = \mu
C_{ox} (W/L) (V_{GS}-VT) = 2I_D/V_{GST}\)</span> )： <span class="math display">\[
GBW = \frac{I_{DS2}}{\pi C_c V_{GST1}}
\]</span>
上式说明，在选定了补偿电容和过驱动电压时，<strong>电路的单位增益带宽与功耗成正比</strong>。而电路设计时一般会对功耗有限制，由此为了得到高的
GBW，需要合理分配各支路的电流。</p>
<p>第二极点可以近似为： <span class="math display">\[
f_{nd} = \frac{g_{m6}}{2\pi C_L}
\]</span> 一般而言，出于电路稳定的需要，<strong>为了达到 45°
的相位裕量，第二极点必须在 1.22GBW 之外，而若要有 60°
相位裕量的话，第二极点必须高于 2.2GWB</strong>。</p>
<h2 id="相位补偿">相位补偿</h2>
<p><span class="math display">\[
\frac{1}{R_zC_c}\approx1.2\frac{g_{m1}}{C_c}
\]</span></p>
<p>即： <span class="math display">\[
g_{m1}R_z\approx\frac{1}{1.2}
\]</span> 若令 <span class="math inline">\(V_{GST1}=V_{GST14}\)</span>，则： <span class="math display">\[
\frac{(W/L)_{14}}{(W/L)_{1}} \approx1.2\frac{\mu _p}{\mu _n}
\]</span></p>
<h2 id="偏置电路">偏置电路</h2>
<p>偏置电路由 M8~M13 构成。</p>
<p>镜像电流源 M8 和 M9 使得 M13 和 M12 的电流相等，都为 <span class="math inline">\(I_B\)</span>，则： <span class="math display">\[
I_B = \frac{1}{2}\mu C_{ox}(\frac{W}{L})_{12}(V_{GS12}-V_T)^2 =
\frac{1}{2}\mu C_{ox}(\frac{W}{L})_{13}(V_{GS13}-V_T)^2
\]</span> 而： <span class="math display">\[
V_{GS13} = V_{GS12}+I_BR_B
\]</span> 由上面两式可以得到： <span class="math display">\[
I_B = \frac{2}{\mu
C_{ox}(W/L)_{12}R_B^2}(\sqrt{\frac{(W/L)_{12}}{(W/L)_{13}}}-1)^2
\]</span> 可以看到 <span class="math inline">\(I_B\)</span> 仅与电阻
<span class="math inline">\(R_B\)</span> 和 M12、M13
的尺寸有关，不受电源电压的影响。 <span class="math display">\[
R_B = \frac{2}{\sqrt{2\mu
C_{ox}(W/L)_{12}I_B}}(\sqrt{\frac{(W/L)_{12}}{(W/L)_{13}}}-1)
\]</span> 由 <span class="math inline">\(\sqrt{2\mu C_{ox}(W/L)_{12}I_B}
= g_{m12}\)</span> 以及上式可以得到： <span class="math display">\[
g_{m12}=\frac{2}{R_B}(\sqrt{\frac{(W/L)_{12}}{(W/L)_{13}}}-1)^2
\]</span> 可以看出，<span class="math inline">\(gm_{12}\)</span> 仅由
<span class="math inline">\(R_B\)</span> 以及 M12 与 M13
的器件比例而决定。若取 <span class="math inline">\((W/L)_{12}＝4
(W/L)_{13}\)</span> 则可以得到： <span class="math display">\[
g_{m12} = \frac{2}{R_B}
\]</span></p>
<p><span class="math display">\[
g_{m13} = \frac{1}{R_B}
\]</span></p>
<h1 id="指标分析"><del>指标分析</del></h1>
<h1 id="电路设计">电路设计</h1>
<h2 id="设计指标">设计指标</h2>
<table>
<thead>
<tr>
<th>设计指标</th>
<th>带宽最大化</th>
</tr>
</thead>
<tbody>
<tr>
<td>管子长度</td>
<td><span class="math inline">\(\geq 0.8 \mu m\)</span></td>
</tr>
<tr>
<td>管子宽度</td>
<td><span class="math inline">\(\geq 2\mu m\)</span></td>
</tr>
<tr>
<td>面积</td>
<td><span class="math inline">\(\leq 20000 \mu m^2\)</span></td>
</tr>
<tr>
<td>负载电容</td>
<td><span class="math inline">\(=3pF\)</span></td>
</tr>
<tr>
<td>共模输入电压</td>
<td>固定在 (VDD+VSS)/2</td>
</tr>
<tr>
<td>输出动态范围</td>
<td>[0.1(VDD-VSS), 0.9(VDD-VSS)]</td>
</tr>
<tr>
<td>静态功耗</td>
<td><span class="math inline">\(\leq 2mW\)</span></td>
</tr>
<tr>
<td>开环直流增益</td>
<td><span class="math inline">\(\geq 80dB\)</span></td>
</tr>
<tr>
<td>单位增益带宽</td>
<td>Maximize</td>
</tr>
<tr>
<td>相位裕度</td>
<td><span class="math inline">\(\geq 60 degree\)</span></td>
</tr>
<tr>
<td>转换速率</td>
<td><span class="math inline">\(\geq 30V/\mu s\)</span></td>
</tr>
<tr>
<td>共模抑制比</td>
<td><span class="math inline">\(\geq 60dB\)</span></td>
</tr>
<tr>
<td>负电源抑制比</td>
<td><span class="math inline">\(\geq 80dB\)</span></td>
</tr>
<tr>
<td>等效输入噪声</td>
<td><span class="math inline">\(\leq 300nV/Hz@1KHz\)</span></td>
</tr>
</tbody>
</table>
<h2 id="约束">约束</h2>
<p><span class="math display">\[
W_1 = W_2,L_1=L_2;W_3=W_4,L_3=L_4
\]</span></p>
<p><span class="math display">\[
\frac{(W/L)_{3,4}}{(W/L)_{6}} = \frac{\frac{1}{2}(W/L)_{5}}{(W/L)_{7}}
\]</span></p>
<p><span class="math display">\[
(W/L)_{8}=(W/L)_{9},(W/L)_{10}=(W/L)_{11}
\]</span></p>
<p><span class="math display">\[
(W/L)_{12}=4(W/L)_{13}
\]</span></p>
<p><span class="math display">\[
(k_1+k_2+2)I_{DS8}\leq 400\mu A
\]</span></p>
<h2 id="单管匹配">单管匹配</h2>
<p>当晶体管工作在饱和区时，实际上的设计参数只有 <span class="math inline">\((W/L),I_{DS},V_{DSAT}\)</span>，确定了这三个变量中的两个就可以决定第三个量。在本设计中，确定晶体管的电流和过驱动电压就可以得到需要的宽长比。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183532.png" alt="cm">
<figcaption aria-hidden="true">cm</figcaption>
</figure>
<p>如上图所示，首先单独搭建电流镜部分。</p>
<p>当 <span class="math inline">\(I_{DS} = 10\mu A\)</span> 时，扫描
W，得到在不同 <span class="math inline">\(W/L\)</span> 下 <span class="math inline">\(V_{DSAT}\)</span> 的值。</p>
<p><strong>PMOS</strong></p>
<table>
<thead>
<tr>
<th><span class="math inline">\(V_{DSAT}\)</span></th>
<th><span class="math inline">\(W/L\)</span></th>
</tr>
</thead>
<tbody>
<tr>
<td>100m</td>
<td>35</td>
</tr>
<tr>
<td>125m</td>
<td>20</td>
</tr>
<tr>
<td>150m</td>
<td>13</td>
</tr>
<tr>
<td>175m</td>
<td>9</td>
</tr>
<tr>
<td>200m</td>
<td>7</td>
</tr>
<tr>
<td>250m</td>
<td>4</td>
</tr>
<tr>
<td>300m</td>
<td>3</td>
</tr>
</tbody>
</table>
<p><strong>NMOS</strong></p>
<table>
<thead>
<tr>
<th><span class="math inline">\(V_{DSAT}\)</span></th>
<th><span class="math inline">\(W/L\)</span></th>
</tr>
</thead>
<tbody>
<tr>
<td>100m</td>
<td>8.9</td>
</tr>
<tr>
<td>125m</td>
<td>4.8</td>
</tr>
<tr>
<td>150m</td>
<td>3</td>
</tr>
<tr>
<td>175m</td>
<td>2.1</td>
</tr>
<tr>
<td>250m</td>
<td>1</td>
</tr>
<tr>
<td>200m</td>
<td>1.6</td>
</tr>
</tbody>
</table>
<p>可以看到在相同的过驱动电压下，<span class="math inline">\((W/L)_p/(W/L)_n \approx
13/3\)</span>，为了保证良好的匹配性，所有位于饱和区的晶体管取相同的过驱动电压。</p>
<h2 id="设计步骤">设计步骤</h2>
<ol type="1">
<li><p>先取 <span class="math inline">\(C_c\)</span> 为 1pF；</p></li>
<li><p>取 <span class="math inline">\(V_{DSAT} =
150mV\)</span>；</p></li>
<li><p>取 <span class="math inline">\(I_{DS8} = 10 \mu A, I_{DS5}=120\mu
A, I_{DS7} = 240\mu A\)</span>；</p></li>
<li><p>确定晶体管参数，过驱动电压定为 150mV：</p>
<table>
<thead>
<tr>
<th>晶体管</th>
<th>倍数</th>
<th>W/L</th>
</tr>
</thead>
<tbody>
<tr>
<td>M13</td>
<td>1n</td>
<td>3/1</td>
</tr>
<tr>
<td>M12</td>
<td>4n</td>
<td>12/1</td>
</tr>
<tr>
<td>M10, M11</td>
<td>1n</td>
<td>3/11</td>
</tr>
<tr>
<td>M8, M9</td>
<td>1p</td>
<td>13/1</td>
</tr>
<tr>
<td>M5</td>
<td>12p</td>
<td>156/1</td>
</tr>
<tr>
<td>M1, M2</td>
<td>6p</td>
<td>78/1</td>
</tr>
<tr>
<td>M3, M4</td>
<td>6n</td>
<td>18/1</td>
</tr>
<tr>
<td>M7</td>
<td>24p</td>
<td>312/1</td>
</tr>
<tr>
<td>M6</td>
<td>24n</td>
<td>72/1</td>
</tr>
<tr>
<td>M14</td>
<td></td>
<td>10/1</td>
</tr>
</tbody>
</table></li>
</ol>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183533.png" alt="OTA">
<figcaption aria-hidden="true">OTA</figcaption>
</figure>
<h1 id="cadence-仿真">cadence 仿真</h1>
<h2 id="ac">AC</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183534.svg" alt="ac">
<figcaption aria-hidden="true">ac</figcaption>
</figure>
<p>通过 AC 仿真可以得到 GBW 大约为 113MHz，在单位带宽增益处，相移达到了
127°，表明相位裕度为 53°，不能满足大于 60° 的要求，因此调整米勒电容 Cc
为 1.5pF，再次仿真，得到GBW 为113MHz，相位裕度为 63°，满足要求。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183535.svg" alt="ac1.5p">
<figcaption aria-hidden="true">ac1.5p</figcaption>
</figure>
<h2 id="噪声仿真">噪声仿真</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727183604.png" alt="截屏2021-03-20 下午4.47.15" style="zoom:33%;"></p>
<p>接下来仿真噪声，依照上图设置参数。其中，最下面 Positive Output Node
一栏，可点击 Select 按钮后，在电路图中选择输出节点；而 Negative Output
Node 一栏则选地，若不选，则也会默认为地；Input Voltage Source
选择<strong>输入差分信号的电压源</strong>。结果选择等效输入噪声，如下：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727183623.svg" alt="noise"></p>
<h2 id="其他指标仿真">其他指标仿真</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183536.png" alt="tb_all">
<figcaption aria-hidden="true">tb_all</figcaption>
</figure>
<p>SR、CMRR 和 nPSRR，仿真如上图所示。</p>
<h3 id="sr-压摆率">SR (压摆率)</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727183635.png" alt="截屏2021-03-20 下午6.43.01" style="zoom:33%;"></p>
<p>其中 SR 仿真中信号源使用
<code>vpulse</code>，设置如上图所示。仿真时使用 <code>tran</code>
仿真，仿真后输出波形。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183537.png" alt="截屏2021-03-20 下午6.37.13">
<figcaption aria-hidden="true">截屏2021-03-20 下午6.37.13</figcaption>
</figure>
<p>由于 SR 是电压相对于时间的导数，可以使用计算器来得到一个更直观的 SR。
设置如上图所示。SR 的结果如下图所示。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183538.svg" alt="SR">
<figcaption aria-hidden="true">SR</figcaption>
</figure>
<h3 id="cmrr-共模抑制比">CMRR (共模抑制比)</h3>
<p>定义为差模增益与差模输入为0时共模到输出的增益比值。物理意义即衡量共模输入转换到等效差模输入的大小。</p>
<p>使用两个信号源分别加载于被测放大器的同相、反相输入端，由于放大器的差模增益远远大于共模增益，因此
CMRR 可以近似为 <span class="math inline">\(V_{CM}/V_{out}\)</span>。
<span class="math display">\[
V_{out} = A_{DM}(V_P-V_N) + A_{CM}
\]</span> <span class="math display">\[
V_P= V_{CM},\ \ V_N = V_{out} + V_{CM}, \ \ V_{CM} = 1
\]</span> <span class="math display">\[
\frac{V_{out}}{V_{CM}} =
\frac{A_{CM}}{A_{DM}+1}\approx\frac{A_{CM}}{A_{DM}}=\frac{1}{CMRR}
\]</span></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183539.svg" alt="CMRR">
<figcaption aria-hidden="true">CMRR</figcaption>
</figure>
<h3 id="电源抑制比-psrr">电源抑制比 (PSRR)</h3>
<p>在负电源上叠加 1V 交流电压，输出端接到负输入端，正输入端接 VDD/2
的直流电源。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183540.svg" alt="nPSRR">
<figcaption aria-hidden="true">nPSRR</figcaption>
</figure>
<h2 id="仿真结果">仿真结果</h2>
<table>
<thead>
<tr>
<th>设计指标</th>
<th>带宽最大化</th>
<th>仿真结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>静态功耗</td>
<td><span class="math inline">\(\leq 2mW\)</span></td>
<td><span class="math inline">\(377\mu A\times 1.8V\)</span></td>
</tr>
<tr>
<td>开环直流增益</td>
<td><span class="math inline">\(\geq 80dB\)</span></td>
<td>83 dB</td>
</tr>
<tr>
<td>单位增益带宽</td>
<td>Maximize</td>
<td>113 MHz</td>
</tr>
<tr>
<td>相位裕度</td>
<td><span class="math inline">\(\geq 60 degree\)</span></td>
<td>63 degree</td>
</tr>
<tr>
<td>转换速率</td>
<td><span class="math inline">\(\geq 30V/\mu s\)</span></td>
<td><span class="math inline">\(40 V/\mu s\)</span></td>
</tr>
<tr>
<td>共模抑制比</td>
<td><span class="math inline">\(\geq 60dB\)</span></td>
<td>69 dB</td>
</tr>
<tr>
<td>负电源抑制比</td>
<td><span class="math inline">\(\geq 80dB\)</span></td>
<td>89 dB</td>
</tr>
<tr>
<td>等效输入噪声</td>
<td><span class="math inline">\(\leq 300nV/Hz@1KHz\)</span></td>
<td><span class="math inline">\(91.6nV/Hz@1KHz\)</span></td>
</tr>
</tbody>
</table>
<h1 id="reference">Reference</h1>
<p>[1] <a href="http://bbs.eetop.cn/thread-279034-1-1.html">复旦大学模拟电路二级运放实例</a></p>
<p>[2] <a href="http://blog.eetop.cn/blog-1770479-6946353.html">两级运算放大器设计笔记</a></p>
<p>[3] <a href="https://www.bilibili.com/read/cv5808960/">cadence中运放性能参数仿真（一）</a></p>
<p>[4] <a href="https://wx.seu.edu.cn/_upload/article/files/ed/b2/3c80f23a41e79abc3114a231ed52/9c379d42-4ec3-4605-9ea7-a55b922bd984.pdf">运放仿真方法整理</a></p>
]]></content>
      <categories>
        <category>Analog</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
      </tags>
  </entry>
  <entry>
    <title>Power Amplifier -- 基础知识</title>
    <url>/2021/02/08/PA/</url>
    <content><![CDATA[<h1 id="无线发射机结构">无线发射机结构</h1>
<p>无线发射机按结构类型主要分为三种：直接上变频、超外插和直接数字调制。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183748.png" alt="image-20210219214746388">
<figcaption aria-hidden="true">image-20210219214746388</figcaption>
</figure>
<p>上图为<strong>直接上变频</strong>结构，通过一次变频将 I、Q
两路基带信号变为射频信号。</p>
<ul>
<li>优点：
<ul>
<li>结构简单；</li>
<li>能较好得抑制镜像的产生；</li>
</ul></li>
<li>缺点：
<ul>
<li>工作在射频上的两个混频器需要消耗很大电流；</li>
<li>当振荡器和输出处于同一频率时，高频载波馈通和注入锁定 (Injection)
是两个可能出现的问题；</li>
</ul></li>
</ul>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183749.png" alt="image-20210219215427587">
<figcaption aria-hidden="true">image-20210219215427587</figcaption>
</figure>
<p>上图为<strong>超外差</strong>结构，其将数字调制上变频产生的信号再与射频前端的本振进行一次上变频，最后送入功放。</p>
<ul>
<li>优点：
<ul>
<li>该发射机在本振和功放之间加入一个滤波器，具有良好的隔离度；</li>
</ul></li>
<li>缺点：
<ul>
<li>与直接上变频相比，由于采用了两次上变频，复杂度较高；</li>
</ul></li>
</ul>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183750.png" alt="image-20210219220156205">
<figcaption aria-hidden="true">image-20210219220156205</figcaption>
</figure>
<p>上图为<strong>直接数字调制</strong>结构，直接将频率合成器的输出送入到功放。</p>
<h1 id="功率放大器的主要技术指标">功率放大器的主要技术指标</h1>
<h2 id="输出功率">输出功率</h2>
<h2 id="功率附加效率">功率附加效率</h2>
<h2 id="线性度">线性度</h2>
<h1 id="功率放大器的分类">功率放大器的分类</h1>
<p>功率放大器按晶体管的工作特性可以分为<strong>线性功率放大器</strong>和<strong>开关功率放大器</strong>。</p>
<h1 id="线性化技术">线性化技术</h1>
<p>目前针对高功率功放提高线性度的方法主要有：功率回退法 (Power
Back-off)、前馈法 (Feedforward)、负反馈技术 (Feedback)、预失真技术
(Predistortion)、包络消除与恢复 (Envelope Elimination and
Restoration)等。</p>
<h1 id="匹配补偿技术">匹配补偿技术</h1>
<h1 id="功率合成技术">功率合成技术</h1>
]]></content>
      <categories>
        <category>PA</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PA</tag>
      </tags>
  </entry>
  <entry>
    <title>PLL(2)-0.4~8GHz电流泵锁相环型小数频率综合器</title>
    <url>/2020/10/13/PLL-2/</url>
    <content><![CDATA[<p>前一篇文章 <a href="https://zhouyuqian.com/2020/09/11/PLL/">PLL(Phase-locked loop,
锁相环)</a> 介绍了 PLL(锁相环) 的基本原理，这篇文章介绍一个 0.4~8GHz
电流泵锁相环型小数频率综合器的实现原理。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193424.png" alt="小数频率综合器系统结构" style="zoom:40%; margin: auto;"></p>
<span id="more"></span>
<blockquote>
<p>Reference: <a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFD201801&amp;filename=1017116544.nh&amp;v=grmqatzl4t6TEe1aXvu9C473CDx8comY%25mmd2BdcIonuXqHPUF4bV%25mmd2FqpS36DKm%25mmd2BC1Vdyt">多模CMOS频率综合器关键模块设计及其整体优化-孙天慧-东南大学</a></p>
</blockquote>
<h1 id="频率综合器概述">频率综合器概述</h1>
<h2 id="频率综合器分类">频率综合器分类</h2>
<ul>
<li><p>直接模拟频率综合器 (<strong>DAS</strong>, Direct Analog
Synthesizer)</p>
<p>原理：DAS
基于一个或多个高稳定度的参考源，通过倍频、分频及混频等方式直接产生多个目标频率信号。</p>
<p><strong>优点</strong>：较好的相位噪声和频率稳定度；频率切换速度快；</p>
<p><strong>缺点</strong>：结构复杂、成本高、调试难度大；输出杂散大且难以抑制；</p>
<p>应用：小规模地应用于雷达信号产生。</p></li>
<li><p>直接数字频率综合器 (<strong>DDS</strong>, Direct Digital
Synthesizer)</p>
<p>原理：DDS
从相位的概念出发，采用数字采样存储技术，通过数模转换器将存储在片上存储器中的波形输出。</p>
<p><strong>缺点</strong>：DDS
本质上是一个采样系统，其输出信号频率不能超过采样频率的一半。</p>
<p>应用：DDS 多用于低频系统中，难以满足射频系统的需求。</p></li>
<li><p>锁相环频率综合器 (<strong>PLL-FS</strong>, Phase-Locked Loop
Frequency Synthesizer)</p>
<p>原理：间接频率综合器，利用相位反馈原理产生稳定的输出频率。通过闭环跟踪特性将压控振荡器
VCO 产生的频率锁定在某一频率上。</p>
<p>优点：PLL-FS
作为一个误差控制系统，能够实现很好的输出频率控制，同时具有较好的频率纯净度和频率稳定度。</p>
<p>应用：在现代通信系统中广泛应用。</p></li>
<li><p>延迟锁相环频率综合器 (<strong>DLL-FS</strong>, Delay-Locked Loop
Frequency Synthesizer)</p>
<p>原理：同 PLL-FS，主要实现时钟同步。</p></li>
</ul>
<h2 id="多模-cmos-锁相环频率综合器分类">多模 CMOS
锁相环频率综合器分类</h2>
<ul>
<li><p>多个模拟锁相环组合</p>
<p>功耗大、面积大；</p></li>
<li><p>全数字锁相环</p>
<p>很宽的频率覆盖范围、较小的带外相位噪声、较小的尺寸；</p>
<p>需要利用复杂的技术来抑制量化噪声；</p></li>
<li><p>电荷泵锁相环小数频率综合器</p></li>
</ul>
<h1 id="小数频率综合器的基本原理">小数频率综合器的基本原理</h1>
<h2 id="基本模块">基本模块</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727193454.png" alt="电荷泵锁相环型小数频率综合器基本结构" style="zoom:30%; margin: auto;"></p>
<p>如上图所示，一个典型的电荷泵锁相环型小数频率综合器包括鉴频鉴相器
(Phase Frequency Detector, PFD)、电荷泵 (Charge Pump, CP)、环路滤波器
(Loop Filter, LF)、压控振荡器 (Voltage Controlled Oscillator,
VCO)、可编程整数分频器、<span class="math inline">\(\Delta-\Sigma\)</span> 调制器 (Delta-Sigma
Modulator, DSM) 和自动频率校准单元 (Auto-Frequency Calibration,
AFC)。</p>
<h3 id="鉴频鉴相器和电荷泵">鉴频鉴相器和电荷泵</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727193527.png" alt="理想 PFD:CP 工作波形" style="zoom:35%; margin: auto;"></p>
<p>理想 PFD/CP 工作波形如上图所示。鉴频鉴相器 (PFD) 用以检测参考时钟
<span class="math inline">\(f_{ref}\)</span> 和分频器输出 <span class="math inline">\(f_{div}\)</span>
的频率差或者相位差，并输出与之形成正比的脉冲信号 UP 和 DN。电荷泵 (CP)
将 UP 和 DN
间的脉宽差值转换为电流脉冲，对环路滤波器进行充放电，产生压控振荡器的控制信号。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193548.png" alt="边沿触发的 PFD:CP 结构图" style="zoom:35%; margin: auto;"></p>
<p>上图为边沿触发的 PFD/CP 结构图，包括两个带复位端的 D
触发器、一个两输入的与门和连接电荷泵开关的缓冲逻辑单元。由于电荷泵的开关分别采用了
PMOS 管和 NMOS 管，逻辑相反，所以需要在缓冲逻辑单元中对 UP
信号反向。为了使 UP 和 DN 信号到达 CP
开关的延迟保持一致，在缓冲单元中的传输门应尽量与非门保持相同的传输延迟。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193620.png" alt="PFD:CP 传输特性曲线" style="zoom:35%; margin: auto;"></p>
<p>PFD/CP 传输特性曲线如上图所示，在环路锁定的过程中，PFD/CP
可分为三个工作状态：鉴频鉴 (相位差<span class="math inline">\(&gt;2\pi\)</span>)、鉴相 (相位差<span class="math inline">\(&lt;2\pi\)</span>)、锁定相位 (相位差<span class="math inline">\(=0\)</span>)。当 PFD
的两个输入信号相位差绝对值大于 <span class="math inline">\(2\pi\)</span>
时，PFD 工作在鉴频状态，输出极性不再随相位变化。当相位差绝对值不超过
<span class="math inline">\(2\pi\)</span> 时，PFD
工作在鉴相状态，即环路进入锁定过程。此时，PFD/CP 的输出信号 UP 与 DN
之间脉宽差值 <span class="math inline">\(\Delta t\)</span>
与两个输入信号的相位差 <span class="math inline">\(\Delta
\varphi\)</span> 成正比，即： <span class="math display">\[
\Delta t = \frac{\Delta \varphi}{2\pi} \cdot T_{ref}
\]</span></p>
<p>则 PDF/CP 在一个周期内产生是平均静电流为： <span class="math display">\[
\overline{I_{out}} = \frac{I_{CP}\cdot\Delta t}{T_{ref}} =
\frac{I_{CP}}{2\pi}\cdot \Delta \varphi
\]</span> 则在相位域 PFD/CP 的增益为： <span class="math display">\[
K_{PFDCP} = \frac{\overline{I_{out}}}{\Delta \varphi} =
\frac{I_{CP}}{2\pi}
\]</span> 可得到 PFD/CP 的线性相位在 s 域的模型如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193632.png" alt="PFD:CP 的线性相位在 s 域模型" style="zoom:35%; margin: auto;"></p>
<h3 id="环路滤波器">环路滤波器</h3>
<p>环路滤波器为低通滤波器，其作用是将 CP 输出的电流转换为 VCO
的控制电压，并滤除其高频分量，同时环路滤波器也可以抑制 <span class="math inline">\(\Delta-\Sigma\)</span>
调制器中的带外噪声。在环路滤波器的带宽小于参考时钟频率的 <span class="math inline">\(1/10\)</span> 时，整个环路在 s
域可近似为线性系统。</p>
<p>常见的环路滤波器可分为有源滤波器和无源滤波器。有源滤波器功耗大，并会产生有源噪声，因此在锁相环系统中通常会使用无源环路滤波器。一阶无源环路滤波器的电压纹波较大，实际应用中通常使用二阶和三阶无源环路滤波器。其结构如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193649.png" alt="常用无源环路滤波器" style="zoom:45%; margin: auto;"></p>
<p>上图二阶无源环路滤波器的传递函数为： <span class="math display">\[
Z_{LF2}(s) = \frac{V_c}{I_{cp}} = \frac{1+sR_1C_1}{s(sR_1C_1C_2 + C_1 +
C_2)}
\]</span> 可知该无源二阶环路滤波器有一个零点和两个极点。 <span class="math display">\[
Z_{LF3} = \frac{1}{s}\frac{1+sR_1C_1}{R_1R_3C_1C_2C_3s^2 +
[R_1C_1(C_1+C_3)+R_3C_3(C_1+C_2)]s + (C_1+C_2+C_3)}
\]</span> 可知该三阶无源环路滤波器有一个零点和三个极点。</p>
<p>环路滤波器的线性相位 s 域模型如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193707.png" alt="环路滤波器的线性相位 s 域模型" style="zoom:25%; margin: auto;"></p>
<h3 id="压控振荡器">压控振荡器</h3>
<p>VCO 的输出频率随输入控制电压单调变化，理想 VCO 的输入输出关系为：
<span class="math display">\[
\omega _{out}(t) = \omega _0 + K_{VCO} \cdot v_c(t)
\]</span> 根据相位和频率在时域中的积分关系，可得 VCO 的输出相位为：
<span class="math display">\[
\varphi _{out}(t) = \int \omega _{out} (t) \mathrm{dt} = K_{VCO} \int
v_c(t) \mathrm{dt} + \omega _0 t + \varphi _0
\]</span> 由于 $_0 t $ 和 $ _0$ 都不受锁相环控制，这里只关心受电压 <span class="math inline">\(v_c\)</span> 控制的剩余相位： <span class="math display">\[
\varphi _{res}(t) = K_{VCO} \int v_c(t) \mathrm{dt}
\]</span> 则 VCO 在 s 域的传递函数为： <span class="math display">\[
\frac{\varphi _{res}}{v_c} (s) = \frac{K_{VCO}}{s}
\]</span> VCO 的线性相位 s 域模型如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193723.png" alt="VCO 的线性相位 s 域模型" style="zoom:30%; margin: auto;"></p>
<h3 id="可编程整数分频器">可编程整数分频器</h3>
<p>可编程整数分频器位于锁相环的反馈回路中，将 VCO
输出的振荡信号进行分频后，输出给 PFD
与参考时钟比较，而形成环路。可编程整数分频器工作在整个 PLL
的<strong>最高频率</strong>处。常用的电路结构有：基于双模预分频的 P/S
计数器结构和 2/3 分频器链结构。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193742.png" alt="基于双模预分频器的 P:S 计数器结构" style="zoom:40%; margin: auto;"></p>
<p>基于双模预分频器的 P/S
计数器结构如上图所示，这种结构的分频器总分频比为： <span class="math display">\[
M = (N+1)\cdot S + N\cdot (P-S) = N\cdot P + S
\]</span>
<img src="https://pic.zhouyuqian.com/img/20210727193753.png" alt="基于 2:3 分频器链的结构" style="zoom:50%; margin: auto;"></p>
<p>基于 2/3
分频器链的结构如上图所示，这种分频器只要第一级工作在最高频率，后级工资频率逐渐降低，可以降低电路功耗；整个链路中不存在长延时回路，所有反馈路径只存在于相邻的两个单元之间，可靠性好；链路中的每一级都由相同的模块组成，电路的可复用性好。</p>
<p>n 级 2/3 分频器链的总分频比为： <span class="math display">\[
M = 2^n + 2^{n-1} \cdot P_{n-1} + 2^{n-2} \cdot P_{n-2} + \dots + 2
\cdot P_{0}
\]</span> n 级 2/2 分频器链的分频比范围为 <span class="math inline">\(2^n \sim
2^{n+1}-1\)</span>，此外可以通过组合逻辑电路拓展分频比范围。</p>
<p>可编程整数分频器的线性相位 s 域模型如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193817.png" alt="可编程整数分频器的线性相位 s 域模型" style="zoom:25%; margin: auto;"></p>
<h3 id="delta---sigma-调制器"><span class="math inline">\(\Delta -
\Sigma\)</span> 调制器</h3>
<p>小数频率综合器中的小数分频器是通过“动态分频比”来实现的，在环路锁定时两个输入信号仍存在相位差。<span class="math inline">\(\Delta - \Sigma\)</span>
调制器可以将瞬时分频比随机化，在实现小数分频的同时，进行量化噪声的整形。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193847.png" alt="Delta-Sigma 调制器的工作原理示意图" style="zoom:45%; margin: auto;"></p>
<p><span class="math inline">\(\Delta - \Sigma\)</span>
调制器的工作原理如上图所示，小数分频器的分频比分为整数部分 <span class="math inline">\(N\)</span> 和小数部分 <span class="math inline">\(a\)</span>，小数部分通过 <span class="math inline">\(\Delta - \Sigma\)</span>
调制器进行量化后，与整数部分相加，得到瞬时分频比。<span class="math inline">\(\Delta - \Sigma\)</span>
调制器将带内噪声推向带外，实现噪声整形，而带外的量化噪声可以通过环路滤波器进行抑制，从而改善小数频率综合器的输出相位噪声。</p>
<p><span class="math inline">\(\Delta - \Sigma\)</span>
调制器对环路的线性相位 s 域模型没有影响，但会引入量化噪声。</p>
<h3 id="自动频率校准单元">自动频率校准单元</h3>
<p>在目标频率发生变化后，环路断开 AFC 开始工作，搜索到目标自频率后，AFC
停止工作且接通环路。因此 AFC 对环路的线性相位 s 域模型没有影响。</p>
<h2 id="环路线性化模型和传递函数">环路线性化模型和传递函数</h2>
<p>根据上面对电荷泵锁相环中每个模块的分析，可得其在 s
域的线性化模型为：</p>
<p>根据上图可得锁相环系统的开环传递函数为： <span class="math display">\[
H_{OL}(s) = \frac{I_{CP}\cdot K_{VCO}}{2\pi \cdot N \cdot s} \cdot
Z_{LF}(s)
\]</span> 则其闭环传递函数为： <span class="math display">\[
H_{CL}(s) = \frac{H_{OL}/\frac{1}{N}}{1+H_{OL}} = \frac{N \cdot
H_{OL}}{1+H_{OL}}
\]</span> 因此闭环传递函数 <span class="math inline">\(H_{CL}(s)\)</span> 呈低通特性。</p>
<h2 id="混合型-fir-噪声滤除计数">混合型 FIR 噪声滤除计数</h2>
<h1 id="电路设计">电路设计</h1>
<h2 id="系统结构设计">系统结构设计</h2>
<p><img src="/2020/10/13/PLL-2/小数频率综合器系统结构.png" alt="小数频率综合器系统结构" style="zoom:40%; margin: auto;"></p>
<p>小数频率综合器系统结构如上图所示，主要包括鉴频鉴相器 (PFD)、电荷泵
(CP)、环路滤波器 (LF)、压控振荡器 (VCO)、可编程整数分频器、<span class="math inline">\(\Delta - \Sigma\)</span> 调制器 (DSM)
和自动频率校准单元 (AFC)，同时采用混合型 FIR 滤波器来抑制 <span class="math inline">\(\Delta - \Sigma\)</span> 调制器的量化噪声。</p>
<h2 id="小数分频器电路">小数分频器电路</h2>
<p>由于 VCO
的输出端直接送到小数分频器的输入端，因此小数分频器工作在整个环路的最高频率处。因此小数分频器的高频部分采用全定制电路实现，而低频模块则采用半定制电路实现。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193930.png" alt="小数分频器结构" style="zoom:40%; margin: auto;"></p>
<p>小数分频器的结构如上图所示，主要由高速二分频器、可编程整数分频器和
<span class="math inline">\(\Delta - \Sigma\)</span>
调制器组成，其中可编程整数分频器包括四分频器和 2/3 分频器链。</p>
<h3 id="高速二分频器">高速二分频器</h3>
<p>高速二分频器的作用是对 VCO
输出的频率进行二分频，从而产生<strong>四项正交的本振信号</strong>。</p>
<blockquote>
<p>PS: I/Q 正交调制</p>
<p>假设载波为 cos(a)，信号为 cos(b)，传统调制方式直接用载波和信号相乘：
<span class="math display">\[
cos(a)*cos(b) = \frac{1}{2} [cos(a+b) + cos(a-b)]
\]</span> 这样就在载波 a
的作用下产生了两个信号，然而实际中只需要一个信号，则需要通过滤波器滤除掉另一个信号，但实际上滤波器是不理想的，很难完全滤掉另外一个。</p>
<p>在实际应用中只希望得到单一的 a+b 或者 a-b 即可，将三角函数展开：
<span class="math display">\[
cos(a-b) = cos(a)cos(b) + sin(a)sin(b)
\]</span> 在 I/Q 正交调制中，Q 路可以产生于 I 路相位相差 <span class="math inline">\(\pi /2\)</span> 的信号，就相当于 Q 路为
sin(a)，因此可以通过 I/Q 正交调制得到单一中心频率的信号： <span class="math display">\[
cos(a)cos(b) + sin(a)sin(b) = cos(a-b)
\]</span></p>
</blockquote>
<p>常用的高速分频器主要有<strong>可再生分频器</strong> (Regenerative
Frequency Divider, RFD)、<strong>注入锁定分频器</strong> (Injection-Look
Frequency Divider, ILFD) 和<strong>源级耦合逻辑</strong> (Source Coupled
Logic, SCL) 触发器构成的分频器。</p>
<p>可再生分频器和注入锁定分频器都属于模拟分频器，可以达到很高的工作频率。然而可再生分频器在低频下会产生高次谐波分量，注入式分频器的工作频率比较窄。SLC
触发器构成的分频器属于数字分频器，其工作频率高、工作范围大、灵敏度高、可输出理想的正交信号。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193943.png" alt="触发器构成的二分频器" style="zoom:25%; margin: auto;"></p>
<p>如上图所示，将触发器的反相输出端 Qn 和数据输入端 D
相连就可以构成一个二分频器。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727193957.png" alt="SCL 锁存器构成的高速二分频器" style="zoom:50%; margin: auto;"></p>
<p>如上图所示，SCL 触发器实际上是由两个 SCL 结构的锁存器级联而成的。</p>
<h3 id="缓冲电路">缓冲电路</h3>
<p>由于高速二分频器直接输出的信号幅度较小，且驱动力不足，直接与后级相连将无法正常工作，因此需要在高速二分频器和后级电路之间加上缓冲电路。对于缓冲电路的要求有：输入电容小、隔离度高以及驱动能力强，这样的缓冲电路不会影响前级电路的正常工作，还可以为后级电路提供较大摆幅的输出信号。</p>
<p>射频电路中常用的缓存电路有三种：<strong>反相器</strong>、<strong>源级跟随器</strong>和<strong>共源放大器</strong>。</p>
<p>反相器结构的缓冲电路输出摆幅较大，但其输入阻抗大，会给前级带来很大的负载（<strong>？</strong>），且反相器结构的缓冲电路工作频率较低。</p>
<p>源级跟随器结构的缓冲电路有输入阻抗大、输出阻抗小的特点，可以轻易实现阻抗变化。但其输出摆幅相较于输入信号，会有一个阈值电压的下降。</p>
<p>共源放大器结构的缓冲电路其偏置电流可调、工作频率高、反向隔离度好、并且可以抑制共模电流。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727194013.png" alt="共源放大器结构的缓冲电路结构" style="zoom:35%; margin: auto;"></p>
<p>共源放大器结构的缓冲电路结构如上图所示，单端输出信号峰峰值 <span class="math inline">\(V_{PP}\)</span> 为 <span class="math inline">\(I_{SS} \cdot R_{D}\)</span>。</p>
<h3 id="四分频器">四分频器</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727194023.png" alt="触发器构成的四分频器" style="zoom:40%; margin: auto;"></p>
<p>与高速二分频器的结构类似，两个完全相同的触发器就可以构成一个四分频器，其结构如上图所示。由于其工作频率范围为
<span class="math inline">\(0.5 \sim 4.0GHz\)</span>，因此仍使用 SCL
结构的触发器电路结构来实现。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727194040.png" alt="四分频器的缓冲电路结构" style="zoom:35%; margin: auto;"></p>
<p>四分频器的缓冲电路结构如上图所示，四分频器的缓冲电路不仅要起到隔离和驱动的作用，还要实现模拟信号和数字逻辑信号的转换，因此缓冲电路分三级：</p>
<ul>
<li>第一级是双转单输出型的共源差分放大器，将差分输入信号转化为单端输出信号，并做一定的放大；</li>
<li>第二级是<strong>带电阻反馈的反相器</strong>，将信号放大至全摆幅，其中的电阻反馈可以稳定输出，并将输出信号的直流工作点固定在翻转阈值附件；</li>
<li>第三级是驱动后级数字电路的反相器，为后级电路提供更大的驱动能力。</li>
</ul>
<h3 id="分频器">2/3 分频器</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727194101.png" alt="2/3 分频器链路结构" style="zoom:45%; margin: auto;"></p>
<p>2/3 分频器链路结构如上图所示，n 级 2/3 分频器链路的分频比范围为 <span class="math inline">\(2^n \sim
2^{n+1}-1\)</span>，采用逻辑组合电路可以进一步将分频比拓展至 <span class="math inline">\(2^k \sim 2^{n+1}-1\)</span>，因此采用 5 级 2/3
分频器链路，可以实现 <span class="math inline">\(4 \sim 63\)</span>
分频比范围。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727194114.png" alt="2:3 分频器结构" style="zoom:40%; margin: auto;"></p>
<p>每一级的 2/3
分频器结构如上图所示，有四个锁存器和三个与门构成。其包含两部分，上半部分是预分频逻辑
(Prescaler Logic)，下半部分是周期终止逻辑 (End-of-Cycle
Logic)。周期终止逻辑根据分频比控制输入端 P 和模式输入端 <span class="math inline">\(\mathrm{mod}_\mathrm{in}\)</span>
来决定预分频逻辑的分频比。其分频比关系如下：</p>
<table>
<thead>
<tr>
<th style="text-align: center;">输入控制端</th>
<th style="text-align: center;">分频比</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">P &amp; <span class="math inline">\(\mathrm{mod}_\mathrm{in}\)</span> = 0</td>
<td style="text-align: center;">2</td>
</tr>
<tr>
<td style="text-align: center;">P &amp; <span class="math inline">\(\mathrm{mod}_\mathrm{in}\)</span> = 1</td>
<td style="text-align: center;">3</td>
</tr>
</tbody>
</table>
<p>2/3 分频器链路的最高工作频率为 1GHz，可以采用真单相时钟 (True Single
Phase Clocked, TSPC) 逻辑结构来实现，TSPC
逻辑有着结构简单、功耗小，并且只需要单相输入时钟的优点。TSPC 结构实现的
2/3 分频器电路结构如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727194127.png" alt="TSPC 结构的 2:3 分频器" style="zoom:40%; margin: auto;"></p>
<h3 id="delta-sigma-调制器"><span class="math inline">\(\Delta-\Sigma\)</span> 调制器</h3>
<h2 id="afc">AFC</h2>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>高性能射频毫米波频率源三种主要解决方案</title>
    <url>/2020/10/23/PLL-3/</url>
    <content><![CDATA[<p>对频率源的研究可追溯上百年,而至今仍无完美解决频率、带宽、相位噪声三方面挑战的方案。随着现代无线电技术的发展，毫米波频段的无线射频系统越来有吸引力，毫米波频率源是目前制约无线射频系统的瓶颈所在。</p>
<p>高性能射频毫米波频率源三种主要解决方案：直接采用工作在毫米波频段的锁相环、低频信号源级联单个毫米波倍频器和采用多个倍频器共同协作的方式。</p>
<span id="more"></span>
<blockquote>
<p>Reference:</p>
<p><a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CDFD&amp;dbname=CDFDLAST2020&amp;filename=1020716365.nh&amp;v=9gG9zJPy1pyL%25mmd2BNFc3B4ib7qfNZGDrB9Q5%25mmd2FYZlVysxZvVCYIVvIJQd0gDPf71zaqg">高性能射频毫米波频率源集成电路研究-张净植-电子科技大学</a></p>
</blockquote>
<h1 id="方案一直接采用工作在毫米波频段的锁相环">方案一：直接采用工作在毫米波频段的锁相环</h1>
<p><img src="https://pic.zhouyuqian.com/img/20210727194159.png" alt="毫米波锁相环" style="zoom:35%; margin: auto;"></p>
<h2 id="优缺点分析">优缺点分析</h2>
<ul>
<li><p>优点：</p>
<p>由于锁相环的存在，其对 VCO 表现为高通特性，故而可以滤除 VCO
在锁相环带内的相位噪声；</p></li>
<li><p>缺点：</p>
<p>然而，由于该 VCO
仍工作在毫米波频段，故而存在较高的无法被滤除的带外噪声；</p>
<p>并且，为更好地优化总体噪声输出，锁相环的增益和带宽均需要设置为较高的数值，这对环路的稳定性带来了一定的挑战；</p>
<p>除此之外，由于采用了较高的倍频比，锁相环环路所产生的噪声较高，继而恶化总体输出噪声；</p>
<p>与此同时，所有采用此方案的频率源工作带宽均小于
30%，难以满足宽带要求(相对带宽大于 50%)。这是由于，该方案需要 VCO
工作在毫米波频段，难以实现较大的带宽。在工作频率和带宽的双重严格要求下，此
VCO 的设计难度极大，因而未有较好的相关成果发表。</p></li>
</ul>
<h2 id="相关研究成果">相关研究成果</h2>
<h3 id="双-vco-方案">1. 双 VCO 方案</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727194211.png" alt="Xilinx 7.4-14 GHz 锁相环" style="zoom:100%; margin: auto;"></p>
<p>Xilinx 18 年发布了一款可覆盖 7.4-14 GHz 的宽带锁相环，采用 16-nm
FinFET 工艺，实现了 54 <span class="math inline">\(fs_{rms}\)</span>的时钟抖动。该方案为了实现宽带输出要求，在芯片中集成了两颗
VCO，一颗工作在高频段，另一颗工作在低频段，从而有效地扩展了总带宽。这个方案是一种对带宽和噪声很好的折衷方案，通过牺牲一定的芯片面积和系统复杂度，换取了不错的带宽和相位噪声特性。然而，也因为使用了两颗
VCO，使得该方案无法成为完美的解决方案。</p>
<h3 id="sub-sampling-锁相环方案">2. Sub-sampling 锁相环方案</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727194221.png" alt="澳门大学 25.4-29.5GHz 锁相环" style="zoom:67%; margin: auto;"></p>
<p>澳门大学于 2019 年发布了一款工作在 25.4-29.5 GHz 的锁相环，采用
Sub-sampling 锁相环方案，实现了 71 <span class="math inline">\(fs_{rms}\)</span>的时钟抖动,同时仅消耗 10.2 mW
的功耗。Sub-sampling
锁相环是另一种比较好的解决方案，因为其去掉了环路中的分频器，相比于传统锁相环，该锁相环不产生分频器噪声，继而降低了环路总噪声。同时，该
Sub-sampling
鉴相器具有极高的增益，可以最大程度地抑制环路内电荷泵噪声。因此，Sub-sampling
锁相环有着极佳的带内噪声特性。</p>
<p>但该方案仍有一些明显不足。首先是其输出相对带宽较低。澳门大学的这款锁相环其相对带宽只有
14.9%；其次，Sub-sampling
锁相环固有的采样方式，使其仅能实现整数分频，进一步限制了该锁相环的应用空间。现有很多工作对该锁相环的小数分频方法进行了探索，取得了一定成果，但技术仍不成熟，分频精度和相位噪声均未达到理想结果。</p>
<h3 id="耦合锁相环方案">3. 耦合锁相环方案</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727194231.png" alt="Oregon State University 28 GHz 锁相环" style="zoom:60%; margin: auto;"></p>
<p>Oregon State University 在 2018 年发布了一款 28 GHz
耦合锁相环。这种锁相环主要目的是实现不同电路板上的本振信号同步，从而支持大规模相控阵应用。通过这种耦合，不仅能实现相位上的同步，其特殊的环路响应使得其具备相位噪声滤波效应。然后此方案主要针对特殊应用而设计的，固然通过耦合后相位噪声可以得到改善,但若使用在其他应用中,这种相位噪声的改善无法弥补其功耗和面积上的损失。</p>
<h1 id="方案二低频信号源级联单个毫米波倍频器">方案二：低频信号源级联单个毫米波倍频器</h1>
<p><img src="https://pic.zhouyuqian.com/img/20210727194245.png" alt="低频信号源级联单个毫米波倍频器" style="zoom:30%; margin: auto;"></p>
<p>该方案使用低频率的频率源作为输入，并用倍频器将低频信号倍频值毫米波频段。</p>
<h2 id="优缺点分析-1">优缺点分析</h2>
<ul>
<li><p>优点：</p>
<p>规避了高频 VCO 的需求。在 VCO
工作在低频时，可以获得较好的相位噪声特性，且倍频器的引入几乎不会恶化 VCO
的相位噪声特性，因而可以在毫米波频段获得较好的相位噪声特性。</p></li>
<li><p>缺点：</p>
<p>该方案在带宽方面的表现不佳。</p>
<p>首先，宽带毫米波倍频器在设计上存在巨大的挑战，在实现宽带的同时，还要保证低功耗和高的谐波抑制，存在着极大地挑战。</p>
<p>其次，该低频信号源仍需具备较宽的带宽，即使频率降低，在保证相位噪声性能的同时扩展带宽同样具有非常大的挑战。</p>
<p>因而，现阶段对于此方案的研究还主要局限在窄带毫米波频率源中。</p></li>
</ul>
<h2 id="相关研究成果-1">相关研究成果</h2>
<h3 id="注入锁定倍频器">1. 注入锁定倍频器</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727194254.png" alt="Delft 60 GHz 注入锁定倍频器" style="zoom:60%; margin: auto;"></p>
<p>Delft University of Technology 在 2008 年首先尝试了该方法实现了 60
GHz
注入锁定倍频器。在该设计中，作者使用了注入锁定的方式实现三倍频器的效果。由于需要正交输出,
作者首先设计了一个 R-C 多相滤波(Polyphase filter, PPF)，将输入的 20 GHz
差分信号转变成正交信号；然后，将生成的正交信号注入至耦合的正交注入锁定振荡器中。由于注入锁定振荡器工作在
60 GHz
频率附近，其输入信号在经过非线性变换后，产生的三次谐波用以锁定注入锁定振荡器，因此，此时的注入锁定振荡器将受迫振荡于输入信号的三次谐波处，从而实现了三倍频的效果。该芯片可工作在
56-65 GHz
的频率范围内，且具备良好的相位噪声跟踪特性，即倍频器本身几乎不引入额外的相位噪声。</p>
<h3 id="多级倍频器级联方案">2. 多级倍频器级联方案</h3>
<p>LG 公司与 2017 年发布了的一款注入锁定倍频器，用于 5G
多通道相控阵系统，其采用两级注入锁定三倍频器级联，获得了九倍频特性，将
3.11 GHz 的输入信号 9 倍频至 28 GHz，取得了极佳的相位噪声特性。</p>
<p>同样，该方案在宽带方面具有先天性的不足，需要较多方法进行弥补。</p>
<h3 id="校准方案">3. 校准方案</h3>
<p>注入锁定倍频器存在锁定带宽不足，容易失锁等问题。因此，近年来，学术界和工业界均投入大量的精力，对注入锁定倍频器的调谐和校准进行研究。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727194306.png" alt="Virginia Tech 28 GHz 注入锁定倍频器" style="zoom:60%; margin: auto;"></p>
<p>在诸多发表的用于校准的文章中，Virginia Tech 在 2016
年发布的一款工作在 28 GHz
的注入锁定三倍频器尤为突出，如上图所示。由于注入锁定倍频器在锁定时具有恒定输出包络，而当失锁时，其输出呈现为类调幅信号。因此，该工作通过对倍频器的输出进行包络检波，从而根据输出的包络情况判断注入锁定倍频器是否失锁。最后，通过数字控制电路调整注入锁定倍频器的调谐电压，从而建立反馈环路使倍频器保持锁定。虽然该电路具有较好的稳定性和相位噪声特性，但其工作带宽也仅为
11.4%。</p>
<h1 id="方案三采用多个倍频器共同协作的方式产生毫米波宽带信号实现了带宽展宽的效果">方案三：采用多个倍频器共同协作的方式，产生毫米波宽带信号，实现了带宽展宽的效果</h1>
<p><img src="https://pic.zhouyuqian.com/img/20210727194313.png" alt="低频信号源级联多个毫米波倍频器" style="zoom:33%; margin: auto;"></p>
<p>该方案采用多个倍频器共同协作的方式，产生毫米波宽带信号，实现了带宽展宽的效果。</p>
<h2 id="优缺点分析-2">优缺点分析</h2>
<ul>
<li><p>优势：</p>
<p>输入信号不仅工作在低频处，其带宽同样较窄，因而可以设计出极低相位噪声的输入信号。</p></li>
<li><p>缺点：</p>
<p>首先，由于其较为复杂的系统架构，该电路设计困难，容易失败，且因为倍频器数量较多，难以保证不引入额外的相位噪声；</p>
<p>因为采用了此复杂的架构，芯片功耗较大。另一方面，芯片存在低频、高频两个输出端口，通常需要一个多路复用器将两路合并方能使用，而此多路复用器同样需要具备
80% 的带宽, 亦难以实现。</p></li>
</ul>
<h2 id="相关研究成果-2">相关研究成果</h2>
<h3 id="香港科技大学-21-48-ghz-宽带注入锁定频率源">香港科技大学 21-48
GHz 宽带注入锁定频率源</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727194325.png" alt="香港科技大学 21-48 GHz 宽带注入锁定频率源" style="zoom:55%; margin: auto;"></p>
<p>该方案由香港科技大学于 2014 年提出，工作原理如图所示。首先，使用一个
4.5-6.1 GHz
的低频小数分频锁相环产生输入信号；之后，对此信号进行除三除四双模分频，从而第一次展宽信号带宽，且产生正交输出；继而，将此信号注入一个三倍频器，该倍频器使用了一个锁相环来做校正，从而防止失锁；该倍频器的输出再次经过一个三倍频器，完成第二次倍频；最后，该倍频器的输出分别采用一个三倍频器和一个二倍频器对输入信号进行倍频，最终得到了覆盖
21-48 GHz 的毫米波宽带频率源。</p>
<p>从该结构可以看出，整个系统共对输入信号进行了两次带宽展宽。第一次，通过除三除四双模分频器，将输入的
4.5-6.1 GHz 信号转变为 1.1- 2.0 GHz 的信号，带宽从 30.2% 变为
58.1%。第二次，采用输出的三倍频和二倍频，对输入信号进行了不同处理，此时，带宽从
57.7% 变为 80.2%。</p>
<h1 id="各方案性能对比">各方案性能对比</h1>
<table>
<colgroup>
<col style="width: 11%">
<col style="width: 18%">
<col style="width: 15%">
<col style="width: 14%">
<col style="width: 39%">
</colgroup>
<thead>
<tr>
<th>文献</th>
<th>Xilinx ISSCC’18</th>
<th>Univ.Macau ISSCC’19</th>
<th>Virgina Tech JSSC’19</th>
<th>HKUST JSSC’14</th>
</tr>
</thead>
<tbody>
<tr>
<td>实现方式</td>
<td>高频锁相环</td>
<td>高频锁相环</td>
<td>低频信号源+高频倍频器</td>
<td>低频信号源+多个倍频器</td>
</tr>
<tr>
<td>工作带宽 (GHz)</td>
<td>7.4-14</td>
<td>25.4-29.5</td>
<td>26.5-29.7</td>
<td>21-48</td>
</tr>
<tr>
<td>输入频率 (GHz)</td>
<td>无</td>
<td>无</td>
<td>8.8-9.9</td>
<td>4.5-6.1</td>
</tr>
<tr>
<td>输入带宽</td>
<td>无</td>
<td>无</td>
<td>11.4</td>
<td>30.2</td>
</tr>
<tr>
<td>RMS 时钟抖动</td>
<td>54</td>
<td>71</td>
<td>无</td>
<td>1020</td>
</tr>
<tr>
<td>功耗 (mW)</td>
<td>45</td>
<td>10.2</td>
<td>38.6</td>
<td>148.3</td>
</tr>
<tr>
<td>芯片面积 (mm<span class="math inline">\(^2\)</span>)</td>
<td>0.35</td>
<td>0.24</td>
<td>1</td>
<td>2.1</td>
</tr>
<tr>
<td>复杂度</td>
<td>双 VCO</td>
<td>单 VCO</td>
<td>单倍频器</td>
<td>多倍频器</td>
</tr>
<tr>
<td>优点</td>
<td>1. 带宽宽；2. 噪声好；</td>
<td>1. 频率高；2. 功耗低；</td>
<td>1. 频率高；</td>
<td>1. 频率高；2. 带宽宽；3.输入带宽窄；</td>
</tr>
<tr>
<td>问题</td>
<td>1. 工作频率低；2. 多个 VCO；</td>
<td>1. 带宽窄；2. 噪声一般；</td>
<td>1. 带宽窄；2. 功耗高；</td>
<td>1. 结构复杂；2. 功耗大；3. 芯片面积大；4. 噪声差；5. 结构复杂；</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>PLL-CP</title>
    <url>/2020/11/20/PLL-CP/</url>
    <content><![CDATA[<p>电荷泵是锁相环中重要的一个模块，其主要功能是将鉴频鉴相器 (PFD)
输出的时钟相位差值转化为电荷，将其传到环路滤波器，从而产生控制 VCO
的电压。下图是一个电荷泵的工作原理。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727194418.png" alt="image-20201120183435924" style="zoom:50%;"></p>
<span id="more"></span>
<h1 id="工作原理">工作原理</h1>
<p>由两个开关控制的电流源组成电荷泵，这两个开关分别由 PFD 产生的 UP,DOWN
信号控制。电荷泵的平均等效输出电流为： <span class="math display">\[
\overline{I_{out}} = \frac{I_{cp}(\varphi_{ref} - \varphi_{div})}{2\pi}
\]</span> 因此电荷泵的传输函数为： <span class="math display">\[
H_{cp} = \frac{I_{out}}{\Delta \varphi} = \frac{I_{cp}}{2\pi}
\]</span> 即电荷泵的增益为： <span class="math display">\[
K_{cp} = \frac{I_{cp}}{2\pi}
\]</span></p>
<h1 id="常用电荷泵设计">常用电荷泵设计</h1>
<h2 id="漏极开关电荷泵-drain-switching-charge-pump">漏极开关电荷泵
(drain-switching charge pump)</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727194426.png" alt="image-20201120185406410" style="zoom:33%;"></p>
<p>最简单的一种 CP 结构如上图所示，其开关位于电流源 MOS
管的漏极，称为漏极开关电荷泵。不过该结构的电荷泵有很多问题：</p>
<ol type="1">
<li>由于开关直接连接电荷泵的输出端，开关栅极的<strong>时钟信号会通过漏极栅极电容串扰至输出</strong>，注入电荷而造成电荷误差；</li>
<li><strong>电流源 MOS 管的漏极寄生电容会分流电荷信号</strong>。当 DN
开关打开时，电流源 NMOS 管的漏极寄生电容放电直至为地电平；当 DN
开关闭合时，电流源 NMOS
管的漏极寄生电容充电直至为高电平。这个过程中对漏极电容的充放电会分流电荷信号，而造成电荷误差；</li>
<li>由于<strong>漏极电容充放电</strong>的过程存在，使该结构的电荷泵工作速度交慢。</li>
</ol>
<h2 id="电流转向电荷泵-current-sterring-charge-pump">电流转向电荷泵
(current sterring charge pump)</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727194436.png" alt="image-20201120190555706" style="zoom:33%;"></p>
<p>该结构是在漏极开关电荷泵的基础上改进的，加入了一组<strong>反相</strong>信号控制的开光和一个<strong>单位增益的缓冲器</strong>。</p>
<p>优点：</p>
<ol type="1">
<li>单位增益缓冲器的输出端跟踪电荷泵的输出端电位。因此不管开关打开还是闭合，两个电流源
MOS
管的漏极始终通过一组开关或者单位增益缓冲器与电荷泵的输出端相连。因此保持了与输出端一致的电压，这样就不存在开关
MOS 管源级到衬底的电容充放电问题，消除了电荷分流；</li>
<li>由于电流源总可以通过一个开关保持电流的流通，因此电流源一直保持在开启状态，提高了电荷泵开关的速度。<strong>该结构的电荷泵几乎是所有电荷泵结构中速度最快的一种</strong>；</li>
<li>流入电源和地的电流保持恒定，对电源的串扰少。</li>
</ol>
<p>缺点：</p>
<ol type="1">
<li>电流源一直保持在开启状态，存在静态电流，增加了功耗；</li>
<li>开关在漏极，没有解决时钟信号的串扰。</li>
</ol>
<h2 id="源级开关电荷泵-source-switching-charge-pump">源级开关电荷泵
(source-switching charge pump)</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727194446.png" alt="image-20201120200115113" style="zoom:50%;"></p>
<p>该结构将开关置于电流源的源级，称为源级开关电荷泵。</p>
<p>优点：</p>
<ol type="1">
<li>开关管和输出端<strong>隔离</strong>，<strong>没有数字信号对输出信号的串扰问题</strong>；</li>
<li>电流源 MOS
管的漏极始终和输出端连接，没有充放电问题，<strong>避免了电荷分流</strong>；</li>
<li>电流源的漏极和栅极始终保持正常的偏置，且源级阻抗也比较低，因此该电荷泵具有<strong>较高的速度</strong>；</li>
<li>与电流转向电荷泵相比，该结构<strong>没有静态电流损耗</strong>，降低了功耗。</li>
</ol>
<p>因此，源级开关电荷泵是<strong>应用最广泛的电荷泵</strong>。</p>
<h2 id="输出电阻增强电荷泵">输出电阻增强电荷泵</h2>
<p>以上电荷泵的共同问题是 PMOS 和 NMOS
电流源之间的失配，尤其在输出端的电压偏离中心点的时候。例如当输出电压接近地电位时，NMOS
电流源的电流会下降而 PMOS 电流源的电流会增加，而造成电流失配。</p>
<p>一种方法可以使用 Cascode 结构增加电流源输电阻，但由于 Cascode
结构需要较高的电源电压，会减小电荷泵的输出电压范围。另一种方法是通过运算放大器使
UP 和 DOWN 电流相互跟踪。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727194455.png" alt="image-20201121001945923" style="zoom:50%;"></p>
<p>如上图所示，由于运放的负反馈作用，电荷泵的输出端和 M1,M2
的漏极电位相等。这样可以保证 UP 和 DOWN 的电流分别精确跟踪 M1,M2
的电流源。由于流过偏置管 M1,M2 的电流始终是相等的，所以 UP 和 DOWN
的电流也不受输出电压的影响。</p>
<p>该结构需要注意的是要保证电路中的负反馈大于正反馈。该电路中，电荷泵输出端有开关，且大部分时间开关是关断的，所以输出端回路的反馈更弱，因此应将偏置管那一侧接为负反馈。</p>
<h1 id="参考文献">参考文献</h1>
<p>[1] 张刚. CMOS集成锁相环电路设计[M]. 清华大学出版社, 2013.</p>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
      </tags>
  </entry>
  <entry>
    <title>VCO 噪声优化</title>
    <url>/2021/05/20/PLL-noise/</url>
    <content><![CDATA[<h1 id="电感值的选取">电感值的选取</h1>
<p>谐振腔的谐振频率为： <span class="math display">\[
\omega = \frac{1}{\sqrt{LC}}
\]</span> 可以看到谐振频率与电感值和电容值都有关。</p>
<p>电感值可以根据一个经验公式来粗略估计：<span class="math inline">\(L=5/f\)</span>，其中 <span class="math inline">\(L\)</span> 为电感值，单位为 nH，<span class="math inline">\(f\)</span> 为振荡中心频率，单位为
GHz，若振荡器采用互补型结构，则 <span class="math inline">\(L=10/f\)</span>。实际设计时，由于寄生效应的存在，电感值要适当缩小一点。</p>
<p>这里振荡中心频率为 <span class="math inline">\(f=4.8\rm{GHz}\)</span>，选取电感值为 <span class="math inline">\(L=1.025n\)</span>，<span class="math inline">\(Q=15.62\)</span>。其 L-Q
随频率变化的关系如下图所示：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726224430.svg" alt="L-Q-1n">
<figcaption aria-hidden="true">L-Q-1n</figcaption>
</figure>
<blockquote>
<p>之前电感值取得比较大，大约 4.9nH，VCO 的相位噪声很差，只有
<strong>-100dB@1MHz</strong>，换成 1nH
的电感后，在相同的电流下，相噪变为 <strong>-113dB@1MHz</strong>，换成
0.5nH 的电感后，在相同的电流下，相噪变为
<strong>-123dB@1MHz</strong>，</p>
</blockquote>
<blockquote>
<p>仿真的时候发现了一个现象：改变电感的值（Q值几乎没有变），调节电容值，使振荡频率不变，在相同的功耗（电流相同）下，电感的值越小，相噪越好。</p>
<p><strong>猜测：</strong></p>
<p>L-C 振荡器的 Q 值由电感和电容共同决定，而在 CMOS 工艺下，电容的 Q
值比电感的 Q
值大很多，因此在振荡器中，在一定范围内，增大电容值，减小电感值，会增大谐振腔的
Q 值。</p>
<p>谐振腔的品质因数 Q 定义为： <span class="math display">\[
Q= 2\pi\frac{W_s}{W_r}
\]</span> 其中 <span class="math inline">\(W_s\)</span>
为谐振腔中电容和电感存储的总能量，<span class="math inline">\(W_r\)</span> 为每个周期消耗的能量。</p>
<p>高 Q 的系统，也可以用下面的式子来计算 Q： <span class="math display">\[
Q=\frac{f_r}{\Delta f}
\]</span> 其中 <span class="math inline">\(f_r\)</span>
为谐振频率，<span class="math inline">\(\Delta f\)</span> 为带宽。</p>
<p>并联 RLC 电路的品质因数定义为（串联 RLC 电路的 Q 为其倒数）： <span class="math display">\[
Q=R\sqrt{\frac{C}{L}}
\]</span> 在 L-C 振荡器中，<span class="math inline">\(R=R_p = Q_L^2
R_L\)</span>，<span class="math inline">\(Q_L=\omega_0L/R_L\)</span>，<span class="math inline">\(\omega_0 = 1/\sqrt{L_pC_p}\approx
1/\sqrt{LC}\)</span></p>
</blockquote>
<h1 id="负阻管的设计">负阻管的设计</h1>
<p><span class="math display">\[
\left. \begin{matrix} R_p &amp; = &amp; Q\omega L \\ a &amp; = &amp;G_m
\cdot R_p \\ G_m &amp; = &amp; g_m/2 \end{matrix} \right\} \Rightarrow
g_m = \frac{2a}{Q\omega L}
\]</span></p>
<p>为了能够起振，要保证 <span class="math inline">\(a&gt;1\)</span>，通常将 <span class="math inline">\(a\)</span> 设为 <span class="math inline">\(2\sim
3\)</span>，在本设计中取 <span class="math inline">\(a=3\)</span>。根据电感的 Q 和 L，VCO
的工作中心频率为 4.8GHz，可以计算出 <span class="math inline">\(g_m =
14.5\rm{mS}\)</span>。</p>
<p>为了获得最大的截止频率，负阻管的沟道长度取最小值。</p>
<h1 id="尾电流源设计">尾电流源设计</h1>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726224915.svg" alt="VCO-CM">
<figcaption aria-hidden="true">VCO-CM</figcaption>
</figure>
<p>VCO
的尾电流源使用镜像电流源实现，为了降低尾电流源的噪声，在镜像电流源中加入了低通滤波器。一阶
RC 低通滤波器的截止频率为 <span class="math inline">\(\omega =
1/RC\)</span>，为了提高滤波的效果，应该尽可能将 R 和 C 取大，但 R 和 C
过大会占用太多的面积，同时寄生效应也会带来额外的噪声。由于低通滤波器对电阻和电容的精度要求不高，因此可以使用<strong>多晶硅电阻</strong>和
<strong>MOS 电容</strong>。</p>
<h1 id="开关电容阵列设计">开关电容阵列设计</h1>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726225124.svg" alt="ctank">
<figcaption aria-hidden="true">ctank</figcaption>
</figure>
<p>开关电容阵列的电路图如图（a）所示，其中电容值和开关管的尺寸都按二进制指数关系逐步增大。</p>
<p>其中反相器的输入端为开关电容阵列的控制端。当控制电压为高电平时，开关管开启，漏源两端电压被下拉到零，两个串联的电容接入谐振腔；当控制电压为低电平时，开关管关断，漏源两端的电压被上拉到高电平，源漏两端的电阻非常大，从而电容没有接入谐振腔。</p>
<p>图（c）是一个开关电容支路的等效变换，其输入阻抗为： <span class="math display">\[
Z = \frac{2}{j\omega C_0}+R_0=-j\frac{2}{\omega C_0}+R_0
\]</span> 开关管工作在线性区，其漏端电流为： <span class="math display">\[
I_d \approx \mu C_{ox}\frac{W}{L}(V_{gs}-V_{th})V_{ds}
\]</span> 可以得到漏源之间的电阻为： <span class="math display">\[
R_o= \frac{V_{ds}}{I_d} = \frac{1}{\mu C_{ox}\frac{W}{L}(V_{gs}-V_{th})}
\]</span> 电容的 Q 值为： <span class="math display">\[
Q=\frac{2}{\omega C_0 R_0} = \frac{2\mu
C_{ox}\frac{W}{L}(V_{gs}-V_{th})}{\omega C_0}
\]</span> 其中： <span class="math display">\[
C_{p0} \approx \frac{C_0}{2}
\]</span></p>
<p><span class="math display">\[
R_{p0}=Q^2R_0 = \frac{4}{\omega^2 C_0^2 R_0}
\]</span></p>
<p>为了得到高的谐振腔品质因数，必须减小开关管的导通电阻。通过增大开关管的宽长比可以减小导通电阻，但开关管的寄生电容也会增加，使调谐范围减小。同时开关管的栅长取工艺允许的最小尺寸。</p>
<p>由 Q 的表达式可知，减小 <span class="math inline">\(C_0\)</span>
的值也可以提高 Q，但 <span class="math inline">\(C_0\)</span>
不能过小，否则无法覆盖所要的目标频率。</p>
<p>理论上，改变电容阵列的电容接入数量，电容阵列的 Q
值不会改变，但这并不意味着可以随意增加开关的数量。随着开关数量的增加，整个电容阵列的等效电阻
<span class="math inline">\(R_{total}\)</span>
就会减小，会导致谐振腔的等效并联电阻减小，从而恶化谐振腔的品质因数。<strong>一般情况下，开关的数量不会超过
6 个。</strong></p>
<p>实际设计中，开关管及电容的尺寸不一定是严格二进制加权的递增规律，需要观察调谐曲线的交叠大小，进行微调，通常是将调谐曲线交叠调大。</p>
<p>开关电容的原理图如下：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726225149.png" alt="ctank">
<figcaption aria-hidden="true">ctank</figcaption>
</figure>
<p>让电容和开关管的尺寸严格按照二进制来设置时，<span class="math inline">\(C_0 = 35.3f\)</span>，仿真 VCO
的调谐曲线，会发现存在一些间隔较大的曲线，如下图所示：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726225215.svg" alt="vtrun1">
<figcaption aria-hidden="true">vtrun1</figcaption>
</figure>
<p>调整电容和开关管的值，让其略小于 2
的指数倍，同时增大了可变电容的容值，增大了
Kvco，得到新的调谐曲线。保证了每两条相邻的子频带之间的交叠大于 50%。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726225248.svg" alt="vtrun3">
<figcaption aria-hidden="true">vtrun3</figcaption>
</figure>
<h1 id="二次谐波滤波技术">二次谐波滤波技术</h1>
<p>在差分 LC-VCO
中，由于尾电流源的存在使得互耦对共源点与地之间呈现高阻抗，这一高阻抗抑制了<strong>线性区</strong>工作的交叉耦合引起的能量流失。</p>
<p><strong>尾电流源的奇次谐波会在谐振腔中停留，偶次谐波会流通到地。</strong></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210810160636.svg" alt="L2">
<figcaption aria-hidden="true">L2</figcaption>
</figure>
<p>在上图中，尾电流源上并联一个大电容，将尾电流源上的二次谐波处的噪声映入到地，但这会使共源点到地的阻抗进一步减小，因此在尾电流源与负阻管的共源点之间插入一个电感，该电感与负阻管共源点
S 处的寄生电容谐振在二次谐波频率处。</p>
<h1 id="输出-buffer">输出 Buffer</h1>
<p>如果用从 VCO 出来的信号直接驱动后级电路，由于后级电路的电容会影响 VCO
的谐振频率，因此需要使用 buffer 将 VCO 和后级电路隔离开。由于设计的 VCO
工作频率并不是很高，因此使用反相器作为
buffer，电路原理图如下图所示。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726225337.png" alt="buffer">
<figcaption aria-hidden="true">buffer</figcaption>
</figure>
<p>其中 C0 为隔交电容，R0 用于提供直流偏置。</p>
<p>Buffer 的电容会接入 VCO 的谐振腔，因此仿真的时候需要将 VCO 和 buffer
一起仿真。</p>
<h1 id="仿真结果">仿真结果</h1>
<p>控制电压取 0.1V~1.1V 时，VCO 的调谐范围为 4.71GHz~5.06GHz，在 32
条子频带中每两个相邻的子频带之间没有盲区。<span class="math inline">\(K_{VCO}\)</span> 的范围在 30MHz/V~48MHz/V。</p>
<p>在 1MHz 频偏处，整个调谐范围内，相噪范围为 -119dB~-122dB。电流
15mA。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726225420.svg" alt="tran2">
<figcaption aria-hidden="true">tran2</figcaption>
</figure>
<p>上图给出了 VCO
最大频率和最小频率的瞬态波形，两个信号的幅度基本相同，表示整个调谐范围内，VCO
都可以稳定振荡。</p>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>PLL(Phase-locked loop, 锁相环)</title>
    <url>/2020/09/11/PLL/</url>
    <content><![CDATA[<p>锁相环（PLL: Phase-locked
loop）是一种利用反馈（Feedback）控制原理实现的频率及相位的同步技术，其作用是将电路输出的时钟与其外部的参考时钟保持同步。当参考时钟的频率或相位发生改变时，锁相回路会检测到这种变化，并且通过其内部的反馈系统来调节输出频率，直到两者重新同步，这种同步又称为“锁相”（Phase-locked）。</p>
<span id="more"></span>
<h1 id="时钟与振荡电路">时钟与振荡电路</h1>
<p>芯片工作时，通常需要时钟，时钟的周期变化可以通过振荡来产生。振荡电路的形成通常可以分为两类：</p>
<ol type="1">
<li>石英晶体压电效应：电导致晶片的机械变形，而晶片两侧施加机械压力又会产生电，形成振荡。它的谐振频率与晶片的切割方式、几何形状、尺寸有关，可以做得精确，因此其振荡电路可以获得很高的频率稳定度。</li>
<li>电容Capacity的充电放电：LC振荡电路，能够存储电能，而充放电的电流方向是反的，形成振荡，可通过电压等控制振荡电路的频率。</li>
</ol>
<h1 id="pll-与倍频">PLL 与倍频</h1>
<p>由上面两种振荡方式可知，晶体振荡电路频率的稳定度优于 LC
振荡电路，但是晶体振荡电路除了可以使用数字电路分频以外，其频率几乎无法改变，由于成本与工艺限制，其频率无法做到很高。因此芯片中高频时钟就需要一种叫做压控振荡器（Voltage
Controlled
Oscillator）的东西生成了。可压控振荡器也有问题，其频率不够稳定，而且变化时很难快速稳定频率。这就是标准开环系统所出现的问题，解决办法就是接入反馈，使开环系统变成闭环系统，并且加入稳定的基准信号，与反馈比较，以便生成正确的控制。因此，为了将频率锁定在一个固定的期望值，锁相环
PLL 出现了。</p>
<h2 id="pll锁相环电路的概要">PLL(锁相环)电路的概要</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194546.png" alt="Pll">
<figcaption aria-hidden="true">Pll</figcaption>
</figure>
<p>PLL 通常由以下几个部分组成：</p>
<ul>
<li><p>鉴相鉴频器 PFD（Phase Frequency
Detector）：对输入的基准信号（来自频率稳定的晶振）和反馈回路的信号进行频率的比较，输出一个代表两者差异的信号</p></li>
<li><p>低通滤波器 LPF（Low-Pass
Filter）：将PFD中生成的差异信号的高频成分滤除，保留直流部分；</p></li>
<li><p>压控振荡器 VCO（Voltage Controlled
Oscillator）：根据输入电压，输出对应频率的周期信号。利用变容二极管（偏置电压的变化会改变耗尽层的厚度，从而影响电容大小）与电感构成的
LC
谐振电路构成，提高变容二极管的逆向偏压，二极管内耗尽层变大，电容变小，LC
电路的谐振频率提高，反之，降低逆向偏压时，二极管内电容变大，频率降低；</p></li>
<li><p>反馈回路 FL（Feedback Loop）：通常由一个分频器实现。将 VCO
的输出降低到与基准信号相同级别的频率才能在 PFD 中比较；</p></li>
</ul>
<p>PLL 工作的基本原理就是将压控振荡器的输出经过分频后与基准信号输入
PFD，PFD
通过比较这两个信号的频率差，输出一个代表两者差异的信号，再经过低通滤波器转变成一个直流脉冲电压去控制
VCO 使它的频率改变。这样经过一个很短的时间，VCO 的输出就会稳定下来。所以
PLL 并不是直接对晶振进行倍频，而是将频率稳定的晶振作为基准信号，与 PLL
内部振荡电路生成的信号分频后进行比较，使 PLL 输出的信号频率稳定。</p>
<p>假设基准振荡器的频率为 <code>$f_r$</code>，VCO的频率为
<code>$f_o$</code>，在此一电路中，假设 <code>$f_r&gt;f_o$</code>
时，也即是 VCO 的振荡频率 <code>$f_o$</code> 比 <code>$f_r$</code>
低时。此时的相位比较器的输出 PFD 会如下图所示，产生正脉波信号，使 VCO
的振荡器频率提高。相反，如果 <code>$f_r&lt;f_o$</code>
时，会产生负脉波信号。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194547.png" alt="PFD">
<figcaption aria-hidden="true">PFD</figcaption>
</figure>
<p>(此为利用脉波的边缘做二个信号的比较。如果有相位差存在时，便会产生正或负的脉波输出。)</p>
<p>此 PD 脉波信号经过回路滤波器(LoopFilter)的积分，便可以得到直流电压
VR，可以控制 VCO 电路。由于控制电压 VR 的变化，VCO
振荡频率会提高。结果使得
<code>$f_r=f_o$</code>。在两者相位成为一致时，PD
端子会成为高阻抗状态，使 PLL 被锁栓(Lock)。</p>
<h2 id="回路滤波器的选择方法">回路滤波器的选择方法</h2>
<p>回路滤波器的时间常数与 PLL 控制的良否有很大的关系。在基准频率
<code>$f_r$</code> 为 10kHz 时，输往回路滤波器的脉波周期为 0.1ms。</p>
<p>为了保持电压值 VR 而增大回路滤波器的时间常数时，便无法追踪 VCO
的振荡频率的变化。如果时间常数太小时，会在 VR 上出现涟波，使 PLL
的稳定度恶化。</p>
<p>因此，根据经验，回路滤波器的时间常数，选择大约为基准频率的周期 (1/fr)
的数百倍。</p>
<h1 id="reference">Reference</h1>
<ol type="1">
<li><a href="https://blog.csdn.net/u013754317/article/details/52799516">锁相环PLL（Phase
Locked Loop)</a></li>
<li><a href="https://blog.csdn.net/leoufung/article/details/50268031">PLL(锁相环)电路原理</a></li>
<li><a href="https://en.wikipedia.org/wiki/Phase-locked_loop">Phase-locked
loop</a></li>
</ol>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>RISC-V SOC Design (1)</title>
    <url>/2020/03/27/RISC-V-SOC-Design-1/</url>
    <content><![CDATA[<p>使用 vivado blockdesign 搭建，比较直观</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194616.png" alt="ibex_bd">
<figcaption aria-hidden="true">ibex_bd</figcaption>
</figure>
<span id="more"></span>
<h1 id="memory-map">Memory Map</h1>
<p>SOC 搭建参考了 SiFive SOC，因此在 Memory Map
上尽量一致，方便软件移植。</p>
<table>
<colgroup>
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 8%">
<col style="width: 18%">
<col style="width: 37%">
</colgroup>
<thead>
<tr>
<th>Base</th>
<th>Top</th>
<th>Attr.</th>
<th>Description</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x1001_2000</td>
<td>0x1001_2FFF</td>
<td>RW A</td>
<td>GPIO</td>
<td>On-Chip Peripherals</td>
</tr>
<tr>
<td>0x1001_3000</td>
<td>0x1001_3FFF</td>
<td>RW A</td>
<td>UART 0</td>
<td>On-Chip Peripherals</td>
</tr>
<tr>
<td>0x8000_0000</td>
<td>0x8000_FFFF</td>
<td>RWXCA</td>
<td>ITCM</td>
<td>On-Chip Volatile Memory</td>
</tr>
<tr>
<td>0x9000_0000</td>
<td>0x9000_FFFF</td>
<td>RWXCA</td>
<td>DTCM</td>
<td>On-Chip Volatile Memory</td>
</tr>
</tbody>
</table>
<h1 id="设计思路">设计思路</h1>
<h2 id="itcm">ITCM</h2>
<p>一般盘片机在启动时，会将 instruction 从 FLASH 读入片上
RAM，然后程序在片上 RAM
中运行，因此启动时会有一个程序加载的过程，即从片外存储 load
到片上存储，因此这里暂时先用 ITCM 模拟这个过程，启动时，将程序从 ITCM
load 到 DTCM 中，这个过程需要程序配合。</p>
<p>在 load 的过程中，ITCM 在一些时刻会同时被数据总线和指令总线读取，因此
ITCM 使用双端口 RAM。</p>
<h2 id="core">CORE</h2>
<p>这里使用的是 <a href="https://github.com/lowRISC/ibex">ibex</a>，该
core 有单独的数据总线和指令总线，但是为一种私有总线，为了通用，将其转为
AXI4 总线。</p>
]]></content>
      <categories>
        <category>RISC-V</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>RISC-V</tag>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>TSPC</title>
    <url>/2020/11/17/TSPC/</url>
    <content><![CDATA[<p>在 PLL 中，分频器负责将较高频率的 VCO
输出信号转换为与基准频率相近的信号，以进行相位比较。分频器通常消耗 PLL
中 VCO 之后的大部分功率，因此设计出低功耗的分频器有助于降低 PLL
的功耗。在高频中，注入锁定分频器 (injection-locked frequency divider,
ILFD) 和再生分频器 (regenerative dividers) 比较常见。而基于 D 触发器 (D
flip-flop, DFF)
的分频器由于其工作速度的限制通常用于预分频之后的低频率的分频。与高频分频器相比，DFF
分频器具有更低的功耗和更高的锁定范围。在 DFF
中，真<strong>单相时钟控寄存器</strong> (true single phase clock, TSPC)
仅使用单相时钟，避免了时钟重叠的影响。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727232823.png" alt="image-20201118103158126" style="zoom:50%;"></p>
<span id="more"></span>
<h1 id="tspc-基本结构">TSPC 基本结构</h1>
<p>TSPC 的基本结构如上图(a)所示，M1-M3 构成了第一级时钟控制反相器，M4-M6
构成了第二级时钟控制反相器，M7-M9 构成了第二级时钟控制反相器。</p>
<p>当时钟 CLK 由高变低后，第一级时钟控制反相器的输出 A 反相跟随数据输入
D，第二级时钟控制反相器的输出 B 被拉升至电源电平，由于 M9 和 M8 分别被 B
和 CLK 关闭，因此第三级时钟控制反相器的输出 C
维持前一时刻的电平，数据输出 Q 也维持前一时刻电平不变。</p>
<p>当 CLK 由低变高后，D 维持不变，M3 关断，A 点电平不变。若 A 点为高，则
M5 导通，同时 M6、M4 由于 CLK 分别是关断和导通，因此 B
点被拉至地电平；若 A 点为低，M5 关断，M6、M4 由于 CLK
分别为导通和关断，因此 B 被拉至高电平，实现了对 A 的反相跟随。此时 M8
由于 CLK 导通，M7、M9 构成一个反相器，输出 Qn。经过三级反相后，Qn 与 D
反相。</p>
<p>将 M1-M3 看作第一级，M4-M9 看作第二级，在 CLK
为低时，对第一级进行预充电时，第二级的输出保持不变。因此，当 CLK
为高电平时，第一级进行评估，而第二级检测，而当 CLK
为低电平时，第一级进行复位，而第二级进行存储[1]。</p>
<p>由于 TSPC
完全以节点寄生电容来存储电平，因此<strong>不能工作在太低的频率下</strong>，在文献[1]中提到，如果时钟周期过长，则由于亚阈值导通以及源极和漏极结引起的晶体管泄漏会破坏存储状态。在高温下，此问题通常会变得更加严重，需要仔细模拟。根据经验，对于低于100
MHz的时钟速率，需要考虑这些影响。</p>
<h1 id="四分频电路">四分频电路</h1>
<p><img src="https://pic.zhouyuqian.com/img/20210727232839.png" alt="image-20201118111946326" style="zoom:50%;"></p>
<p>文献[2]提出了一个 TSPC 构成的异步四分频电路，如上图所示。其使用 22 nm
FD-SOI CMOS 工艺，其工作电压范围为 0.4V-0.9V，并实现了 100MHz 至 70GHz
的输入频率范围。当以 70GHz 运行时，分频器在 0.9V 电源下仅消耗 393mA
电流，该电路实现了迄今为止[2020]的 TSPC
分频器的最高工作频率，以及最小的面积和最低的电流消耗。</p>
<p>尽管工作在很高的频率，但该电路任然使用的是常规的基带晶体管而非 RF
晶体管，从而减小了电路面积以及寄生电容，从而实现了更快，更高效的电路。NMOS
和 PMOS 晶体管的长宽比分别为 16.7 和 23.9。</p>
<h2 id="仿真">仿真</h2>
<p>TSPC 的电路图如下所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727232857.png" alt="tspc1" style="zoom:75%;"></p>
<p>TestBench 如下所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727232909.png" alt="tspc3_tb" style="zoom:75%;"></p>
<p>输入的时钟摆幅为 600mV，频率为 1GHz，Vdd 为 1.2V，仿真结果如下：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727232752.svg" alt="tspc3_wave">
<figcaption aria-hidden="true">tspc3_wave</figcaption>
</figure>
<p>输入的时钟摆幅为 600mV，频率为 50MHz，Vdd 为 1.2V，TSPC
已经不能正常工作了：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727232753.svg" alt="tspc3_wave_50M">
<figcaption aria-hidden="true">tspc3_wave_50M</figcaption>
</figure>
<p>将输入的时钟摆幅提高到 1.2V，频率为 50MHz，Vdd 为 1.2V时：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727232754.svg" alt="tspc3_wave_50M_600m">
<figcaption aria-hidden="true">tspc3_wave_50M_600m</figcaption>
</figure>
<h1 id="双模分频电路">2/3 双模分频电路</h1>
<p><img src="https://pic.zhouyuqian.com/img/20210727232921.png" alt="image-20201118113039866" style="zoom:35%;"></p>
<p>文献[3]使用 E-TSPC 结构实现了 2/3 双模预分频电路，在 1V
供电下，工作频率达 24 GHz。</p>
<h2 id="分频电路原理">2/3 分频电路原理</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727232935.png" alt="divider23" style="zoom:40%;"></p>
<p>上图(a)是一种三分频电路[4]，这种电路只有三个状态：Q1Q2=00,10,11。如图(b)所示，在
F1 后插入一个或门，当 MC 输入高电平时，相当于 Q1 的输出被屏蔽了，因此
CLK 通过 F2 实现 2 分频；而 MC 输入低电平时，电路效果与图(a)相同，实现 3
分频。</p>
<h2 id="tspc-中嵌入逻辑功能">TSPC 中嵌入逻辑功能</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727232946.svg" alt="TSPC_logic" style="zoom:60%;"></p>
<p>可以在 TSPC
中嵌入逻辑功能，以减小与锁存器相关的延时。其基本的使用如上图所示。</p>
<h1 id="测试">测试</h1>
<ul>
<li><p>Measured sensitivity curves as a function of the input frequency
and the backgate voltages. VBN: NMOS, VBP: PMOS backgate voltage,
respectively.</p>
<p>测量各输入频率下所需要的最小输入电压</p></li>
<li><p>Measured current consumption as a function of the input frequency
and the backgate voltages.</p>
<p>测量电流消耗与输入频率时间的关系</p></li>
<li><p>Measured sensitivity of the self-resonance frequency on the
operation points and the simulated transfer characteristic of the
transistors for multiple backgate bias voltages. The trendlines were
obtained for the whole dataset and their slope may vary once the dataset
is narrowed for a variable.</p>
<p>自谐振频率灵敏度</p></li>
<li><p>Measured phase noise for multiple backgate bias voltages.</p>
<p>相位噪声</p></li>
<li><p>Measured output swing on a 50 Ω load as a function of input
frequency and the backgate voltages.</p>
<p>在50负载下测得的输出摆幅和输入频率的关系</p></li>
</ul>
<h1 id="参考文献">参考文献</h1>
<p>[1] B. Razavi, "TSPC Logic [A Circuit for All Seasons]," in <em>IEEE
Solid-State Circuits Magazine</em>, vol. 8, no. 4, pp. 10-13, Fall 2016,
doi: 10.1109/MSSC.2016.2603228.</p>
<p>[2] Z. Tibenszky, C. Carta and F. Ellinger, "A 0.35 mW 70 GHz
Divide-by-4 TSPC Frequency Divider on 22 nm FD-SOI CMOS Technology,"
<em>2020 IEEE Radio Frequency Integrated Circuits Symposium (RFIC)</em>,
Los Angeles, CA, USA, 2020, pp. 243-246, doi:
10.1109/RFIC49505.2020.9218362.</p>
<p>[3] I. Lawang, A. Tudsorn and S. Tooprakai, "1V High Speed E-TSPC 2/3
Prescalers," <em>2019 5th International Conference on Engineering,
Applied Sciences and Technology (ICEAST)</em>, Luang Prabang, Laos,
2019, pp. 1-4, doi: 10.1109/ICEAST.2019.8802598.</p>
<p>[4] 尹江伟. 应用于OFDM
UWB系统的高速分频器研究与设计[D].复旦大学,2009.</p>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 VSCode 编写 LaTeX — Mac 篇</title>
    <url>/2020/12/09/TexOnVsCode/</url>
    <content><![CDATA[<p><img src="https://pic.zhouyuqian.com/img/20210727195217.png" class="full-image" style="zoom:200%;"></p>
<p>之前在 Mac 上写 LaTex，一直用 Sublime 编写，用 TexPad 编译，TexPad
虽然很好用，界面也很好看，然而它是付费软件，一直用着**版总觉得心里过意不去，就想着替代的方案。</p>
<p>LaTex
可以直接用命令编译，可以写一个脚本，把编译命令放在里面，为了之前写本科毕业论文就是这样做的，然而这样还是不太方便，太
Geek 了。</p>
<p>直到我把文本编辑器从 Sublime 换成 VSCode 后，发现 VSCode
真是太强大了，可以把 LaTex 编写和编译都一起做了，方法如下。</p>
<span id="more"></span>
<p>Windows 环境可以参考 <a href="https://zhuanlan.zhihu.com/p/38178015">使用VSCode编写LaTeX</a>。</p>
<h1 id="安装-latex-环境">安装 LaTex 环境</h1>
<p>阿巴阿巴，这个省略，Windows 可以装 <strong>texlive</strong>，Mac 装
<a href="https://www.tug.org/mactex/">MacTex</a>。</p>
<blockquote>
<p>Mac 可以用 <a href="https://brew.sh/">Homebrew</a> 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask mactex-no-gui</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="安装-vscode-上的-latex-插件">安装 VSCode 上的 LaTex 插件</h1>
<p>安装 <a href="https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop">LaTex
Workshop</a>.</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727195158.png" alt="LaTexWorkshop">
<figcaption aria-hidden="true">LaTexWorkshop</figcaption>
</figure>
<h1 id="编译配置命令">编译配置命令</h1>
<p>打开用户配置文件（在 VSCode 界面下按下
F1，然后键入“setjson”，点击“首选项: 打开设置(JSON)”）：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727195159.png" alt="settings">
<figcaption aria-hidden="true">settings</figcaption>
</figure>
<p>在<strong>中括号内</strong>加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// LaTeX</span></span><br><span class="line"><span class="comment">// 不在保存的时候自动编译</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.latex.autoBuild.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;never&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 编译工具</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.latex.tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 编译命令</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.latex.recipes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xe-&gt;bib-&gt;xe-&gt;xe&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdf-&gt;bib-&gt;pdf-&gt;pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p><em>latex-workshop.latex.tools</em>
下面的是编译工具，<em>latex-workshop.latex.recipes</em>
下面的是编译命令，可以根据需要自行修改，其中第一个 <em>recipes</em> 是
默认的编译命令。</p>
<p>然后就可以进行编译了：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727195200.png" alt="compile">
<figcaption aria-hidden="true">compile</figcaption>
</figure>
<h1 id="配置快捷键">配置快捷键</h1>
<p>打开 <em>keybindings.json</em> 文件（在 VSCode 界面下按下
F1，然后键入“keyboard”，点击“Preference: Open Keyboard
Shortcuts(JSON)”）：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727195201.png" alt="keyboard">
<figcaption aria-hidden="true">keyboard</figcaption>
</figure>
<p>在中括号内加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 前向搜索</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+s&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latex-workshop.synctex&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用默认 recipe 编译</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latex-workshop.build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 终止编译</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+t&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latex-workshop.kill&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 选择其他 recipe 编译</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+e&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latex-workshop.recipes&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>这段的意义是将 Alt+s 绑定到<strong>正向搜索</strong>，将 Alt+b
绑定到<strong>使用默认 recipe 编译</strong>，将 Alt+t
绑定到<strong>终止编译</strong>，将 Alt+e 绑定到<strong>选择其他 recipe
编译</strong>，可以自行更换为适合自己的快捷键，只需修改“key”那一项即可。</p>
<h1 id="配合-skim-正向搜索和逆向搜索">配合 <a href="https://skim-app.sourceforge.io/">Skim</a> 正向搜索和逆向搜索</h1>
<h2 id="安装-skim">安装 Skim</h2>
<p>Mac 上安装 Skim，可以去 <em>sourceforge.net</em> 下载，或者使用 brew
安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install skim</span><br></pre></td></tr></table></figure>
<h2 id="vscode-配置">VSCode 配置</h2>
<p>在用户配置文件 (settings.json) 中加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 使能从 VSCode跳转到 Skim 里相应位置</span></span><br><span class="line"><span class="comment">// external pdf viewer</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.view.pdf.viewer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.view.pdf.external.synctex.command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/local/bin/displayline&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.view.pdf.external.synctex.args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;-r&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;%LINE%&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;%PDF%&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;%TEX%&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使能从 VSCode 中直接打开 Skim</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.view.pdf.external.viewer.command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/local/bin/displayline&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.view.pdf.external.viewer.args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;%PDF%&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<h2 id="skim-配置">Skim 配置</h2>
<p>skim-选项-同步-预设vscode:</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727195202.png" alt="skim">
<figcaption aria-hidden="true">skim</figcaption>
</figure>
<p>然后从 VSCode 跳转到 Skim 使用快捷键
<strong><em>alt+s</em></strong>，Skim 中 PDF
对应的位置会显示一个红点，从 Skim 跳转到 VSCode 使用
<strong><em>command+shift+鼠标左击</em></strong>。</p>
<h1 id="reference">Reference</h1>
<p>[1] <a href="https://blog.csdn.net/weixin_38842968/article/details/89922030">Mac上使用VSCode编辑Latex+Skim跳转预览</a></p>
<p>[2] <a href="https://zhuanlan.zhihu.com/p/38178015">使用VSCode编写LaTeX</a></p>
<p>[3] <a href="https://liam.page/2018/04/24/Working-with-VSCode-on-macOS-configuration-LaTeX-workshop-and-Skim/">在
macOS 上配置 VSCode 与 Skim 的 LaTeX 正反跳转</a></p>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
        <tag>MAC</tag>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 开机自启问题</title>
    <url>/2020/03/11/Ubuntu-18-04-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Ubuntu 18.04 使用 systemctl 命令来替换了 service 和 chkconfig
的功能。主要是开机启动比以前复杂多了。systemd 默认读取
<code>/etc/systemd/system/</code> 下的配置文件，该目录下的文件会链接
<code>/lib/systemd/system/</code> 下的文件。</p>
<span id="more"></span>
<p>执行 <code>ls /lib/systemd/system</code>
可以看到有很多启动脚本，其中就有我们需要的
<code>rc.local.service</code></p>
<p>打开脚本内容（如果没有就创建）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  This file is part of systemd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  systemd is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="comment">#  under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">#  the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="comment">#  (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This unit gets pulled automatically into multi-user.target by</span></span><br><span class="line"><span class="comment"># systemd-rc-local-generator if /etc/rc.local is executable.</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=/etc/rc.local Compatibility</span><br><span class="line">Documentation=man:systemd-rc-local-generator(8)</span><br><span class="line">ConditionFileIsExecutable=/etc/rc.local</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start</span><br><span class="line">TimeoutSec=0</span><br><span class="line">RemainAfterExit=<span class="built_in">yes</span></span><br><span class="line">GuessMainPID=no</span><br></pre></td></tr></table></figure>
<p><strong>一般正常的启动文件主要分成三部分</strong></p>
<blockquote>
<p>[Unit] 段: 启动顺序与依赖关系 [Service] 段:
启动行为,如何启动，启动类型 [Install] 段:
定义如何安装这个配置文件，即怎样做到开机启动</p>
</blockquote>
<p>可以看出，/etc/rc.local 的启动顺序是在网络后面，但是显然它少了
Install 段，也就没有定义如何做到开机启动，所以显然这样配置是无效的。
因此我们就需要在后面帮他加上 [Install] 段:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Install]  </span><br><span class="line">WantedBy=multi-user.target  </span><br><span class="line">Alias=rc-local.service</span><br></pre></td></tr></table></figure>
<p>所以完整的 <code>rc.local.service</code> 文件是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=/etc/rc.local Compatibility</span><br><span class="line">Documentation=man:systemd-rc-local-generator(8)</span><br><span class="line">ConditionFileIsExecutable=/etc/rc.local</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start</span><br><span class="line">TimeoutSec=0</span><br><span class="line">RemainAfterExit=<span class="built_in">yes</span></span><br><span class="line">GuessMainPID=no</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=rc-local.service</span><br></pre></td></tr></table></figure>
<p>这里需要注意一下，ubuntu-18.04 server 版默认是没有 /etc/rc.local
这个文件的，需要自己创建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">touch</span> /etc/rc.local</span><br></pre></td></tr></table></figure>
<p>然后把你需要启动脚本写入 /etc/rc.local
，我们不妨写一些测试的脚本放在里面，以便验证脚本是否生效.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -e</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rc.local</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class="line"><span class="comment"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class="line"><span class="comment"># value on error.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to enable or disable this script just change the execution</span></span><br><span class="line"><span class="comment"># bits.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default this script does nothing.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;看到这行字，说明添加自启动脚本成功。&quot;</span> &gt; /usr/local/test.log</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p>记得给加上执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /etc/rc.local</span><br></pre></td></tr></table></figure>
<p>前面我们说 systemd 默认读取 /etc/systemd/system 下的配置文件,
所以还需要在 /etc/systemd/system 目录下创建软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /lib/systemd/system/rc.local.service /etc/systemd/system/</span><br></pre></td></tr></table></figure>
<p>还有最后一步，启用服务、启动服务并检查状态</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="keyword">enable</span> rc-<span class="keyword">local</span>.service</span><br><span class="line">sudo systemctl <span class="keyword">start</span> rc-<span class="keyword">local</span>.service</span><br><span class="line">sudo systemctl status rc-<span class="keyword">local</span>.service</span><br></pre></td></tr></table></figure>
<p>重启并检查test.log文件</p>
<p><code>cat /usr/local/test.log</code></p>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装 Tensorflow-gpu</title>
    <url>/2020/04/29/Ubuntu-%E5%AE%89%E8%A3%85-Tensorflow-gpu/</url>
    <content><![CDATA[<blockquote>
<p><strong>更正!!!</strong></p>
<p>tensorflow1.14.0 似乎有 bug，在 NVIDIA 2070 super
上运行时会直接把显存占满，导致进程被 kill，换成 tensorflow1.15.3
后就好了，因此最终配置如下：</p>
<table>
<thead>
<tr>
<th style="text-align: left;">Software</th>
<th style="text-align: left;">Version</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">nvidia driver</td>
<td style="text-align: left;">nvidia-440.82</td>
</tr>
<tr>
<td style="text-align: left;">Python</td>
<td style="text-align: left;">3.6.9</td>
</tr>
<tr>
<td style="text-align: left;">tensorflow</td>
<td style="text-align: left;">tensorflow-gpu==1.15.3</td>
</tr>
<tr>
<td style="text-align: left;">cuDNN</td>
<td style="text-align: left;">7.6.4</td>
</tr>
<tr>
<td style="text-align: left;">CUDA</td>
<td style="text-align: left;">10.1(V10.1.243)</td>
</tr>
</tbody>
</table>
</blockquote>
<h1 id="安装-nvidia-显卡驱动">安装 NVIDIA 显卡驱动</h1>
<ol type="1">
<li><p>下载 NVIDIA 显卡对应的<a href="https://nvidiageforcedrivers.com/nvidia-geforce-rtx-2070-super-driver-for-linux/">驱动</a>，下载后的文件格式为
<em>.run</em></p></li>
<li><p>bios 禁用 secure boot，也就是设置为 disable</p>
<p>如果没有禁用 secure boot,会导致 NVIDIA
驱动安装失败，或者不正常。</p></li>
<li><p>禁用 nouveau 开源驱动</p>
<p>编辑 <em>/etc/modprobe.d/blacklist.conf</em> 文件，在最后加入：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">blacklist nouveau</span></span><br></pre></td></tr></table></figure>
<p>由于nouveau是在内核中的，还需要更新一下，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-initramfs -u</span><br></pre></td></tr></table></figure>
<p>之后重启电脑：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>
<p>重启后查看禁用是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>
<p>没有输出代表nouveau被禁用了</p></li>
<li><p>关闭 GUI 界面，进入命令行模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> telinit 3</span><br></pre></td></tr></table></figure></li>
<li><p>安装 NVIDIA 驱动</p>
<p>如果以前安装过 nvidia 驱动，需要卸载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get autoremove –purge <span class="string">&quot;*nvidia*&quot;</span></span><br></pre></td></tr></table></figure>
<p>首先给驱动文件增加可执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+x NVIDIA-Linux-*******.run</span><br></pre></td></tr></table></figure>
<p>然后执行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sh ./NVIDIA-Linux-*******.run -no-opengl-files</span><br></pre></td></tr></table></figure>
<p><strong>安装完成后重启 !!!</strong></p>
<blockquote>
<p><strong>–no-opengl-files</strong> 参数必须加否则会循环登录，也就是
loop login</p>
</blockquote>
<p>参数介绍：</p>
<blockquote>
<p>–no-opengl-files 只安装驱动文件，不安装 OpenGL 文件，这个参数最重要；
–no-x-check 安装驱动时不检查 X服务； –no-nouveau-check 安装驱动时不检查
nouveau； 后面两个参数可不加。</p>
</blockquote></li>
<li><p>最后切换回 GUI 界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> telinit 5</span><br></pre></td></tr></table></figure></li>
</ol>
<p>输入 <code>nvidia-smi</code> 查看驱动安装是否成功</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233030.png" alt="nvidia-smi">
<figcaption aria-hidden="true">nvidia-smi</figcaption>
</figure>
<p><strong>最后我装的是 430.50 版本的驱动</strong></p>
<span id="more"></span>
<h1 id="显示使用核显计算使用独显">显示使用核显，计算使用独显</h1>
<blockquote>
<p>https://forums.developer.nvidia.com/t/ubuntu-18-04-headless-390-intel-igpu-after-prime-select-intel-lost-contact-to-geforce-1050ti/66698</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> prime-select nvidia</span><br></pre></td></tr></table></figure>
<p>add ‘nogpumanager’ kernel parameter</p>
<p>create /etc/X11/xorg.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Section <span class="string">&quot;Device&quot;</span></span><br><span class="line">    Identifier     <span class="string">&quot;intel&quot;</span></span><br><span class="line">    Driver         <span class="string">&quot;modesetting&quot;</span></span><br><span class="line">    BusID          <span class="string">&quot;PCI:0:2:0&quot;</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>
<h1 id="安装-cuda-version-10.0">安装 <a href="https://developer.nvidia.com/cuda-toolkit">CUDA</a> (version
10.0)</h1>
<p><strong>Tensorflow 与 CUDA 有对应关系</strong>，可以参考<a href="https://www.tensorflow.org/install/source#gpu">这里</a>，主要是因为
tensorflow 会调用 <em>usr/local/cuda/lib64</em> 目录下的
<code>.so</code> 文件，我尝试过了，<code>1.14</code>,<code>1.15</code>
版本的 tensorflow 调用的都是 <code>10.0</code> 的 cuda，装错版本会提示
<code>.so</code> 文件找不到</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233031.png" alt="version">
<figcaption aria-hidden="true">version</figcaption>
</figure>
<p>我要装的是 Tensorflow-gpu 1.14.0，因此我安装 CUDA10.0 和 cuDNN7.4</p>
<p>下载 CUDA https://developer.nvidia.com/cuda-toolkit-archive</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233032.png" alt="download">
<figcaption aria-hidden="true">download</figcaption>
</figure>
<p>运行如下命令安装</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">sh</span> cuda_&lt;<span class="keyword">version</span>&gt;_linux.<span class="keyword">run</span></span><br></pre></td></tr></table></figure>
<p>安装过程中会有一些选项，<strong>显卡驱动不要装 !!!</strong>
因为之前已经装过了</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233033.png" alt="installer">
<figcaption aria-hidden="true">installer</figcaption>
</figure>
<p>安装完成输出的 log 会有提示</p>
<p>最后将cuda添加到系统环境中</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">export <span class="title class_">LD_LIBRARY_PATH</span>=<span class="variable">$LD_LIBRARY_PATH</span><span class="symbol">:/usr/local/cuda/lib64</span></span><br><span class="line">export <span class="title class_">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:/usr/local/cuda/bin</span></span><br><span class="line">export <span class="title class_">CUDA_HOME</span>=<span class="variable">$CUDA_HOME</span><span class="symbol">:/usr/local/cuda</span></span><br></pre></td></tr></table></figure>
<p>检查是否安装成功：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvcc -V</span></span><br></pre></td></tr></table></figure>
<h1 id="安装-cudnn-version-7.4.2">安装 cudnn (version 7.4.2)</h1>
<p>下载 <a href="https://developer.nvidia.com/rdp/cudnn-archive#a-collapse742-10">cuDNN
v7.4.2 (Dec 14, 2018), for CUDA 10.0</a></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233034.png" alt="cudnn-download">
<figcaption aria-hidden="true">cudnn-download</figcaption>
</figure>
<p>解压后，会得到一个名为 <em>cuda</em> 的文件夹，将问价拷贝到 cuda
的安装目录下</p>
<p><strong>注意!!! <em>cuda/lib64</em>
里的文件有链接的结构，如下，不能直接 cp，使用 <code>-a</code>
参数可以保持软链接结构</strong></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233035.png" alt="la">
<figcaption aria-hidden="true">la</figcaption>
</figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -a cuda/lib64/libcudnn* /usr/local/cuda-10.0/lib64/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -a cuda/include/cudnn.h /usr/local/cuda-10.0/include/</span><br></pre></td></tr></table></figure>
<p><strong>需要注意下这几个文件的权限！！！</strong></p>
<h1 id="测试-cuda-是否安装成功">测试 CUDA 是否安装成功</h1>
<ol type="1">
<li><p>切换到测试目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/cuda-10.0/samples/1_Utilities/deviceQuery</span><br></pre></td></tr></table></figure></li>
<li><p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> make</span><br></pre></td></tr></table></figure></li>
<li><p>进行测试，运行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./deviceQuery</span><br></pre></td></tr></table></figure>
<p>会看到类似这种结果：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233036.png" alt="deviceQuery">
<figcaption aria-hidden="true">deviceQuery</figcaption>
</figure></li>
</ol>
<h1 id="安装多个版本的-cuda">安装多个版本的 cuda</h1>
<p>因为 cuda
安装目录下是用软链接的方式实现的，因此我们可以安装多个版本的
cuda，只要将软链接链接到对应的 cuda 就行，如下：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233037.png" alt="cuda">
<figcaption aria-hidden="true">cuda</figcaption>
</figure>
<p>使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf cuda <span class="comment"># 删除原来的软链接</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/local/cuda-&lt;version&gt; /usr/local/cuda <span class="comment"># 建立新的软链接</span></span><br></pre></td></tr></table></figure>
<p>注意环境变量的修改，可以将 cuda-<version> 修改为 cuda
这种通用形式</version></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">export <span class="title class_">LD_LIBRARY_PATH</span>=<span class="variable">$LD_LIBRARY_PATH</span><span class="symbol">:/usr/local/cuda/lib64</span></span><br><span class="line">export <span class="title class_">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:/usr/local/cuda/bin</span></span><br><span class="line">export <span class="title class_">CUDA_HOME</span>=<span class="variable">$CUDA_HOME</span><span class="symbol">:/usr/local/cuda</span></span><br></pre></td></tr></table></figure>
<p>最后查看当前的 cuda 版本</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvcc -V</span></span><br></pre></td></tr></table></figure>
<p>如果确实软链接修改成功了，环境变量也改好了，版本依旧没有切换，尝试<strong>重启</strong>一下</p>
<h1 id="安装-tensorflow">安装 tensorflow</h1>
<p>参考<a href="https://www.tensorflow.org/install/pip">使用 pip 安装
TensorFlow</a></p>
<h1 id="坑">坑！！！</h1>
<ol type="1">
<li><p><code>Could not create cudnn handle: CUDNN_STATUS_INTERNAL_ERROR</code></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233038.png" alt="error1">
<figcaption aria-hidden="true">error1</figcaption>
</figure>
<p>这个报错可能是 tensorflow 和 cuda 版本不符合，但如果已经按照<a href="https://www.tensorflow.org/install/source#gpu">推荐列表</a>里的对应关系安装了
tensorflow 和 cuda，任然这样报错就可能是 tensorflow
占用的显存过多，进程直接被系统 kill 了，因此可以对 tensorflow
的显存进行限制。</p>
<blockquote>
<p>参考：http://www.cnblogs.com/darkknightzh/p/6591923.html</p>
</blockquote>
<ul>
<li><p>定量设置显存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=<span class="number">0.7</span>)</span><br><span class="line">sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options)) </span><br></pre></td></tr></table></figure>
<p>在程序开始的地方加上这两行，这样运行TensorFlow程序时，每个使用的GPU中，占用的显存都不超过总显存的0.7。</p></li>
<li><p>按需设置显存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gpu_options = tf.GPUOptions(allow_growth=<span class="literal">True</span>)</span><br><span class="line">sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))   </span><br></pre></td></tr></table></figure>
<p>这样设置以后，程序就会按需占用GPU显存。</p></li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>tensorflow</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装软件备份</title>
    <url>/2020/02/05/Ubuntu%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="shellzsh">shell：zsh</h1>
<ol type="1">
<li><p>安装zsh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install zsh</span><br></pre></td></tr></table></figure></li>
<li><p>查看shell列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure></li>
<li><p>切换shell为zsh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<p><strong>chsh
命令是改变登陆shell，需要重启才能看到效果。</strong></p></li>
<li><p>安装<a href="https://ohmyz.sh/">oh-my-zsh</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p><del>安装oh-my-zsh插件</del></p>
<ul>
<li><p>git # 自带</p></li>
<li><p>extract # 自带</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">plugins=( [plugins...] extract) <span class="comment"># 修改~/.zshrc</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://github.com/wting/autojump">autojump</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install autojump <span class="comment"># 安装</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">plugins=( [plugins...] autojump) <span class="comment"># 修改~/.zshrc</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">plugins=( [plugins...] zsh-autosuggestions) <span class="comment"># 修改~/.zshrc</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">plugins=( [plugins...] zsh-syntax-highlighting) <span class="comment"># 修改~/.zshrc</span></span><br></pre></td></tr></table></figure></li>
<li><p>sublime</p></li>
</ul></li>
<li><p>安装oh-my-zsh插件 （new）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install autojump</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/ZSH_THEME=&quot;robbyrussell&quot;/ZSH_THEME=&quot;ys&quot;/g&#x27;</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/plugins=(git)/plugins=(git extract autojump zsh-autosuggestions zsh-syntax-highlighting)/g&#x27;</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="markdown编辑器typaro">MarkDown编辑器：<a href="https://typora.io/">Typaro</a></h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># or run:</span></span><br><span class="line"><span class="comment"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span></span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># add Typora&#x27;s repository</span></span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&#x27;deb https://typora.io/linux ./&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># install typora</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install typora</span><br></pre></td></tr></table></figure>
<h1 id="中文输入法搜狗输入法">中文输入法：搜狗输入法</h1>
<blockquote>
<p>reference
https://blog.csdn.net/lupengCSDN/article/details/80279177</p>
</blockquote>
<ol type="1">
<li><p>首先，安装Fcitx输入框架</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install fcitx</span><br></pre></td></tr></table></figure></li>
<li><p>安装 <a href="https://pinyin.sogou.com/linux/?r=pinyin">搜狗拼音</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg -i sogou.deb </span><br></pre></td></tr></table></figure>
<p>如果遇到依赖问题，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -f</span><br></pre></td></tr></table></figure>
<p>后，重新安装。</p></li>
</ol>
<p><strong>乱码问题</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fcitx -r <span class="comment"># 重启fcitx框架</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pidof fcitx|xargs <span class="built_in">kill</span></span><br><span class="line">fcitx &amp;</span><br><span class="line">sogou-qimpanel &amp;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.config &amp;&amp; <span class="built_in">rm</span> -rf SogouPY* sogou*</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p><code>ctrl</code> +<code>space</code>切换两次输入法</p>
<h1 id="文本编辑器sublime-text-3">文本编辑器：<a href="https://www.sublimetext.com/docs/3/linux_repositories.html">sublime
text 3</a></h1>
<p>Install the GPG key:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | <span class="built_in">sudo</span> apt-key add -</span><br></pre></td></tr></table></figure>
<p>Ensure apt is set up to work with https sources:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install apt-transport-https</span><br></pre></td></tr></table></figure>
<p>Select the channel to use:</p>
<ul>
<li><p>Stable</p>
<p><code>echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list</code></p></li>
<li><p>Dev</p>
<p><code>echo "deb https://download.sublimetext.com/ apt/dev/" | sudo tee /etc/apt/sources.list.d/sublime-text.list</code></p></li>
</ul>
<p>Update apt sources and install Sublime Text</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install sublime-text</span><br></pre></td></tr></table></figure>
<p>在<code>~/.zshrc</code>
<code>plugins</code>里面添加<code>sublime</code>插件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>=( [plugins...] sublime) <span class="comment"># 修改~/.zshrc</span></span><br></pre></td></tr></table></figure>
<p>之后就可以用<code>subl</code>启动 sublime text 3 了</p>
<h1 id="实时监控网速netspeed">实时监控网速：NetSpeed</h1>
<p>直接在<code>Ubuntu Software</code>里面搜索安装。</p>
<h1 id="美化">美化</h1>
<p>Ubuntu 18.04 LTS与Ubuntu 16.04
LTS默认使用的桌面不一样，18.04为gnome3。</p>
<h2 id="安装gnome-tweak-tool"><del>安装gnome-tweak-tool</del></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install gnome-tweak-tool</span><br></pre></td></tr></table></figure>
<p>安装gnome-shell</p>
<blockquote>
<p>参考http://ubuntuhandbook.org/index.php/2017/05/enable-shell-theme-in-gnome-tweak-tool-in-ubuntu/</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure>
<p>拓展：</p>
<p><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">dash to
dock</a> 优化 Ubuntu 默认的 dock</p>
<p><a href="https://extensions.gnome.org/extension/19/user-themes/">User
Themes</a> 自定义 shell 主题</p>
<p><a href="https://extensions.gnome.org/extension/97/coverflow-alt-tab/">Coverflow
Alt-Tab</a> 优化 Ubuntu 默认窗口切换动作</p>
<p><em><a href="https://extensions.gnome.org/extension/1250/gnome-global-application-menu/">Gnome
Global Application Menu</a> 将当前程序的菜单项提取到状态栏</em></p>
<p><a href="https://extensions.gnome.org/extension/104/netspeed/">NetSpeed</a>
显示网速插件</p>
<p><a href="https://extensions.gnome.org/extension/779/clipboard-indicator/">Clipboard
Indicator</a> 提供剪切板历史记录功能</p>
<p><em><a href="https://extensions.gnome.org/extension/442/drop-down-terminal/">Drop
Down Terminal</a> 可以从屏幕上快速弹出一个终端</em></p>
<p><a href="https://extensions.gnome.org/extension/72/recent-items/">Recent
Items</a> 快速打开最近打开过的文件</p>
<p><a href="https://extensions.gnome.org/extension/8/places-status-indicator/">Places
Status Indicator</a> 利用下拉菜单快速打开驱动器上的常用位置</p>
<p><em><a href="https://extensions.gnome.org/extension/885/dynamic-top-bar/">Dynamic
Top Bar</a> 动态调整状态栏透明度</em></p>
<p><a href="https://extensions.gnome.org/extension/545/hide-top-bar/">Hide top
bar</a> 隐藏顶栏, 可以设置为鼠标靠近屏幕上边沿时显示顶栏</p>
<p><a href="Top%20Panel%20Workspace%20Scroll">Top Panel Workspace
Scroll</a> 快速切换工作区</p>
<p><a href="https://extensions.gnome.org/extension/1015/gravatar/">Gravatar</a>
把你的 Ubuntu 用户头像设置成你的 Gravatar 头像.</p>
<p><a href="https://extensions.gnome.org/extension/1031/topicons/">TopIcons
Plus</a> 将传统托盘图标移动到顶部面板 (Wine 程序救星)</p>
<p>按下 <code>Alt</code> + <code>F2</code>,输入 <code>r</code>，回车重启
gnome。</p>
<h2 id="主题图标">主题&amp;图标</h2>
<p>我比较喜欢的是</p>
<ul>
<li><a href="https://github.com/anmoljagetia/Flatabulous">Flatabulous</a></li>
<li><a href="https://github.com/horst3180/arc-theme">arc-theme</a></li>
<li><a href="https://github.com/daniruiz/flat-remix-gnome">flat-remix-gnome</a></li>
</ul>
<h2 id="ubuntu-times-kde">Ubuntu <span class="math inline">\(\times\)</span> KDE</h2>
<h3 id="安装-kde">安装 KDE</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install kubuntu-desktop</span><br></pre></td></tr></table></figure>
<p>一路 OK，<code>Default display manager</code> 选
<code>sddm</code>，然后重启。</p>
<h3 id="美化-1">美化</h3>
<p>监视器：<a href="https://github.com/cjbassi/gotop">gotop</a></p>
<p>终端：<a href="https://konsole.kde.org/">konsole</a></p>
<p>主题：<a href="https://github.com/vinceliuice/Orchis-kde">Orchis-kde</a></p>
<h1 id="设置默认桌面环境">设置默认桌面环境</h1>
<p>可用的桌面环境位于 <em>/usr/share/xsessions</em>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> /usr/share/xsessions</span><br><span class="line">ubuntu.desktop  xfce.desktop  xubuntu.desktop</span><br></pre></td></tr></table></figure>
<p>为用户指定默认会话，在文件
<em>/var/lib/AccountsService/users/&lt;username&gt;</em> 中修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[User]</span><br><span class="line">XSession=xubuntu</span><br></pre></td></tr></table></figure>
<h1 id="关闭图形化界面">关闭图形化界面</h1>
<blockquote>
<p>参考 <a href="https://dslztx.github.io/blog/2017/08/27/Ubuntu桌面版关闭GUI环境/">Ubuntu桌面版关闭GUI环境</a></p>
</blockquote>
<h2 id="一持久关闭"><strong>一、持久关闭</strong></h2>
<p>查看当前的默认目标:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl get-default</span><br></pre></td></tr></table></figure>
<p>执行以下命令，持久关闭Ubuntu桌面版的GUI环境（通过<code>Ctrl+Alt+F1-F6</code>快捷键进入命令行界面）：</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="built_in">set-default</span> <span class="string">multi-user</span>.<span class="string">target</span></span><br></pre></td></tr></table></figure>
<p>执行以下命令，持久开启Ubuntu桌面版的GUI环境（通过<code>Ctrl+Alt+F7</code>快捷键进入GUI界面）：</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="built_in">set-default</span> <span class="string">graphical</span>.<span class="string">target</span></span><br></pre></td></tr></table></figure>
<h2 id="二临时关闭"><strong>二、临时关闭</strong></h2>
<p>执行以下命令，临时关闭Ubuntu桌面版的GUI环境：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure>
<p>执行以下命令，临时开启Ubuntu桌面版的GUI环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service lightdm start</span><br></pre></td></tr></table></figure>
<p>参考文献：
[1]https://askubuntu.com/questions/800239/how-to-disable-lightdmdisplay-manager-on-ubuntu-16-0-4-lts
[2]https://askubuntu.com/questions/365719/i-have-to-restart-lightdm-after-run</p>
<blockquote>
<p>PS：</p>
<p>以上方法适用于 Ubuntu 和 Centos 7</p>
<p>Centos 6 使用如下方法：</p>
<ol type="1">
<li><h2 id="临时关闭"><strong>临时关闭</strong></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">init 3 <span class="comment"># 临时关闭图形界面（XServer服务也会关闭）</span></span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 再次开启图形界面用下面其中一个命令</span></span><br><span class="line"><span class="attribute">init</span> <span class="number">5</span></span><br><span class="line"><span class="attribute">startx</span></span><br></pre></td></tr></table></figure></li>
<li><h2 id="开机关闭">开机关闭</h2>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/i</span>nittab</span><br></pre></td></tr></table></figure>
<p>将</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="attribute">id:</span><span class="string">5:initdefault</span>:</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="attribute">id:</span><span class="string">3:initdefault</span>:</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h1 id="增加-swap-分区">增加 Swap 分区</h1>
<blockquote>
<p>Ref:</p>
<p><a href="https://xilou.info/p/120">pip install Killed
使用pip安装python包时因内存不足被系统kill掉导致安装失败</a></p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-16-04">How
To Add Swap Space on Ubuntu 16.04</a></p>
</blockquote>
<ol type="1">
<li><p>查看 swap 状态</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> swapon</span><br><span class="line">NAME      <span class="built_in">TYPE</span> SIZE USED PRIO</span><br><span class="line">/swapfile file  <span class="number">16</span>G <span class="number">177</span>M   <span class="literal">-2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> free <span class="literal">-h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           <span class="number">31</span><span class="built_in">Gi</span>       <span class="number">278</span><span class="built_in">Mi</span>        <span class="number">30</span><span class="built_in">Gi</span>       <span class="number">0.0</span>Ki       <span class="number">399</span><span class="built_in">Mi</span>        <span class="number">30</span><span class="built_in">Gi</span></span><br><span class="line">Swap:          <span class="number">15</span><span class="built_in">Gi</span>       <span class="number">176</span><span class="built_in">Mi</span>        <span class="number">15</span><span class="built_in">Gi</span></span><br></pre></td></tr></table></figure></li>
<li><p>禁用 swap 功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> swapoff /swapfile</span><br></pre></td></tr></table></figure>
<p>这个命令执行之后，如果你用 <code>free -h</code>
命令查看的话会发现swap分区的大小变为了0。</p></li>
<li><p>增加 /swapfile 的大小：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1M count=16384 oflag=append conv=notrunc</span><br></pre></td></tr></table></figure>
<p>这个命令会在现有的/swapfile后面追加16GB，加上之前的16GB的swap分区，现在共有32个GB的swap分区了。</p></li>
<li><p>设置这个文件为swap分区的挂载点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mkswap /swapfile</span><br></pre></td></tr></table></figure></li>
<li><p>再次启用swap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> swapon /swapfile</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="使用-screen-管理你的远程会话">使用 screen 管理你的远程会话</h1>
<ol type="1">
<li><p>新建screen会话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ screen</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ screen + <span class="built_in">command</span></span><br></pre></td></tr></table></figure></li>
<li><p>在已有screen会话中创建新的窗口</p>
<p><code>Ctrl</code>+<code>a</code> <code>c</code></p>
<p>Ctrl键+a键，之后再按下c键，screen
在该会话内生成一个新的窗口并切换到该窗口。</p></li>
<li><p>detached会话</p>
<p><code>C-a</code> <code>d</code></p></li>
<li><p>查看会话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -<span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li>
<li><p>恢复会话</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">screen -r <span class="tag">&lt;<span class="name">screen_pid</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>清除dead会话</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">screen -wipe</span></span><br></pre></td></tr></table></figure></li>
<li><p>more</p>
<p>C-a w 显示所有窗口列表 C-a C-a 切换到之前显示的窗口 C-a c
创建一个新的运行shell的窗口并切换到该窗口 C-a n 切换到下一个窗口 C-a p
切换到前一个窗口(与C-a n相对) C-a 0..9 切换到窗口0..9 C-a a 发送
C-a到当前窗口 C-a d 暂时断开screen会话 C-a k 杀掉当前窗口</p></li>
</ol>
<h1 id="代替screentmux">代替screen：tmux</h1>
<blockquote>
<p>https://www.ruanyifeng.com/blog/2019/10/tmux.html</p>
</blockquote>
<h1 id="监测cpu温度sensors">监测CPU温度：sensors</h1>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install lm-sensors</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">watch</span> -n <span class="number">2</span> sensors</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-n 2 表示每隔两秒刷新一次</p>
</blockquote>
<h1 id="minidlna"><a href="https://help.ubuntu.com/community/MiniDLNA">MiniDLNA</a></h1>
<blockquote>
<p>还没装好</p>
</blockquote>
<h1 id="samba">Samba</h1>
<h1 id="ubuntu下-firefox-无法观看视频的解决">Ubuntu下 firefox
无法观看视频的解决</h1>
<p>提示缺少 flash
插件，此举解决的是html5的视频播放问题，flash不管了，谁还用flash啊。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install ffmpeg</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>基于FPGA的VGA控制器</title>
    <url>/2018/01/21/VGA-controller/</url>
    <content><![CDATA[<h2 id="目标">目标</h2>
<p>​
设计一个基于FPGA的VGA控制器，可以显示640*480的图片，为下一步学习摄像头做准备。</p>
<blockquote>
<p>硬件平台：Basys 3 开发板</p>
</blockquote>
<span id="more"></span>
<h2 id="原理">原理</h2>
<p>​
标准15针VGA接口共有五个信号接口，如下表所示，其中hsync、vsync为行同步和场同步信号，RGB为模拟信号。</p>
<table>
<thead>
<tr>
<th>信号名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>hsync</td>
<td>行同步信号</td>
</tr>
<tr>
<td>vsync</td>
<td>场同步信号</td>
</tr>
<tr>
<td>R</td>
<td>红色信号</td>
</tr>
<tr>
<td>G</td>
<td>绿色信号</td>
</tr>
<tr>
<td>B</td>
<td>蓝色信号</td>
</tr>
</tbody>
</table>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233440.jpg" title="行扫描时序" alt="行扫描">
<figcaption aria-hidden="true">行扫描</figcaption>
</figure>
<blockquote>
<p>行扫描时序</p>
</blockquote>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233441.jpg" title="场扫描" alt="场扫描">
<figcaption aria-hidden="true">场扫描</figcaption>
</figure>
<blockquote>
<p>场扫描时序</p>
</blockquote>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233442.jpg" title="VGA时序图" alt="VGA时序图">
<figcaption aria-hidden="true">VGA时序图</figcaption>
</figure>
<blockquote>
<p>VGA时序图</p>
</blockquote>
<h2 id="设计">设计</h2>
<p>整个电路分为这几个部分：</p>
<ul>
<li>VGA控制器</li>
<li>图像控制器</li>
<li>ROM存储</li>
</ul>
<ol type="1">
<li><p>首先是VGA控制器部分，这部分产生行同步信号和场同步信号；</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> vga_sync(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> clk,reset,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> hsync,vsync,video_on,p_tick,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">9</span>:<span class="number">0</span>] pixel_x,pixel_y,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">18</span>:<span class="number">0</span>] addr</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义常数</span></span><br><span class="line">    <span class="comment">//VGA 640 * 480 同步参数</span></span><br><span class="line">    <span class="keyword">localparam</span> HD = <span class="number">640</span>;	<span class="comment">//水平显示区域</span></span><br><span class="line">    <span class="keyword">localparam</span> HF = <span class="number">48</span>;		<span class="comment">//水平扫描左边界</span></span><br><span class="line">    <span class="keyword">localparam</span> HB = <span class="number">16</span>;		<span class="comment">//水平扫描右边界</span></span><br><span class="line">    <span class="keyword">localparam</span> HR = <span class="number">96</span>;		<span class="comment">//水平折回区</span></span><br><span class="line">    <span class="keyword">localparam</span> VD = <span class="number">480</span>;	<span class="comment">//垂直显示区域</span></span><br><span class="line">    <span class="keyword">localparam</span> VF = <span class="number">10</span>;		<span class="comment">//垂直扫描顶部边界</span></span><br><span class="line">    <span class="keyword">localparam</span> VB = <span class="number">33</span>;		<span class="comment">//垂直扫描底部边界</span></span><br><span class="line">    <span class="keyword">localparam</span> VR = <span class="number">2</span>;		<span class="comment">//垂直折回区</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//模4计数器</span></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] mod4_reg;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] mod4_next;</span><br><span class="line">    <span class="comment">//同步计数器</span></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">9</span>:<span class="number">0</span>] h_count_reg,h_count_next;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">9</span>:<span class="number">0</span>] v_count_reg,v_count_next;</span><br><span class="line">    <span class="comment">//输出缓冲器</span></span><br><span class="line">    <span class="keyword">reg</span> v_sync_reg,h_sync_reg;</span><br><span class="line">    <span class="keyword">wire</span> v_sync_next,h_sync_next;</span><br><span class="line">    <span class="comment">//状态信号</span></span><br><span class="line">    <span class="keyword">wire</span> h_end,v_end,pixel_tick,addr_end;</span><br><span class="line">    <span class="comment">//地址输出缓冲器</span></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">18</span>:<span class="number">0</span>] addr_reg;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">18</span>:<span class="number">0</span>] addr_next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// reset</span></span><br><span class="line">            mod4_reg &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            v_count_reg &lt;= <span class="number">0</span>;</span><br><span class="line">            h_count_reg &lt;= <span class="number">0</span>;</span><br><span class="line">            v_sync_reg &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            h_sync_reg &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            addr_reg &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            mod4_reg &lt;= mod4_next;</span><br><span class="line">            v_count_reg &lt;= v_count_next;</span><br><span class="line">            h_count_reg &lt;= h_count_next;</span><br><span class="line">            v_sync_reg &lt;= v_sync_next;</span><br><span class="line">            h_sync_reg &lt;= h_sync_next;</span><br><span class="line">            addr_reg &lt;= addr_next;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//模4计数器产生25MHz时钟使能信号</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// reset</span></span><br><span class="line">            mod4_next &lt;= <span class="number">2&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            mod4_next &lt;= mod4_reg + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">// assign mod4_next = mod4_reg + 1;</span></span><br><span class="line">    <span class="keyword">assign</span> pixel_tick = (mod4_reg == <span class="number">2&#x27;b11</span>)&amp;&amp;(!clk);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态信号</span></span><br><span class="line">    <span class="comment">//水平扫描结束信号（799）</span></span><br><span class="line">    <span class="keyword">assign</span> h_end = (h_count_reg==(HD+HF+HB+HR-<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//垂直扫描计数器结束信号</span></span><br><span class="line">    <span class="keyword">assign</span> v_end = (v_count_reg==(VD+VF+VB+VR-<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//地址结束信号</span></span><br><span class="line">    <span class="keyword">assign</span> addr_end = (addr_reg==(HD*VD-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//水平同步扫描模800计数器下一状态</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (pixel_tick) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (h_end) <span class="keyword">begin</span></span><br><span class="line">                h_count_next = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                h_count_next = h_count_reg + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            h_count_next = h_count_reg;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//垂直同步扫描模525计数器新下一状态</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (pixel_tick &amp;&amp; h_end) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (v_end) <span class="keyword">begin</span></span><br><span class="line">                v_count_next = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                v_count_next = v_count_reg + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            v_count_next = v_count_reg;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址下一个状态</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (pixel_tick) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (addr_end) <span class="keyword">begin</span></span><br><span class="line">                addr_next = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span>(video_on) <span class="keyword">begin</span></span><br><span class="line">                addr_next = addr_reg + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                addr_next = addr_reg;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            addr_next = addr_reg;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步缓冲器</span></span><br><span class="line">    <span class="comment">//h_sync_next 信号在计数器数值为656和751时赋值</span></span><br><span class="line">    <span class="keyword">assign</span> h_sync_next = (h_count_reg &gt;= (HD+HB)&amp;&amp;h_count_reg &lt;= (HD+HB+HR-<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//v_sync_next 信号在计数器数值为490和491时赋值</span></span><br><span class="line">    <span class="keyword">assign</span> v_sync_next = (v_count_reg &gt;= (VD+VB)&amp;&amp;v_count_reg &lt;= (VD+VB+VR-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生video_on 信号</span></span><br><span class="line">    <span class="keyword">assign</span> video_on = (h_count_reg &lt; HD) &amp;&amp; (v_count_reg &lt; VD);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">assign</span> hsync = h_sync_reg;</span><br><span class="line">    <span class="keyword">assign</span> vsync = v_sync_reg;</span><br><span class="line">    <span class="keyword">assign</span> pixel_x = h_count_reg;</span><br><span class="line">    <span class="keyword">assign</span> pixel_y = v_count_reg;</span><br><span class="line">    <span class="keyword">assign</span> p_tick = pixel_tick;</span><br><span class="line">    <span class="keyword">assign</span> addr = addr_reg;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>​</p></li>
<li><p>然后是图像控制部分；</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> vga_display</span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">input</span> clk,reset,</span><br><span class="line">        <span class="keyword">input</span> p_tick,</span><br><span class="line">        <span class="keyword">input</span> [<span class="number">9</span>:<span class="number">0</span>] pixel_x,pixel_y,</span><br><span class="line">        <span class="keyword">input</span> video_on,</span><br><span class="line">        <span class="keyword">input</span> [<span class="number">11</span>:<span class="number">0</span>] rgb_in,</span><br><span class="line">        <span class="keyword">output</span> [<span class="number">14</span>:<span class="number">0</span>] addr_out,</span><br><span class="line">        <span class="keyword">output</span> [<span class="number">11</span>:<span class="number">0</span>] rgb_out</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parameter</span> DH = <span class="number">150</span>, DV = <span class="number">150</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">14</span>:<span class="number">0</span>] addr_reg,addr_next;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">11</span>:<span class="number">0</span>] rgb_reg,rgb_next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> pic_en = ((pixel_x &gt;= <span class="number">0</span> &amp;&amp; pixel_x &lt; DH) &amp;&amp; (pixel_y &gt;= <span class="number">0</span> &amp;&amp; pixel_y &lt; DV));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// reset</span></span><br><span class="line">            addr_reg &lt;= <span class="number">15&#x27;b0</span>;</span><br><span class="line">            rgb_reg &lt;= <span class="number">12&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            addr_reg &lt;= addr_next;</span><br><span class="line">            rgb_reg &lt;= rgb_next;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (p_tick) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (addr_reg == DH * DV - <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">                addr_next = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (pic_en) <span class="keyword">begin</span></span><br><span class="line">                addr_next = addr_reg + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                addr_next = addr_reg;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            addr_next = addr_reg;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (pic_en) <span class="keyword">begin</span></span><br><span class="line">            rgb_next = rgb_in;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            rgb_next = <span class="number">12&#x27;b0000_1111_1111</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> addr_out = addr_reg;</span><br><span class="line">    <span class="keyword">assign</span> rgb_out = (video_on)?rgb_reg:<span class="number">12&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>​</p></li>
<li><p>最后ROM储存。</p>
<p>这部分调用了Xilinx官方的IP，在IP Catalog 中选择Block Memory
Generator，</p>
<ol type="1">
<li><p>首先在Basis里选择Memory Type为Single Port ROM；</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233443.png" alt="ROM1">
<figcaption aria-hidden="true">ROM1</figcaption>
</figure></li>
<li><p>然后在Port A Options
里设置数据宽度和深度，因为Basys3上的VGA是RGB444格式的，所以数据宽度设为12位，深度可以理解为像素数，本来是想显示640*480的图片的，但Basys3上的RAM容量不够，所以就显示的150*150的图片,则深度为22500（150*150），不需要使能，所以Enable
Port Type设为Always Enable；</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233444.png" alt="ROM2">
<figcaption aria-hidden="true">ROM2</figcaption>
</figure></li>
<li><p>Other Options里，装载 .coe文件。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233445.png" alt="ROM3">
<figcaption aria-hidden="true">ROM3</figcaption>
</figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233446.png" alt="ROM4">
<figcaption aria-hidden="true">ROM4</figcaption>
</figure></li>
<li><p>顶层文件</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> VGA_display_pictures_top</span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">input</span> clk,reset,</span><br><span class="line">        <span class="keyword">output</span> [<span class="number">11</span>:<span class="number">0</span>] rgb_data,</span><br><span class="line">        <span class="keyword">output</span> hsync,vsync</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//信号声明</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">14</span>:<span class="number">0</span>] addr;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">11</span>:<span class="number">0</span>] rom_data;		<span class="comment">//rom输出rgb信号</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">9</span>:<span class="number">0</span>] pixel_x,pixel_y;</span><br><span class="line">    <span class="keyword">wire</span> video_on;</span><br><span class="line"></span><br><span class="line">    vga_sync U_vga_sync</span><br><span class="line">    (</span><br><span class="line">        <span class="variable">.clk</span>(clk),</span><br><span class="line">        <span class="variable">.reset</span>(reset),</span><br><span class="line">        <span class="variable">.hsync</span>(hsync),</span><br><span class="line">        <span class="variable">.vsync</span>(vsync),</span><br><span class="line">        <span class="variable">.pixel_x</span>(pixel_x),</span><br><span class="line">        <span class="variable">.pixel_y</span>(pixel_y),</span><br><span class="line">        <span class="variable">.video_on</span>(video_on),</span><br><span class="line">        <span class="variable">.p_tick</span>(p_tick)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    vga_display U_vga_display</span><br><span class="line">    (</span><br><span class="line">        <span class="variable">.clk</span>(clk),</span><br><span class="line">        <span class="variable">.reset</span>(reset),</span><br><span class="line">        <span class="variable">.pixel_x</span>(pixel_x),</span><br><span class="line">        <span class="variable">.pixel_y</span>(pixel_y),</span><br><span class="line">        <span class="variable">.rgb_in</span>(rom_data),</span><br><span class="line">        <span class="variable">.rgb_out</span>(rgb_data),</span><br><span class="line">        <span class="variable">.addr_out</span>(addr),</span><br><span class="line">        <span class="variable">.video_on</span>(video_on),</span><br><span class="line">        <span class="variable">.p_tick</span>(p_tick)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    vga_picture vga_picture</span><br><span class="line">    (</span><br><span class="line">        <span class="variable">.clka</span>(clk),</span><br><span class="line">        <span class="variable">.addra</span>(addr),</span><br><span class="line">        <span class="variable">.douta</span>(rom_data)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>整体连线图</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233447.png" alt="整体连线图">
<figcaption aria-hidden="true">整体连线图</figcaption>
</figure>
<h2 id="总结">总结</h2>
<ul>
<li>为了防止自己忘记，所以写下来；</li>
<li>暂时先写这么多，以后再补充。</li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>verilog</tag>
        <tag>项目</tag>
        <tag>VGA</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware Fusion 上为虚拟机设置静态 IP</title>
    <url>/2020/12/17/VMwareFusionStaticIP/</url>
    <content><![CDATA[<p>Mac 上的 VMware Fusion 设置静态 IP 没有 Windows
上那么方便，记录一下设置过程。</p>
<p>建议设置静态 IP 后配合<a href="https://zhouyuqian.com/2020/04/25/%E8%AE%BE%E7%BD%AEssh%E9%80%9A%E8%BF%87%E7%A7%98%E9%92%A5%E7%99%BB%E5%BD%95/">秘钥登录</a>使用。</p>
<span id="more"></span>
<h1 id="设置-vm-虚拟机对应的静态-ip">设置 VM 虚拟机对应的静态 IP</h1>
<p>编辑文件
<em>/Library/Preferences/VMware Fusion/vmnet8/dhcpd.conf</em>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /Library/Preferences/VMware\ Fusion/vmnet8/dhcpd.conf</span><br></pre></td></tr></table></figure>
<p>在
<code>####### VMNET DHCP Configuration. End of "DO NOT MODIFY SECTION" #######</code>
这一行后面添加下面内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">host RHEL6_IC617_1<span class="number">.2</span> <span class="punctuation">&#123;</span></span><br><span class="line">    hardware ethernet <span class="number">00</span><span class="punctuation">:</span><span class="number">0</span>C<span class="punctuation">:</span><span class="number">29</span><span class="punctuation">:</span>CB<span class="punctuation">:</span>F1<span class="punctuation">:</span>D3;</span><br><span class="line">    fixed-address <span class="number">192.168</span><span class="number">.2</span><span class="number">.130</span>;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233536.png" alt="constantip">
<figcaption aria-hidden="true">constantip</figcaption>
</figure>
<p>其中 <code>hardware ethernet</code> 表示 Mac
地址，<code>fixed-address</code> 表示 IP 地址，注意 IP
地址设置的范围要在 <strong>subnet range</strong>
的范围内（上图红框中）；</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233537.png" alt="resource">
<figcaption aria-hidden="true">resource</figcaption>
</figure>
<p><code>RHEL6_IC617_1.2</code>
是虚拟机的名字，要和虚拟机资源库中的名字相同（上图红框中）。</p>
<h1 id="刷新-vm-网络配置">刷新 VM 网络配置</h1>
<p>执行如下三行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --configure</span><br><span class="line">$ <span class="built_in">sudo</span> /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --stop</span><br><span class="line">$ <span class="built_in">sudo</span> /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --start</span><br></pre></td></tr></table></figure>
<h1 id="虚拟机重新获取配置">虚拟机重新获取配置</h1>
<p>可以直接重启 VMware Fusion
和虚拟机系统，也可以直接在虚拟机命令行中执行
<code>sudo dhclient -v -r eth0</code>, <strong>eth0</strong>
为对应网卡。</p>
<hr>
<p><strong>Reference：</strong></p>
<ul>
<li>https://www.jianshu.com/p/af179e61ac7f</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 VS Code 的 Verilog 开发环境</title>
    <url>/2021/03/15/VerilogOnVscode/</url>
    <content><![CDATA[<h1 id="安装-hdl-语言支持插件">安装 HDL 语言支持插件</h1>
<p>首先我们安装 <a href="https://marketplace.visualstudio.com/items?itemName=mshr-h.VerilogHDL">Verilog-HDL/SystemVerilog/Bluespec
SystemVerilog</a>。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233407.png" alt="截屏2021-03-15 下午2.22.14">
<figcaption aria-hidden="true">截屏2021-03-15 下午2.22.14</figcaption>
</figure>
<p>它能够为包括 Verilog 在内的多种 HDL
提供语法高亮、常用代码片段、符号补全以及代码分析的功能。</p>
<p>然而不要着急，该插件并未实现后两种功能，而是从其他更专业的程序中获得帮助。因此我们还需要进行相应配置。</p>
<h1 id="使用-verilatoriverilog-作为代码分析工具">使用 Verilator/iVerilog
作为代码分析工具</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mac 安装 Verilator</span></span><br><span class="line">❯ brew install verilator</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debian 系</span></span><br><span class="line">❯ sudo apt-get install verilator</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Windows</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Windows 可以使用 WSL</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要开启 Verilog &gt; Linting &gt; Verilator: Use WSL</span></span><br></pre></td></tr></table></figure>
<p>在 VS Code 的用户设置中 <code>Verilog &gt; Linting: Linter</code>
一项选择 <code>verilator</code>:</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233408.png" alt="截屏2021-03-15 下午2.26.05">
<figcaption aria-hidden="true">截屏2021-03-15 下午2.26.05</figcaption>
</figure>
<h1 id="使用-ctags-作为符号补全工具">使用 ctags 作为符号补全工具</h1>
<p><code>ctags</code> 是老牌的符号补全工具，至今你还可以在
<code>Vim</code> 中见到它的身影。</p>
<p>在 Linux 中可以直接通过包管理安装。</p>
<p>在 Windows 中则需要安装 <code>universal-ctags</code>。</p>
<p><strong>配置：</strong></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233409.png" alt="ctags">
<figcaption aria-hidden="true">ctags</figcaption>
</figure>
<p><strong>效果：</strong></p>
<ul>
<li><p>鼠标放在信号上，就会有声明显示在悬浮框中；</p></li>
<li><p>Ctrl+左键，点击信号名，自动跳转到声明处，</p>
<p>返回：</p>
<ul>
<li><strong>Windows</strong>: <code>Alt</code> + <code>←</code> ;或者
鼠标侧键</li>
<li><strong>Linux</strong>: <code>Ctrl</code> + <code>Alt</code> +
<code>-</code> ;貌似数字键盘的减号没效果</li>
<li><strong>Mac</strong>: <code>Ctrl</code> + <code>-</code></li>
</ul></li>
<li><p>光标放在信号处，右键选择查看定义（快捷键可自行绑定），可以在此处展开声明处的代码，用于修改声明十分方便，就不用再来回跳转了。按ESC，关闭。</p></li>
</ul>
<h1 id="安装并配置代码格式化插件">安装并配置代码格式化插件</h1>
<p>接下来我们需要安装 <a href="https://marketplace.visualstudio.com/items?itemName=IsaacT.verilog-formatter">verilog-formatter</a>
来进行格式化。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233410.png" alt="截屏2021-03-15 下午2.34.49">
<figcaption aria-hidden="true">截屏2021-03-15 下午2.34.49</figcaption>
</figure>
<p>除此之外，我们需要下载 <a href="https://github.com/0qinghao/istyle-verilog-formatter/releases">编译后的
iStyle</a> 或者 <a href="https://github.com/thomasrussellmurphy/istyle-verilog-formatter/releases">iStyle
源代码</a>并手动编译(<code>make all</code>)。</p>
<p>最后在 VS Code 中配置 <code>Verilog-formatter &gt; Istyle</code>
到你的可执行文件。</p>
<p>另外在下方的 <code>Verilog-formatter &gt; Istyle: Style</code>
一项，你可以选择多种格式化方式，我比较喜欢 <code>kr</code>。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233411.png" alt="截屏2021-03-15 下午2.37.03">
<figcaption aria-hidden="true">截屏2021-03-15 下午2.37.03</figcaption>
</figure>
<p>之后在 VS Code 中，每当调用 <code>Format Document</code>
命令(<code>Ctrl+Shift+P</code> 后输入)，当前文件就会进行格式化（快捷键
<code>Shift + Alt + F</code>）。</p>
<h1 id="将文件代码与-vivado-项目分离">将文件代码与 Vivado 项目分离</h1>
<p>通常来说，新手在创建一个 Vivado 项目之后，常常会在 Vivado 中新建
Verilog 文件，然后直接编辑。</p>
<p>这样的结果就是，<strong>Verilog 代码会埋在 Vivado
项目很深的路径之中</strong>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">└── vivado <span class="meta"># 你的 Vivado 项目</span></span><br><span class="line">    └── vivado.srcs</span><br><span class="line">        └── sources_1</span><br><span class="line">            └── <span class="keyword">new</span></span><br><span class="line">                └── your-verilog-<span class="keyword">file</span>.v <span class="meta"># 你的 Verilog 文件</span></span><br></pre></td></tr></table></figure>
<p>但是这样既不方便你通过 VS Code 打开代码，也不方便使用 Git
进行版本控制。</p>
<p>因此正确的方式应该是在<strong>独立的文件夹</strong>中手动创建
<code>.v</code> 文件：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">├── vivado <span class="comment"># 你的 Vivado 项目</span></span><br><span class="line">└── src</span><br><span class="line">    └── your-verilog-<span class="built_in">file</span>.v <span class="comment"># 你的 Verilog 文件</span></span><br></pre></td></tr></table></figure>
<p>然后在 Vivado 中通过 <code>Add Directory</code> 将整个
<code>src</code> 目录添加到 Vivado 开发环境中，Vivado
将自动寻找可能的顶层文件，并自动梳理文件间依赖关系。</p>
<p>注意 Vivado
对文件更新的监听规则为：自动监听已经加入的文件，不监听新创建的文件。也就是说：<strong>如果你新建了一个
Verilog 文件，则需要再次添加入 Vivado 项目中</strong>。</p>
<h1 id="用-git-进行版本控制">用 Git 进行版本控制</h1>
<p>通过 <a href="https://www.toptal.com/developers/gitignore">gitignore.io</a>，你可以快速生成一份可用的
<a href="https://www.toptal.com/developers/gitignore/api/vivado,visualstudiocode"><code>.gitignore</code>
文件</a>，或者基于此进行改进。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233412.png" alt="截屏2021-03-15 下午2.38.27">
<figcaption aria-hidden="true">截屏2021-03-15 下午2.38.27</figcaption>
</figure>
<h1 id="自动生成例化自动生成testbench">自动生成例化，自动生成testbench</h1>
<p>安装的第一个插件Verilog-HDL/System...就有自动例化功能</p>
<p>按F1或者Ctrl+Shift+P，输入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">verilog:instantiate</span><br></pre></td></tr></table></figure>
<p>非常的好用，但是不够完美。</p>
<p>需要安装插件 <a href="https://marketplace.visualstudio.com/items?itemName=Truecrab.verilog-testbench-instance">Verilog_Testbench</a></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233413.png" alt="截屏2021-03-15 下午2.53.03">
<figcaption aria-hidden="true">截屏2021-03-15 下午2.53.03</figcaption>
</figure>
<p>按F1或者Ctrl+Shift+P，输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Instance <span class="comment"># 例化</span></span><br><span class="line">Testbench <span class="comment"># tb</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233414.png" alt="截屏2021-03-15 下午3.03.33">
<figcaption aria-hidden="true">截屏2021-03-15 下午3.03.33</figcaption>
</figure>
<p>可以会报错缺少文件：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">can&#x27;t <span class="keyword">open</span> <span class="keyword">file</span> &#x27;~/.vscode/extensions/truecrab.verilog-testbench-instance-0.0.5/outvTbgenerator.py&#x27;: [Errno 2] <span class="keyword">No</span> such <span class="keyword">file</span> or directory</span><br></pre></td></tr></table></figure>
<p>其实是路径的写法有问题：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> /Users/zhouyuqian/.vscode/extensions/truecrab.verilog-testbench-instance-<span class="number">0</span>.<span class="number">0</span>.<span class="number">5</span>/out\vTbgenerator.py</span><br></pre></td></tr></table></figure>
<p>直接在对应位置创建一个超链接就可以了。</p>
<p><del>创建相应的文件，内容如下：</del></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">vTbgenerator.py -- generate verilog module Testbench</span></span><br><span class="line"><span class="string">generated bench file like this:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        fifo_sc #(</span></span><br><span class="line"><span class="string">            .DATA_WIDTH ( 8 ),</span></span><br><span class="line"><span class="string">            .ADDR_WIDTH ( 8 )</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">         u_fifo_sc (</span></span><br><span class="line"><span class="string">            .CLK   ( CLK                     ),</span></span><br><span class="line"><span class="string">            .RST_N ( RST_N                   ),</span></span><br><span class="line"><span class="string">            .RD_EN ( RD_EN                   ),</span></span><br><span class="line"><span class="string">            .WR_EN ( WR_EN                   ),</span></span><br><span class="line"><span class="string">            .DIN   ( DIN   [DATA_WIDTH-1 :0] ),</span></span><br><span class="line"><span class="string">            .DOUT  ( DOUT  [DATA_WIDTH-1 :0] ),</span></span><br><span class="line"><span class="string">            .EMPTY ( EMPTY                   ),</span></span><br><span class="line"><span class="string">            .FULL  ( FULL                    )</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">      python vTbgenerator.py ModuleFileName.v</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delComment</span>(<span class="params">Text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; removed comment &quot;&quot;&quot;</span></span><br><span class="line">    single_line_comment = re.<span class="built_in">compile</span>(<span class="string">r&quot;//(.*)$&quot;</span>, re.MULTILINE)</span><br><span class="line">    multi_line_comment = re.<span class="built_in">compile</span>(<span class="string">r&quot;/\*(.*?)\*/&quot;</span>, re.DOTALL)</span><br><span class="line">    Text = multi_line_comment.sub(<span class="string">&#x27;\n&#x27;</span>, Text)</span><br><span class="line">    Text = single_line_comment.sub(<span class="string">&#x27;\n&#x27;</span>, Text)</span><br><span class="line">    <span class="keyword">return</span> Text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delBlock</span>(<span class="params">Text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; removed task and function block &quot;&quot;&quot;</span></span><br><span class="line">    Text = re.sub(<span class="string">r&#x27;\Wtask\W[\W\w]*?\Wendtask\W&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, Text)</span><br><span class="line">    Text = re.sub(<span class="string">r&#x27;\Wfunction\W[\W\w]*?\Wendfunction\W&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, Text)</span><br><span class="line">    <span class="keyword">return</span> Text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findName</span>(<span class="params">inText</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; find module name and port list&quot;&quot;&quot;</span></span><br><span class="line">    p = re.search(<span class="string">r&#x27;([a-zA-Z_][a-zA-Z_0-9]*)\s*&#x27;</span>, inText)</span><br><span class="line">    mo_Name = p.group(<span class="number">0</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> mo_Name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">paraDeclare</span>(<span class="params">inText, portArr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; find parameter declare &quot;&quot;&quot;</span></span><br><span class="line">    pat = <span class="string">r&#x27;\s&#x27;</span> + portArr + <span class="string">r&#x27;\s[\w\W]*?[;,)]&#x27;</span></span><br><span class="line">    ParaList = re.findall(pat, inText)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ParaList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">portDeclare</span>(<span class="params">inText, portArr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;find port declare, Syntax:</span></span><br><span class="line"><span class="string">       input [ net_type ] [ signed ] [ range ] list_of_port_identifiers</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       return list as : (port, [range])</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    port_definition = re.<span class="built_in">compile</span>(</span><br><span class="line">        <span class="string">r&#x27;\b&#x27;</span> + portArr +</span><br><span class="line">        <span class="string">r&#x27;&#x27;&#x27; (\s+(wire|reg|logic|interface)\s+)* (\s*signed\s+)*  (\s*\[.*?:.*?\]\s*)*</span></span><br><span class="line"><span class="string">        (?P&lt;port_list&gt;.*?)</span></span><br><span class="line"><span class="string">        (?= \binput\b | \boutput\b | \binout\b | ; | \) )</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>,</span><br><span class="line">        re.VERBOSE | re.MULTILINE | re.DOTALL</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pList = port_definition.findall(inText)</span><br><span class="line">    t = []</span><br><span class="line">    <span class="keyword">for</span> ls <span class="keyword">in</span> pList:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ls) &gt;= <span class="number">2</span>:</span><br><span class="line">            t = t + portDic(ls[-<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">portDic</span>(<span class="params">port</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;delet as : input a =c &amp;d;</span></span><br><span class="line"><span class="string">        return list as : (port, [range])</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pRe = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(.*?)\s*=.*&#x27;</span>, re.DOTALL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pRange = port[<span class="number">0</span>]</span><br><span class="line">    pList = port[<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    pList = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> pList <span class="keyword">if</span> i.strip() != <span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    pList = [(pRe.sub(<span class="string">r&#x27;\1&#x27;</span>, p), pRange.strip()) <span class="keyword">for</span> p <span class="keyword">in</span> pList]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">formatPort</span>(<span class="params">AllPortList, isPortRange=<span class="number">1</span></span>):</span><br><span class="line">    PortList = AllPortList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> PortList != []:</span><br><span class="line">        l1 = <span class="built_in">max</span>([<span class="built_in">len</span>(i[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> PortList])+<span class="number">2</span></span><br><span class="line">        l3 = <span class="built_in">max</span>(<span class="number">18</span>, l1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        strList = []</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&#x27;,\n&#x27;</span>.join([<span class="string">&#x27; &#x27;</span> * <span class="number">4</span> + <span class="string">&#x27;.&#x27;</span> + i[<span class="number">0</span>].ljust(l3)</span><br><span class="line">                          + <span class="string">&#x27;(&#x27;</span> + (i[<span class="number">0</span>]) + <span class="string">&#x27;)&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> AllPortList])</span><br><span class="line">        strList = strList + [<span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&#x27;,\n\n&#x27;</span>.join(strList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">formatDeclare</span>(<span class="params">PortList, portArr, initial=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> PortList != []:</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&#x27;\n&#x27;</span>.join([portArr.ljust(<span class="number">4</span>) + <span class="string">&#x27;  &#x27;</span>+(i[<span class="number">1</span>]+<span class="built_in">min</span>(<span class="built_in">len</span>(i[<span class="number">1</span>]), <span class="number">1</span>)*<span class="string">&#x27;  &#x27;</span></span><br><span class="line">                                                  + i[<span class="number">0</span>]) + <span class="string">&#x27;;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> PortList])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">formatPara</span>(<span class="params">ParaList</span>):</span><br><span class="line">    paraDec = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    paraDef = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> ParaList != []:</span><br><span class="line">        s = <span class="string">&#x27;\n&#x27;</span>.join(ParaList)</span><br><span class="line">        pat = <span class="string">r&#x27;([a-zA-Z_][a-zA-Z_0-9]*)\s*=\s*([\w\W]*?)\s*[;,)]&#x27;</span></span><br><span class="line">        p = re.findall(pat, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        l1 = <span class="built_in">max</span>([<span class="built_in">len</span>(i[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> p])</span><br><span class="line">        l2 = <span class="built_in">max</span>([<span class="built_in">len</span>(i[<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> p])</span><br><span class="line">        paraDec = <span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;parameter %s = %s;&#x27;</span></span><br><span class="line">                             % (i[<span class="number">0</span>].ljust(l1 + <span class="number">1</span>), i[<span class="number">1</span>].ljust(l2))</span><br><span class="line">                             <span class="keyword">for</span> i <span class="keyword">in</span> p])</span><br><span class="line">        paraDef = <span class="string">&#x27;#(\n&#x27;</span> + <span class="string">&#x27;,\n&#x27;</span>.join([<span class="string">&#x27;    .&#x27;</span> + i[<span class="number">0</span>].ljust(l1 + <span class="number">1</span>)</span><br><span class="line">                                       + <span class="string">&#x27;( &#x27;</span> + i[<span class="number">1</span>].ljust(l2)+<span class="string">&#x27; )&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> p]) + <span class="string">&#x27;)\n&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> paraDec, paraDef</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">portT</span>(<span class="params">inText, ioPadAttr</span>):</span><br><span class="line">    x = &#123;&#125;</span><br><span class="line">    count_list = []</span><br><span class="line">    order_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ioPadAttr:</span><br><span class="line">        p = port_index_list(inText, i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> p:</span><br><span class="line">            count_list.append(j)</span><br><span class="line">            x[j] = i</span><br><span class="line">    count_list = quick_sort(count_list, <span class="number">0</span>, <span class="built_in">len</span>(count_list)-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> count_list:</span><br><span class="line">        order_list.append(x.get(c))</span><br><span class="line">    <span class="keyword">return</span> order_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">myList, start, end</span>):</span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        i, j = start, end</span><br><span class="line">        base = myList[i]</span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) <span class="keyword">and</span> (myList[j] &gt;= base):</span><br><span class="line">                j = j - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            myList[i] = myList[j]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) <span class="keyword">and</span> (myList[i] &lt;= base):</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            myList[j] = myList[i]</span><br><span class="line">        myList[i] = base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        quick_sort(myList, start, i - <span class="number">1</span>)</span><br><span class="line">        quick_sort(myList, j + <span class="number">1</span>, end)</span><br><span class="line">    <span class="keyword">return</span> myList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">formatPort_order</span>(<span class="params">padAttr, orderList</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> padAttr:</span><br><span class="line">        q = Queue()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> padAttr.get(p):</span><br><span class="line">            q.put(i)</span><br><span class="line">        padAttr[p] = q</span><br><span class="line">    AllPortList = []</span><br><span class="line">    <span class="keyword">for</span> o <span class="keyword">in</span> orderList:</span><br><span class="line">        AllPortList.append(padAttr.get(o).get())</span><br><span class="line">    <span class="keyword">return</span> AllPortList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">port_index_list</span>(<span class="params">intext, text</span>):</span><br><span class="line">    l = []</span><br><span class="line">    t = intext</span><br><span class="line">    index = t.find(text)</span><br><span class="line">    <span class="keyword">while</span> index &gt; -<span class="number">1</span>:</span><br><span class="line">        t = t.replace(text, random_str(<span class="built_in">len</span>(text)), <span class="number">1</span>)</span><br><span class="line">        l.append(index)</span><br><span class="line">        index = t.find(text)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_str</span>(<span class="params">size</span>):</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        s += <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPortMap</span>(<span class="params">AllPortList, ioPadAttr</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(AllPortList) != <span class="built_in">len</span>(ioPadAttr):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p_map = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(AllPortList)):</span><br><span class="line">        p_map[ioPadAttr[i]] = AllPortList[i]</span><br><span class="line">    <span class="keyword">return</span> p_map</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writeTestBench</span>(<span class="params">input_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; write testbench to file &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f_info = chardet.detect(f.read())</span><br><span class="line">        f_encoding = f_info[<span class="string">&#x27;encoding&#x27;</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, encoding=f_encoding) <span class="keyword">as</span> inFile:</span><br><span class="line">        inText = inFile.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># removed comment,task,function</span></span><br><span class="line">    inText = delComment(inText)</span><br><span class="line">    inText = delBlock(inText)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># moduel ... endmodule  #</span></span><br><span class="line">    moPos_begin = re.search(<span class="string">r&#x27;(\b|^)module\b&#x27;</span>, inText).end()</span><br><span class="line">    moPos_end = re.search(<span class="string">r&#x27;\bendmodule\b&#x27;</span>, inText).start()</span><br><span class="line">    inText = inText[moPos_begin:moPos_end]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    name = findName(inText)</span><br><span class="line">    paraList = paraDeclare(inText, <span class="string">&#x27;parameter&#x27;</span>)</span><br><span class="line">    paraDec, paraDef = formatPara(paraList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ioPadAttr = [<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;inout&#x27;</span>,<span class="string">&#x27;interface&#x27;</span>]</span><br><span class="line">    orlder = portT(inText, ioPadAttr)</span><br><span class="line">    <span class="built_in">input</span> = portDeclare(inText, ioPadAttr[<span class="number">0</span>])</span><br><span class="line">    output = portDeclare(inText, ioPadAttr[<span class="number">1</span>])</span><br><span class="line">    inout = portDeclare(inText, ioPadAttr[<span class="number">2</span>])</span><br><span class="line">    interface = portDeclare(inText, ioPadAttr[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    portList = formatPort(formatPort_order(</span><br><span class="line">        getPortMap([<span class="built_in">input</span>, output, inout,interface], ioPadAttr), orlder))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">input</span> = formatDeclare(<span class="built_in">input</span>, <span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line">    output = formatDeclare(output, <span class="string">&#x27;wire&#x27;</span>)</span><br><span class="line">    inout = formatDeclare(inout, <span class="string">&#x27;wire&#x27;</span>)</span><br><span class="line">    interface = formatDeclare(interface, <span class="string">&#x27;wire&#x27;</span>)</span><br><span class="line">    <span class="comment"># write Instance</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># module_parameter_port_list</span></span><br><span class="line">    <span class="keyword">if</span>(paraDec != <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;// %s Parameters\n%s\n&quot;</span> % (name, paraDec))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># list_of_port_declarations</span></span><br><span class="line">    <span class="comment">#print(&quot;// %s Inputs\n%s\n&quot; % (name, input))</span></span><br><span class="line">    <span class="comment">#print(&quot;// %s Outputs\n%s\n&quot; % (name, output))</span></span><br><span class="line">    <span class="comment">#if(inout != &#x27;&#x27;):</span></span><br><span class="line">    <span class="comment">#    print(&quot;// %s Bidirs\n%s\n&quot; % (name, inout))</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="comment"># UUT</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s %s inst_%s (\n%s\n);&quot;</span> % (name, paraDef, name, portList))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     writeTestBench(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h1 id="more">More</h1>
<h2 id="verilog-snippet-可以提供更强大的补全"><a href="https://marketplace.visualstudio.com/items?itemName=czh.czh-verilog-snippet">Verilog
Snippet</a> 可以提供更强大的补全</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233415.png" alt="截屏2021-03-15 下午3.28.17">
<figcaption aria-hidden="true">截屏2021-03-15 下午3.28.17</figcaption>
</figure>
<h2 id="自定义补全">自定义补全</h2>
<p>其实关于自动补全，还可以前往 "Preference-&gt;User
Snippets"，来添加您自己的代码，虽然这个操作目前还是比较麻烦的。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233416.png" alt="截屏2021-03-15 下午3.31.12">
<figcaption aria-hidden="true">截屏2021-03-15 下午3.31.12</figcaption>
</figure>
<h1 id="reference">Reference</h1>
<p>[1] <a href="https://blog.fkynjyq.com/write-verilog-with-vscode/"><strong>HDL
的现代代码编辑体验——配置 VS Code 的 Verilog 开发环境</strong></a></p>
<p>[2] <a href="https://zhuanlan.zhihu.com/p/338497672">用VSCode编辑verilog代码、iverilog编译、自动例化、自动补全、自动格式化等常用插件</a></p>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
        <tag>FPGA</tag>
        <tag>Vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Cadence IC617 on Ubuntu</title>
    <url>/2021/03/07/VirtuosoOnUbuntu/</url>
    <content><![CDATA[<h1 id="cadence-reference">Cadence Reference</h1>
<p>[1.0] <a href="https://zhuanlan.zhihu.com/p/354374816">Ubuntu20.04
安装Cadence IC617(HotFix)，Spectre，Calibre，Xceliummain</a></p>
<p>[1.1] <a href="https://my.oschina.net/propagator/blog/3166272">ubuntu18.04安装cadence
virtuoso</a></p>
<p>[1.2] <a href="https://blog.csdn.net/yy345730585/article/details/90407408">在
CentOS7 下安装 Cadence IC验证平台 INCISIVE152</a></p>
<p>可能出现的问题及解决方法：</p>
<p>[2] <a href="http://bbs.eetop.cn/thread-877866-1-1.html">...install.ixl/mgc_install:
No such file or directory</a></p>
<p>[3] <a href="http://bbs.eetop.cn/thread-400786-1-1.html">ERROR: The
OA2.2 library directory
(/home/hushuai/cadence/installs/IC616/oa_v22.43.018/lib/linux_rhel40_gcc44x_32/opt)
does not seem to exist.</a></p>
<p>[4] <a href="http://bbs.eetop.cn/thread-325949-1-1.html"><em>WARNING</em>
Unable to find font name:
"-<em>-courier-medium-r-</em>-<em>-12-</em>".</a></p>
<p>[6] <a href="http://bbs.eetop.cn/archiver/tid-635921.html">*ld:
/usr/lib/x86_64-linux-gnu/crti.o: unrecognized relocation (0x2a) in
section `.init'</a></p>
<p>[7] <a href="https://blog.csdn.net/qq_19734597/article/details/102943559">/usr/include/math.h:27:36:
fatal error: bits/libc-header-start.h: No such file or directory</a></p>
<p>[8] <a href="http://bbs.eetop.cn/thread-768205-1-1.html">WARNING The
glibc version of this host does not appear to be a Cadence supported
version.</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备工作</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install ksh csh openjdk-8-jre openjdk-8-jdk xterm libncursesw5-dev libxtst6:i386 libxi6:i386 libstdc++6 lib32stdc++6 python net-tools xfonts-75dpi xfonts-100dpi</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">wget http://ftp.br.debian.org/debian/pool/main/g/glibc/multiarch-support_2.28-10_amd64.deb</span><br><span class="line"><span class="built_in">sudo</span> dpkg -i multiarch-support_2.28-10_amd64.deb</span><br><span class="line">wget http://launchpadlibrarian.net/183708483/libxp6_1.0.2-2_amd64.deb</span><br><span class="line"><span class="built_in">sudo</span> dpkg -i libxp6_1.0.2-2_amd64.deb</span><br><span class="line"><span class="comment"># 查看Java安装情况</span></span><br><span class="line">java -version</span><br><span class="line"><span class="comment"># 配置Java环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 添加redhat-release 骗过cadence</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;Red Hat Enterprise Linux release 6.12&quot;</span> &gt; /etc/redhat-release</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 /etc/redhat-release</span><br><span class="line"><span class="comment">##创建临时文件夹</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /tmp /usr/tmp</span><br><span class="line"><span class="comment">##软链接</span></span><br><span class="line"><span class="comment">##sudo ln -s /usr/bin/mawk /bin/awk</span></span><br><span class="line"><span class="comment">##sudo ln -s /usr/bin/basename /bin/basename</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /lib/x86_64-linux-gnu/libncursesw.so.5.9 /lib/libtermcap.so.2</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /lib/x86_64-linux-gnu/libcrypto.so.1.1 /lib/x86_64-linux-gnu/libcrypto.so.6</span><br></pre></td></tr></table></figure>
<h1 id="ads-reference">ADS Reference</h1>
<p>[1] <a href="http://bbs.eetop.cn/thread-880091-1-1.html">快递：Linux安装ADS2020update2.0及破解</a></p>
<p>[2] <a href="http://bbs.eetop.cn/thread-560408-1-1.html">ubuntu 上装
ADS 2015</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./pubkey_verify</span><br><span class="line"><span class="built_in">sudo</span> ./pubkey_verify -y</span><br></pre></td></tr></table></figure>
<p>然后再安装license</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh:1:lmutil:not found  sh:1:lmgrd:not found</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get isntall lsb-core</span><br></pre></td></tr></table></figure>
<h1 id="ads-dynamic-link">ADS Dynamic Link</h1>
<blockquote>
<p>http://literature.cdn.keysight.com/litweb/pdf/ads2008/dynlnkug/ads2008/Getting_Started_with_RFIC_Dynamic_Link.html</p>
<p>http://edadownload.software.keysight.com/eedl/ads/2011/pdf/dynlnkug.pdf</p>
<p>https://zhuanlan.zhihu.com/p/355213307</p>
</blockquote>
<p>在 ADS 和 Cadence 都正确安装且可以正常打开的情况下：</p>
<p>首先要在 <em>.cdsinit</em> 文件里添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">load(<span class="string">&quot;/opt/ADS2020_update2/idf/config/.cdsinit&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>然后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$HPEESOF_DIR</span>/bin/setCSF.ksh</span><br></pre></td></tr></table></figure>
<p>然后启动 virtuoso，在CIW中可发现ADS已成功加载：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233512.png" alt="截屏2021-04-20 下午4.40.58">
<figcaption aria-hidden="true">截屏2021-04-20 下午4.40.58</figcaption>
</figure>
<p>在 schematic 中选择 Launch-ADS Dynamic Link，就会弹出ADS窗口：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233513.png" alt="截屏2021-04-20 下午4.43.01">
<figcaption aria-hidden="true">截屏2021-04-20 下午4.43.01</figcaption>
</figure>
<h1 id="modelsim">Modelsim</h1>
<h2 id="prepare-install-files">Prepare install files</h2>
<p>Unwaper this three files and you will get
<code>Mentor Graphics ModelSim SE 2020.4 Linux64</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Mentor_Graphics_ModelSim_SE_2020.<span class="number">4</span>_Linux64<span class="selector-class">.part1_Downloadly</span><span class="selector-class">.ir</span></span><br><span class="line">Mentor_Graphics_ModelSim_SE_2020.<span class="number">4</span>_Linux64<span class="selector-class">.part2_Downloadly</span><span class="selector-class">.ir</span></span><br><span class="line">Mentor_Graphics_ModelSim_SE_2020.<span class="number">4</span>_Linux64<span class="selector-class">.part3_Downloadly</span>.ir</span><br></pre></td></tr></table></figure>
<h2 id="安装">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x modelsim-2020.4_Downloadly.ir.aol <span class="comment"># 修改权限</span></span><br><span class="line"><span class="built_in">sudo</span> ./modelsim-2020.4_Downloadly.ir.aol <span class="comment"># 安装</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：只安装 64 位的部分！</strong></p>
</blockquote>
<h2 id="生成-license-file">生成 license file</h2>
<p>使用 wine 运行 <code>MentorKG.exe</code> 文件，首先要安装 wine：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install wine</span><br><span class="line"><span class="built_in">sudo</span> dpkg --add-architecture i386 &amp;&amp; <span class="built_in">sudo</span> apt-get update &amp;&amp; <span class="built_in">sudo</span> apt-get install wine32</span><br></pre></td></tr></table></figure>
<p>在成功安装Wine之后，需要在第一次使用之前使用下面的命令初始化wine配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> winecfg</span><br></pre></td></tr></table></figure>
<p>然后 patch，<code>&lt;Modelsim install path&gt;</code> 在我的电脑上为
<code>/opt/ModelSim</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> MentorKG.exe &lt;Modelsim install path&gt;/modeltech/linux_x86_64 <span class="comment"># 复制 MentorKG.exe 到 modelsim 安装目录下</span></span><br><span class="line"><span class="built_in">sudo</span> wine MentorKG.exe -patch .</span><br></pre></td></tr></table></figure>
<p>保存生成的 license 为 <code>license.dat</code>，并选择文件编码格式为
<code>Unicode(UTF-8)</code>，位置
<code>/opt/ModelSim/license.dat</code></p>
<h2 id="patch">Patch</h2>
<p>ref:http://bbs.eetop.cn/thread-888767-1-1.html</p>
<p>把 sfk 和 patch_calibre2011_linux 文件拷贝到 modelsim
的安装路径下(同级有modeltech和_msidata文件夹)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> patch_calibre2011_linux sfk /opt/ModelSim</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 755 patch_calibre2011_linux sfk    <span class="comment">#chmod patch 和 sfk文件权限均为755</span></span><br><span class="line"><span class="built_in">sudo</span> ./patch_calibre2011_linux    <span class="comment">#执行本命令，其实就是调用了一次sfk</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sfk: error <span class="keyword">while</span> loading shared libraries: libstdc++.so.5: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locate libstdc++.so.5  <span class="comment">#发现系统中还真的没这个运行库</span></span><br><span class="line"><span class="comment"># 这是一个古老的库 所以安装 </span></span><br><span class="line"><span class="comment"># sudo apt-get install libstdc++5</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libstdc++5:i386</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sfk rep -<span class="built_in">yes</span> -bin /41574989CF41564589C6415541544189D455534889FB4881ECF8000000488B8798020000/4831c0c3CF41564589C6415541544189D455534889FB4881ECF8000000488B8798020000/ -<span class="built_in">dir</span> .</span><br><span class="line">sfk rep -<span class="built_in">yes</span> -bin /41574989CF41564589C6415541544189D455534889FB4881ECF8000000488B8798020000/4831c0c3CF41564589C6415541544189D455534889FB4881ECF8000000488B8798020000/ -<span class="built_in">dir</span> .</span><br><span class="line">sfk rep -<span class="built_in">yes</span> -bin /CC88D700000000001300000000000000000000000700070000000000210005007C6B610100000000000000000000000000000000000000000000000000000000A0D2D700000000000BFFFFFF00000000/CC88D7000000000013000000FFFFFFFF000000000700070000000000210005007C6B610100000000000000000000000000000000000000000000000000000000A0D2D700000000000BFFFFFF00000000/ -<span class="built_in">dir</span> . -file vcom</span><br></pre></td></tr></table></figure>
<p>最后的log中出现 2 changed 就成功了。</p>
</blockquote>
<h2 id="修改环境变量">修改环境变量</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># modelsim</span></span><br><span class="line"><span class="built_in">export</span> MTI_VCO_MODE=64</span><br><span class="line"><span class="built_in">export</span> LM_LICENSE_FILE=/opt/ModelSim/license.dat</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/ModelSim/modeltech/linux_x86_64</span><br></pre></td></tr></table></figure>
<p>执行 <code>vsim</code></p>
<blockquote>
<p>PS: 要修改网卡名称为 eth0</p>
<blockquote>
<p>sudo vim /etc/default/grub</p>
<p>找到GRUB_CMDLINE_LINUX=""</p>
<p>改为GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0"</p>
<p>然后sudo grub-mkconfig -o /boot/grub/grub.cfg</p>
</blockquote>
<p><strong>重启</strong>后，网卡名称就会变成了eth0</p>
</blockquote>
<blockquote>
<p>dash 改为 bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg-reconfigure dash <span class="comment"># 选 No</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="hfss">HFSS</h1>
<blockquote>
<p>https://www.cfd-online.com/Forums/ansys/199190-ansys-18-2-ubuntu-16-04-installation-guide.html</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ./install -silent -install_dir /opt/ansys_inc</span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> meow: </span><br><span class="line"><span class="comment">### Warning: Dependency package bzip2-libs is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package expat is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package fontconfig is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package freetype is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package giflib is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package glib2 is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package glibc is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libdrm is not installed.</span></span><br><span class="line"><span class="comment">### Warning: One of the following alternate dependencies are not installed: libjpeg libjpeg-turbo</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libpng is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libselinux is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libtiff is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libX11 is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXau is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libxcb is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXdamage is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXext is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXfixes is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXft is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXmu is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXp is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXrender is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXt is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package libXxf86vm is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package mesa-dri-drivers is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package mesa-libGL is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package mesa-libGLU is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package nss-softokn-freebl is not installed.</span></span><br><span class="line"><span class="comment">### Warning: Dependency package zlib is not installed.</span></span><br><span class="line">/mnt/hgfs/IC_Design/share/HFSS/ELECTRONICS_180_LINX64/Electronics_180_linx64/Linux/install.exe: error <span class="keyword">while</span> loading shared libraries: libpng12.so.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>
<h2 id="安装必要的软件">安装必要的软件</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install xterm lsb csh ssh rpm xfonts-base xfonts-100dpi xfonts-100dpi-transcoded xfonts-75dpi xfonts-75dpi-transcoded xfonts-cyrillic libmotif-common mesa-utils libxm4 libxt6 libxext6 libxi6 libx11-6 libsm6 libice6  libxxf86vm1 libpng16-16 libtiff5 gcc g++ libstdc++6 libstdc++5</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># libpng12-0</span></span><br><span class="line">wget http://ppa.launchpad.net/linuxuprising/libpng12/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1.1+1~ppa0~focal_amd64.deb</span><br><span class="line"><span class="built_in">sudo</span> dpkg -i libpng12-0_1.2.54-1ubuntu1.1+1~ppa0~focal_amd64.deb</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># libxp</span></span><br><span class="line">wget ftp.us.debian.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb</span><br><span class="line"><span class="built_in">sudo</span> dpkg -i libxp6_1.0.2-2_amd64.deb</span><br></pre></td></tr></table></figure>
<h2 id="更新索引">更新索引</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># updatedb 用来创建或更新 slocate/locate 命令所必需的数据库文件</span></span><br><span class="line"><span class="comment"># updatedb 命令的执行过程较长，因为在执行时它会遍历整个系统的目录树，并将所有的文件信息写入 slocate/locate 数据库文件中</span></span><br><span class="line"><span class="comment"># Update the database with:</span></span><br><span class="line"><span class="built_in">sudo</span> updatedb</span><br></pre></td></tr></table></figure>
<h2 id="创建超链接">创建超链接</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libGL.so.1 /usr/lib/libGL.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libGL.so.1 /usr/lib/libGL.so.1</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libGLU.so.1 /usr/lib/libGLU.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libXm.so.4 /usr/lib/libXm.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libXm.so.4 /usr/lib/libXm.so.3</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libXp.so.6 /usr/lib/libXp.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libXt.so.6 /usr/lib/libXt.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libXext.so.6 /usr/lib/libXext.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libXi.so.6 /usr/lib/libXi.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libX11.so.6 /usr/lib/libX11.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libSM.so.6 /usr/lib/libSM.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libICE.so.6 /usr/lib/libICE.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /lib/x86_64-linux-gnu/libgcc_s.so.1 /lib/libgcc.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /lib/x86_64-linux-gnu/libc.so.6 /lib/libc.so</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /lib/x86_64-linux-gnu/libc.so.6 /lib64/libc.so.6</span><br></pre></td></tr></table></figure>
<h2 id="将默认-sh-改为-bash">将默认 sh 改为 bash</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Change the command interpreter for shell scripts:</span></span><br><span class="line"><span class="built_in">sudo</span> dpkg-reconfigure dash</span><br><span class="line"><span class="comment"># Then answer &quot;No&quot; to the question.</span></span><br></pre></td></tr></table></figure>
<h2 id="安装-1">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line"><span class="comment"># sudo ./INSTALL  -silent -install_dir /opt/ansys_inc</span></span><br><span class="line"><span class="built_in">sudo</span> ./INSTALL</span><br></pre></td></tr></table></figure>
<p>安装位置选择 <em>/opt/ansys_inc</em></p>
<h2 id="破解">破解</h2>
<p>将破解文件夹复制到 <em>/opt/ansys_inc</em> 覆盖原来的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r ansys_inc /opt</span><br></pre></td></tr></table></figure>
<h2 id="修改权限">修改权限</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> ~/.ansys</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> ~/.config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R 777 /ansys_inc/v202/aisol/WBMWRegistry/</span><br></pre></td></tr></table></figure>
<h2 id="修改通配符不匹配">修改通配符不匹配</h2>
<p>修改 <em>/opt/ansys_inc/v202/CFX/bin/cfx5arch</em></p>
<p>大约在 196 行处有：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -n <span class="string">&quot;<span class="variable">$libc_file</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">case</span> `<span class="built_in">basename</span> <span class="variable">$libc_file</span> | sed <span class="string">&#x27;s/\.so//g&#x27;</span>` <span class="keyword">in</span></span><br><span class="line">glibc-*|libc-[0123].*) <span class="comment"># this is almost certainly a glibc version</span></span><br></pre></td></tr></table></figure>
<p>在这下面加上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libc_file_tmp=`<span class="built_in">echo</span> <span class="variable">$libc_file</span> | sed -e <span class="string">&#x27;s/x86_64-linux-gnu//g&#x27;</span>`</span><br></pre></td></tr></table></figure>
<p>然后将:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libc_version=`<span class="built_in">echo</span> <span class="variable">$libc_file</span> | sed -e <span class="string">&#x27;s/^[^-]*-//&#x27;</span> -e <span class="string">&#x27;s/\.so//g&#x27;</span>`</span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libc_version=`<span class="built_in">echo</span> <span class="variable">$libc_file_tmp</span> | sed -e <span class="string">&#x27;s/^[^-]*-//&#x27;</span> -e <span class="string">&#x27;s/\.so//g&#x27;</span>`</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233514.png" alt="截屏2021-04-09 下午5.14.46">
<figcaption aria-hidden="true">截屏2021-04-09 下午5.14.46</figcaption>
</figure>
<h2 id="since-ptrace-is-used-to-monitor-intelmpi-cfx-run-set-the-permission-for-all-the-users-just-edit">Since
ptrace is used to monitor intelmpi CFX run, set the permission for all
the users, just edit</h2>
<p>编辑 <em>/etc/sysctl.d/10-kernel-hardening.conf </em></p>
<p>加入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kernel.yama.ptrace_scope = 0</span><br></pre></td></tr></table></figure>
<p>/etc/sysctl.d/10-ptrace.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kernel.yama.ptrace_scope = 1</span><br><span class="line">-&gt;</span><br><span class="line">kernel.yama.ptrace_scope = 0</span><br></pre></td></tr></table></figure>
<p>/proc/sys/kernel/yama/ptrace_scope</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">-&gt;</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h2 id="编辑-.bashrc-文件">编辑 <em>.bashrc</em> 文件</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ANSYS</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/ansys_inc/v202/ansys/bin</span><br><span class="line"><span class="comment">#CFX</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/ansys_inc/v202/CFX/bin</span><br><span class="line"><span class="comment">#FLUENT</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/ansys_inc/v202/fluent/bin</span><br><span class="line"><span class="comment">#ICEM</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/ansys_inc/v202/icemcfd/linux64_amd/bin</span><br><span class="line"><span class="comment">#WORKBENCH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/ansys_inc/v202/Framework/bin/Linux64</span><br><span class="line"><span class="comment">#TurboGrid</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/ansys_inc/v202/TurboGrid/bin</span><br><span class="line"><span class="comment">#ANSYS Sevice Manager</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/ansys_inc/shared_files/licensing/lic_admin</span><br><span class="line"><span class="comment">#polyflow</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/ansys_inc/v202/polyflow/bin</span><br><span class="line"><span class="comment">#more</span></span><br><span class="line"><span class="built_in">alias</span> wb2=<span class="string">&#x27;/ansys_inc/v202/Framework/bin/Linux64/runwb2 -oglmesa&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/opt/ansys_inc/v202/Framework/bin/Linux64/Mesa:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF8</span><br><span class="line"><span class="built_in">export</span> FLUENT_ARCH=<span class="string">&#x27;lnamd64&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="synopsys-vcsverdi">Synopsys VCS+Verdi</h1>
<blockquote>
<p>Ref:</p>
<ol type="1">
<li><p><a href="https://blog.csdn.net/huayangshiboqi/article/details/89525723">VCS+Verdi
安装及破解过程(Ubuntu)【1】</a></p></li>
<li><p><a href="https://blog.csdn.net/qq_35787848/article/details/112506565">Synopsys
license过期</a></p></li>
<li><p><a href="https://blog.csdn.net/qq_39117553/article/details/119759213?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link">libpng12.so.0:
cannot open shared object file: No such file or directory
解决方法</a></p></li>
</ol>
</blockquote>
<p>主要参考 <a href="https://blog.csdn.net/huayangshiboqi/article/details/89525723">1.
VCS+Verdi 安装及破解过程(Ubuntu)【1】</a> 安装，破解时，发现
<em>scl_keygen</em> 的 EXPIRE 的时间最大只能设为
<code>12-dec-2020</code>，这个应该是 license 到期的时间，直接在
<em>scl_keygen</em> 里修改 EXPIRE 的时间后生成的 license
还是不能用，参考 <a href="https://blog.csdn.net/qq_35787848/article/details/112506565">2.
Synopsys license过期</a> 的思路，修改 <em>scl_keygen</em> 文件夹里
<em>Synopsys.src</em> 这个文件里的日期，将所有的
<code>12-dec-2020</code> 改成 <code>12-dec-2030</code>，然后再在
<em>scl_keygen</em> 里修改 EXPIRE 的时间为
<code>12-dec-2030</code>，这样生成的 license 就可以用了。</p>
<p>由于 <a href="https://blog.csdn.net/huayangshiboqi/article/details/89525723">1.
VCS+Verdi 安装及破解过程(Ubuntu)【1】</a> 里提供的 vcs 需要
<code>gcc-4.8</code> 和
<code>g++-4.8</code>，需要单独安装，由于这个版本的 gcc
很老，无法直接使用包管理软件安装，因此需要从源码编译安装，我下载的是 <a href="http://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.bz2"><code>gcc-4.8.5</code></a>，不过这个版本的
gcc 使用高版本的 gcc
编译时会出很多问题，解决这些问题参考了以下几篇文章：</p>
<h2 id="gcc-4.8.5-编译安装"><a href="https://zhouyuqian.com/2021/11/30/build-install-gcc-4-8-5/">GCC-4.8.5
编译安装</a></h2>
<blockquote>
<ol type="1">
<li><a href="https://stackoverflow.com/questions/61945439/how-to-install-compiler-g-4-8-5-in-ubuntu-20-04">https://stackoverflow.com/questions/61945439/how-to-install-compiler-g-4-8-5-in-ubuntu-20-04</a></li>
<li><a href="https://www.icode9.com/content-3-1202280.html">https://www.icode9.com/content-3-1202280.html</a></li>
<li><a href="https://www.frank.fyi/archives/336_gcc-compile-error/">https://www.frank.fyi/archives/336_gcc-compile-error/</a></li>
</ol>
</blockquote>
<p>参考第一篇：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载gcc</span></span><br><span class="line">wget http://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.bz2</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf gcc-4.8.5.tar.bz2</span><br><span class="line"><span class="comment"># 修改 gcc-4.8.5 两处 bug</span></span><br><span class="line">sed -i -e <span class="string">&#x27;s/__attribute__/\/\/__attribute__/g&#x27;</span> gcc-4.8.5/gcc/cp/cfns.h</span><br><span class="line">sed -i <span class="string">&#x27;s/struct ucontext/ucontext_t/g&#x27;</span> gcc-4.8.5/libgcc/config/i386/linux-unwind.h</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装依赖三大件，会自动顺序安装gmp、mpfr、mpc</span></span><br><span class="line">gcc-4.8.5/contrib/download_prerequisites</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">sudo</span> apt install make wget git gcc g++ lhasa libgmp-dev libmpfr-dev libmpc-dev flex bison gettext texinfo ncurses-dev autoconf rsync</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建编译目录 gcc-4.8.5-build</span></span><br><span class="line"><span class="built_in">mkdir</span> gcc-4.8.5-build</span><br><span class="line"><span class="built_in">cd</span> gcc-4.8.5-build</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 开始编译安装</span></span><br><span class="line"><span class="variable">$PWD</span>/../gcc-4.8.5/configure --enable-languages=c,c++ --prefix=/usr/local/gcc-4.8.5 --enable-shared --enable-plugin --program-suffix=-4.8.5 --disable-multilib</span><br><span class="line">make MAKEINFO=<span class="string">&quot;makeinfo --force&quot;</span> -j</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译完成后安装</span></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
<p>编译的过程中会出现一些问题，主要参考了<a href="https://www.icode9.com/content-3-1202280.html">第二篇文章</a>和<a href="https://www.frank.fyi/archives/336_gcc-compile-error/">第三篇文章</a>。</p>
<h2 id="vcsverdi-的仿真脚本">vcs+verdi 的仿真脚本</h2>
<p>最后，附上 vcs+verdi 的仿真脚本，运行 <code>make sim</code> 使用 vcs
仿真，运行 <code>make verdi</code> 使用 verdi 查看波形。</p>
<p><em>Makefile</em></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all vcs file clean</span></span><br><span class="line"></span><br><span class="line">TOP ?= BBPLL_tb</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> demo_name=$&#123;TOP&#125;</span><br><span class="line"><span class="keyword">export</span> LD_LIBRARY_PATH=$&#123;VERDI_HOME&#125;/share/PLI/VCS/LINUX64</span><br><span class="line"></span><br><span class="line">SRC_PATH := $&#123;PWD&#125;/../src</span><br><span class="line">FILELIST_FILE := filelist.f</span><br><span class="line"></span><br><span class="line">DAIDIR := /tmp/vcs_run/$&#123;TOP&#125;.daidir</span><br><span class="line">MDIR := /tmp/vcs_run/$&#123;TOP&#125;.csrc</span><br><span class="line"></span><br><span class="line">VCS_FLAGS := -full64 \</span><br><span class="line">            +v2k \</span><br><span class="line">            -sverilog \</span><br><span class="line">            -debug_all \</span><br><span class="line">            +<span class="keyword">define</span>+DUMP_FSDB \</span><br><span class="line">            +incdir+$&#123;SRC_PATH&#125; \</span><br><span class="line">            -f $&#123;FILELIST_FILE&#125; \</span><br><span class="line">            -l com.log \</span><br><span class="line">            -top $&#123;TOP&#125; \</span><br><span class="line">            -o $&#123;TOP&#125; \</span><br><span class="line">            -lca -kdb \</span><br><span class="line">            -daidir=$&#123;DAIDIR&#125; \</span><br><span class="line">            -Mdirectory=$&#123;MDIR&#125; \</span><br><span class="line">            -LDFLAGS -Wl,-no-as-needed \</span><br><span class="line">            -j8 \</span><br><span class="line">            -diag timescale -timescale=1s/1fs</span><br><span class="line"></span><br><span class="line">VERDI_FLAGS :=     +v2k \</span><br><span class="line">                -sverilog \</span><br><span class="line">                -f $&#123;FILELIST_FILE&#125; \</span><br><span class="line">                -top $&#123;TOP&#125; \</span><br><span class="line">                -ssf $&#123;TOP&#125;.fsdb \</span><br><span class="line">                -nologo \</span><br><span class="line">                +incdir+$&#123;SRC_PATH&#125; \</span><br><span class="line">                -l verdi.log</span><br><span class="line"></span><br><span class="line">SRC_FILES += <span class="variable">$(<span class="built_in">foreach</span> f, <span class="variable">$(SRC_PATH)</span>, $(<span class="built_in">wildcard</span> <span class="variable">$(f)</span>/*.v)</span>)  </span><br><span class="line">SRC_FILES += <span class="variable">$(<span class="built_in">foreach</span> f, <span class="variable">$(SRC_PATH)</span>, $(<span class="built_in">wildcard</span> <span class="variable">$(f)</span>/*.sv)</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># start simulation</span></span><br><span class="line"><span class="section">sim: clean com</span></span><br><span class="line">    ./$&#123;TOP&#125; \</span><br><span class="line">    -ucli -i sim.tcl \</span><br><span class="line">    +fsdb+autoflush \</span><br><span class="line">    -l sim.log </span><br><span class="line"></span><br><span class="line"><span class="comment"># start compile</span></span><br><span class="line"><span class="section">com: file</span></span><br><span class="line">    vcs $&#123;VCS_FLAGS&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># run verdi</span></span><br><span class="line"><span class="section">verdi: $&#123;TOP&#125;.fsdb</span></span><br><span class="line">    verdi $&#123;VERDI_FLAGS&#125; &amp;</span><br><span class="line"></span><br><span class="line"><span class="section">file:</span></span><br><span class="line">    -rm -f $&#123;FILELIST_FILE&#125;</span><br><span class="line">    for filename in $&#123;SRC_FILES&#125;; do \</span><br><span class="line">        realpath $$&#123;filename&#125; | xargs -n 1 -I path bash -c <span class="string">&quot;echo path &gt;&gt; $&#123;FILELIST_FILE&#125;&quot;</span>; \</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    -rm -rf $&#123;DAIDIR&#125;</span><br><span class="line">    -rm -rf $&#123;MDIR&#125;</span><br><span class="line">    -rm -rf `ls | grep -v <span class="string">&quot;Makefile&quot;</span> | grep -v <span class="string">&quot;sim.tcl&quot;</span> | grep -v <span class="string">&quot;filelist.f&quot;</span> | grep -v <span class="string">&quot;res&quot;</span> | grep -v <span class="string">&quot;wave.rc&quot;</span>`</span><br></pre></td></tr></table></figure>
<p><em>sim.tcl</em></p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">global</span> env</span><br><span class="line"><span class="comment"># puts &#x27;$env(demo_name).fsdb&#x27;</span></span><br><span class="line">fsdbDumpfile <span class="string">&quot;$env(demo_name).fsdb&quot;</span></span><br><span class="line"><span class="comment"># fsdbDumpvars 0 &quot;$env(demo_name)&quot;</span></span><br><span class="line">fsdbDumpvars</span><br><span class="line">run <span class="number">2.0</span>ms</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>IC_design</tag>
      </tags>
  </entry>
  <entry>
    <title>Xilinx_HLS_Learning</title>
    <url>/2019/03/05/Xilinx-HLS-Learning/</url>
    <content><![CDATA[<h1 id="优化">优化</h1>
<p>流水线结构</p>
<p><a href="https://japan.xilinx.com/html_docs/xilinx2017_4/sdaccel_doc/fde1504034360078.html">pragma
HLS pipeline</a></p>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>HLS</tag>
      </tags>
  </entry>
  <entry>
    <title>Xilinx-Petalinux-Learning</title>
    <url>/2019/02/12/Xilinx-Petalinux-Learning/</url>
    <content><![CDATA[<h1 id="一开发环境搭建与petalinux安装">一、开发环境搭建与Petalinux安装</h1>
<p><a href="http://www.cnblogs.com/vacajk/p/6146146.html">参考</a></p>
<p>开发环境VMware，<strong><em>Ubuntu16.04</em></strong>（目前Petalinux不支持Ubuntu18.04，坑）。</p>
<h2 id="step1-安装vmware新建ubuntu虚拟机">step1
安装VMware，新建Ubuntu虚拟机；</h2>
<p>这里安装完成后最好配置一下共享文件夹，方便后期使用。</p>
<p><a href="https://www.cnblogs.com/gzdaijie/p/5194033.html">参考</a></p>
<h3 id="安装samba">1.1 安装samba</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install samba</span><br></pre></td></tr></table></figure>
<h3 id="创建共享目录">1.2 创建共享目录</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 创建的目录即之后能够在Windows主机上直接访问的目录。</span><br><span class="line">// 例如：在用户zyq的主目录下新建share文件夹为共享目录</span><br><span class="line">mkdir /home/zyq/smbshare</span><br><span class="line">// 由于Windows下的文件夹需可读可写可执行，需更改权限为777</span><br><span class="line">sudo chmod 777 /home/zyq/smbshare</span><br></pre></td></tr></table></figure>
<h3 id="修改samba配置文件">1.3 修改samba配置文件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 修改 /etc/samba/smb.conf</span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br><span class="line">// 在smb.conf文件最后加上以下内容</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[share]</span><br><span class="line">path = /home/zyq/smbshare</span><br><span class="line">public = yes</span><br><span class="line">writable = yes</span><br><span class="line">valid users = zyq</span><br><span class="line">create mask = 0644</span><br><span class="line">force create mode = 0644</span><br><span class="line">directory mask = 0755</span><br><span class="line">force directory mode = 0755</span><br><span class="line">available = yes</span><br></pre></td></tr></table></figure>
<blockquote>
<h4 id="关于smb.conf的几点解释">关于smb.conf的几点解释：</h4>
<ol type="1">
<li><p>[share]表示共享文件夹的别名，之后将直接使用这个别名</p></li>
<li><p><code>force create mode</code> 与
<code>force directory mode</code>的设置是因为Windows下与Linux下文件和文件夹的默认权限不同造成的，Windows下新建的文件是可执行的，必须强制设定其文件权限。</p></li>
<li><p>valid users
设置为你当前的Linux用户名，例如我的是zyq，因为第一次打开共享文件夹时，需要验证权限。</p></li>
</ol>
</blockquote>
<h3 id="设置登录密码">1.4 设置登录密码</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 新建/etc/samba/smbpasswd文件</span><br><span class="line">sudo touch /etc/samba/smbpasswd</span><br><span class="line">// 根据2.3设置的valid users，设置用户密码</span><br><span class="line">// zyq 替换为你在2.3中设置的用户名</span><br><span class="line">sudo smbpasswd -a zyq</span><br><span class="line">// 输入两次密码后，会提示 Added user zyq. 表示设置成功</span><br><span class="line">// 若用户名非当前登录系统的用户名，可能会提示Failed</span><br></pre></td></tr></table></figure>
<h3 id="启动samba服务器">1.5 启动samba服务器</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/samba restart</span><br></pre></td></tr></table></figure>
<h3 id="测试是否共享成功">1.6 测试是否共享成功</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install smbclient </span><br><span class="line">smbclient -L localhost/share</span><br><span class="line">//还记得吗？share为2.3中设置的共享文件夹的别名</span><br><span class="line">//如果共享成功，将要求输入之前设置的密码</span><br></pre></td></tr></table></figure>
<h3 id="在windows上测试">1.7 在windows上测试</h3>
<p>打开windows文件管理器，输入\Linux ip地址或主机名</p>
<h2 id="step2-ubuntu换源">step2 Ubuntu换源</h2>
<p>这里更换的是清华的源。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份原来的sourcelist</span></span><br><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bakup</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建sourcelist并填入源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>保存并退出，运行apt-get update</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<h2 id="step3-安装petalinux需要的依赖库">step3
安装Petalinux需要的依赖库</h2>
<p>参考ug1144，需要安装一些库。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233602.png" alt="1549966129865">
<figcaption aria-hidden="true">1549966129865</figcaption>
</figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233603.png" alt="1549966192025">
<figcaption aria-hidden="true">1549966192025</figcaption>
</figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install tofrodos:i386</span><br><span class="line">apt-get install iproute2:i386</span><br><span class="line">apt-get install gawk:i386</span><br><span class="line">apt-get install gcc:i386</span><br><span class="line">apt-get install git-core:i386</span><br><span class="line">apt-get install make:i386</span><br><span class="line">apt-get install net-tools:i386</span><br><span class="line">apt-get install libncurses5-dev:i386</span><br><span class="line">apt-get install zlib1g-dev:i386</span><br><span class="line">apt-get install libssl-dev:i386</span><br><span class="line">apt-get install flex:i386</span><br><span class="line">apt-get install bison:i386</span><br><span class="line">apt-get install libselinux1:i386</span><br></pre></td></tr></table></figure>
<p>然后是一些可能会导致不能正常安装petalinux，或是编译时出现问题的依赖库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在运行petalinux-config -c kernel出现错误，需要提前安装下面两个库</span></span><br><span class="line">apt-get install libncurses5 libncurses5-dev</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译时会出现错误arm-xilinx-linux-gnueabi-gcc: Command not found，需要安装下面三个库</span></span><br><span class="line">apt-get install libc6:i386</span><br><span class="line">apt-get install libstdc++6:i386</span><br><span class="line">apt-get install zlib1g:i386</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装petalinux时出现错误，提示缺少zlib和openssl，需要安装下面一个库</span></span><br><span class="line">apt-get install libssl-dev</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装petalinux时出现警告，提示No tftp server found - please refer to <span class="string">&quot;PetaLinux SDK Installation Guide&quot;</span> <span class="keyword">for</span> its impact and solution，需要安装下面3个库</span></span><br><span class="line">apt-get install tftpd tftp openbsd-inetd</span><br><span class="line">gedit /etc/inetd.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在文件中增加以下内容</span></span><br><span class="line">tftp dgram udp wait nobody /usr/sbin/tcpd /usr/sbin/in.tftpd /tftproot</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">保存并退出</span></span><br><span class="line">mkdir /tftproot</span><br><span class="line">chmod 777 /tftproot</span><br><span class="line">/etc/init.d/openbsd-inetd restart</span><br><span class="line">netstat -an | more | grep udp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">看到有如下输出，即表示tftp安装成功</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">udp        0      0 0.0.0.0:69              0.0.0.0:*</span></span><br></pre></td></tr></table></figure>
<h2 id="step4.-安装petalinux">step4. 安装petalinux</h2>
<p>首先在用个用户目录下创建petalinux文件夹作为petalinux的安装目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/zyq/smbshare/petalinux</span><br></pre></td></tr></table></figure>
<p>然后安装petalinux</p>
<blockquote>
<p>一定要使用普通用户权限安装，不能sudo</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./petalinux-v2018.2-final-installer-dec.run /home/zyq/smbshare/petalinux</span><br></pre></td></tr></table></figure>
<p>如果权限不够，可用 <code>chmod 777</code> 提权。</p>
<p>安装过程中有3个许可，需要都同意。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233604.png" alt="1549975464135">
<figcaption aria-hidden="true">1549975464135</figcaption>
</figure>
<p>每次开机使用petalinux时，要在命令行输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /home/zyq/smbshare/petalinux/settings.sh</span><br><span class="line">echo $PETALINUX</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">会看到打印信息</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/home/zyq/smbshare/petalinux/</span></span><br></pre></td></tr></table></figure>
<p>可以将 <code>source /home/zyq/smbshare/petalinux/settings.sh</code>
加入 <code>.bashrc</code> 就不用每次开机都输入上述命令了。</p>
<h1 id="二-建立petalinux工程">二、 建立PetaLinux工程</h1>
<p><a href="https://www.cnblogs.com/vacajk/p/6148857.html">参考</a></p>
<h2 id="step1-硬件描述文件">step1 硬件描述文件</h2>
<p>有两种PetaLinux工程建立的方法，一种是下载官方开发板的BSP包并安装，一种就是针对自己的硬件平台去剪裁Linux功能以适应自己的需求。</p>
<p>这里我们使用第二种方法。</p>
<p>使用vivado建立一个zynq工程，需要分配一些外设资源，参考ug1144。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233605.png" alt="1549976437075">
<figcaption aria-hidden="true">1549976437075</figcaption>
</figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233606.png" alt="1549976463868">
<figcaption aria-hidden="true">1549976463868</figcaption>
</figure>
<p>生成bitstream文件，导入到SDK。</p>
<p>输出的文件都在"<code>/&lt;vivado project&gt;/&lt;project name&gt;.sdk/&lt;top module name&gt;_hw_platform_0</code>"文件夹下。</p>
<p>后面使用只需要将"<code>&lt;top module name&gt;_hw_platform_0”文件夹中”system_wapper.hdf</code>"文件复制到Linux就行了。</p>
<h2 id="step2-创建petalinux工程">step2 创建Petalinux工程</h2>
<p>首先，创建一个PetaLinux工程目录。执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建工程，针对Zynq芯片，工程名称 h1_petalinux</span></span><br><span class="line">petalinux-create --type project --template zynq --name h1_petalinux</span><br></pre></td></tr></table></figure>
<p>接着，将 .hdf 文件复制到 h1_petalinux
文件夹下，然后我们来引用刚才输出的硬件描述文件。执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">petalinux-config --get-hw-description = /home/zyq/smbshare/proj/h1_petalinux</span><br></pre></td></tr></table></figure>
<p>注意 ”=“ 后面是hdf文件的路径，不是文件本身。</p>
<p>因为是空工程，我们会进入一个配置界面。在里面我们可以配置一些系统参数，主要的配置包括：启动方式，启动存储器分区表，启动文件名称等等。</p>
<p>这里我们先使用默认配置，直接按两次esc保存退出。</p>
<p>config需要的时间较长，耐心等待。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233607.png" alt="1549979677117">
<figcaption aria-hidden="true">1549979677117</figcaption>
</figure>
<p>如果config报错，可能是工程目录权限不够，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提示工程文件夹和petalinux的安装文件夹权限</span></span><br><span class="line">chmod 777 ../h1_petalinux</span><br><span class="line">chmod 777 petalinux</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">否则编译的时候，会发生错误</span></span><br></pre></td></tr></table></figure>
<h2 id="step3-内核配置">step3 内核配置</h2>
<p>我把USB配置一下，让系统能够识别出U盘，并进行读写操作。以后可能用到USB摄像头，就顺便把这个功能也打开吧。参考网址：http://www.wiki.xilinx.com/Zynq+Linux+USB+Device+Driver</p>
<p>配置kernel，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">petalinux-config -c kernel</span><br></pre></td></tr></table></figure>
<p>打开了kernel的配置界面，</p>
<p>USB的配置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Device Drivers</span><br><span class="line">USB support</span><br><span class="line">    &lt;*&gt; Support for Host-side USB</span><br><span class="line">    &lt;*&gt; EHCI HCD (USB 2.0) support</span><br><span class="line">    &lt;*&gt; USB Mass Storage support</span><br><span class="line">    &lt;*&gt; ChipIdea Highspeed Dual Role Controller</span><br><span class="line">    &lt;*&gt; ChipIdea host controller</span><br><span class="line">        USB Physical Layer drivers ---&gt;</span><br><span class="line">        &lt;*&gt; Generic ULPI Transceiver Driver</span><br></pre></td></tr></table></figure>
<p>上面都是按照主机模式来配置的。</p>
<p>其实除了“NOP USB Transceiver
Driver”是默认没有打开，剩下都是默认打开的。</p>
<p>USB摄像头配置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`#Device Drivers ---&gt;``#    Multimedia Support ---&gt;``#        Media USB Adapter ---&gt;``#            &lt;*&gt;USB Video Class (UVC) (also UVC Input Event Support) #打开``#    USB Support ---&gt;``#        &lt; &gt;USB 2.0 OTG FSM Implementation #关闭`</span><br></pre></td></tr></table></figure>
<p>配置完成后，ESC并保存。</p>
<h2 id="step3-u-boot配置">step3 u-boot配置</h2>
<p>shell中输入<code>petalinux-config -c u-boot</code>，然后等待GUI出来，这里暂时不改动啥，直接save（save为u-boot.config，名字随便取但不要留空），然后继续等（新建工程要等的时间还是比较长的，后来就会好的）。</p>
<h2 id="step4-编译rootfs">step4 编译rootfs</h2>
<p>命令<code>petalinux-config -c rootfs</code>，操作同上（save为默认即可）。</p>
<h2 id="step5-设备树配置">step5 <strong>设备树配置</strong></h2>
<p>若要修改，直接在工程文件夹下，Ctr+F搜索<code>.dts</code>就可以找到相关文件，做出相应修改暂时默认吧，不修改，按照它自动生成的设备树。</p>
<h2 id="step6-编译工程">step6 编译工程</h2>
<p>输入命令<code>petalinux-build</code>，等待即可，最后生成的文件在
<strong>image/linux</strong>下。</p>
<h2 id="step7-生成boot.bin">step7 生成BOOT.BIN</h2>
<p>把shell定位到image/linux目录下，执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">petalinux-package --boot --format BIN --fsbl zynq_fsbl.elf --fpga system.bit --u-boot</span><br></pre></td></tr></table></figure>
<p>在文件夹下就可以发现，多了一个BOOT.BIN</p>
<h2 id="step8-将文件拷入sd卡">step8 将文件拷入SD卡</h2>
<p>首先需要将SD卡分区，<a href="https://blog.csdn.net/lulugay/article/details/83240981">参考</a>。</p>
<p>打开文件夹{工程目录/images/linux/}，将 BOOT.BIN,
image.ub拷贝到BOOT分区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp BOOT.BIN image.ub /media/zyq/BOOT</span><br></pre></td></tr></table></figure>
<p>将 rootfs.cpio 拷贝到rootfs分区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp rootfs.cpio /media/zyq/rootfs</span><br></pre></td></tr></table></figure>
<h2 id="step9-开机">step9 <strong>开机</strong></h2>
<p>将SD卡，插回，开机。</p>
<p>开机时登录的用户名和密码都是<code>root</code>。</p>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>ZYNQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZYNQ 移植 Linux -- Frame Buffer</title>
    <url>/2020/05/11/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux-Frame-Buffer/</url>
    <content><![CDATA[<p>Framebuffer
是用一个视频输出设备从包含完整的帧数据的一个内存缓冲区中来驱动一个视频显示设备。简单的来说，就是使用一个内存区来存储显示内容，改变内存的数据就可以改变显示的内容。
在 github 上有一个开源工程：<a href="https://github.com/notro/fbtft">framebuffer</a> 完整的实现了
framebuffer驱动</p>
<span id="more"></span>
<blockquote>
<p>ref:</p>
<p>http://www.waveshare.net/wiki/1.3inch_LCD_HAT</p>
<p>https://krystof.io/mirroring-raspberry-pi-hdmi-video-to-a-st7789-1-3-inch-lcd-display/</p>
</blockquote>
<p>使用的屏幕分辨率 80*160，驱动芯片是 ST7735s，屏幕上除了 SPI
接口外，还有 RES、DC、BLK 三个接口</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233727.png" alt="spi-oled">
<figcaption aria-hidden="true">spi-oled</figcaption>
</figure>
<blockquote>
<p>注：与传统的SPI协议不同的地方是：由于是只需要显示，故而将从机发往主机的数据线进行了隐藏</p>
</blockquote>
<p>RESX：复位，模块上电时拉低，通常情况下置1； CSX：从机片选，
仅当CS为低电平时，芯片才会被使能。 D/CX：芯片的数据/命令控制引脚，当DC =
0时写命令，当DC = 1时写数据 SDA：传输的数据，即RGB数据；
SCL：SPI通信时钟；
对于SPI通信而言，数据是有传输时序的，即时钟相位（CPHA）与时钟极性(CPOL)的组合：
CPHA的高低决定串行同步时钟是在第一时钟跳变沿还是第二个时钟跳变沿数据被采集，当CPHL
= 0，在第一个跳变沿进行数据采集；
CPOL的高低决定串行同步时钟的空闲状态电平，CPOL = 0，为低电平。
从图中可以看出，当SCLK第一个下降沿时开始传输数据，一个时钟周期传输8bit数据，使用SPI0，按位传输,高位在前,低位在后。</p>
<h1 id="修改-vivado-工程">修改 Vivado 工程</h1>
<p>可以看出需要一个 SPI 接口和两个 GPIO 口，GPIO 口用来控制 RESX 和 D/CX
信号，BlockDesign 如图：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233728.png" alt="vivado-bd">
<figcaption aria-hidden="true">vivado-bd</figcaption>
</figure>
<p>其实驱动可以用 zynq 的 EMIO 的，但是一直没驱动起来，就用了
AXI-GPIO</p>
<h1 id="重新生成-boot.bin">重新生成 BOOT.bin</h1>
<p>因为修改了 vivado 工程，所以需要使用新的 <em>bitstream</em>
文件重新生成 BOOT.bin，步骤参考 <a href="https://blog.leo-fitz.com/2020/03/30/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux/#%E5%88%9B%E5%BB%BA-BOOT-bin">ZYNQ
移植 Linux-创建 BOOT.bin</a></p>
<p># 修改 device-tree</p>
<p>在上一篇 <a href="https://blog.leo-fitz.com/2020/05/05/ZYNQ-移植-Linux-SPI/">ZYNQ
移植 Linux -- SPI</a> 的基础上就增加了一个 AXI-GPIO，这部分的 dtc
可以直接使用 sdk 生成，无需修改，步骤参考 <a href="https://blog.leo-fitz.com/2020/03/30/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux/#%E5%88%9B%E5%BB%BA%E8%AE%BE%E5%A4%87%E6%A0%91%E6%96%87%E4%BB%B6">ZYNQ
移植 Linux-创建设备树文件</a></p>
<h1 id="配置内核">配置内核</h1>
<ol type="1">
<li><p>AXI-GPIO 配置</p>
<p>在上一篇 <a href="https://blog.leo-fitz.com/2020/05/05/ZYNQ-移植-Linux-SPI/">ZYNQ
移植 Linux -- SPI</a> 的基础上需要启用 AXI-GPIO 的驱动，步骤参考
xilinx-wiki：</p>
<p><a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841846/AXI+GPIO">AXI
GPIO</a></p>
<p>修改内核配置文件，启用如下配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">CONFIG_GPIO_SYSFS</span>=y</span><br><span class="line"><span class="attr">CONFIG_SYSFS</span>=y</span><br><span class="line"><span class="attr">CONFIG_GPIO_XILINX</span>=y (for axi_gpio)</span><br></pre></td></tr></table></figure></li>
<li><p>fbtft 配置</p>
<p>打开配置菜单，在 <em>linux-xlnx/</em> 目录下运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>
<p>load 之前的配置文件：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233729.png" alt="menuconfig">
<figcaption aria-hidden="true">menuconfig</figcaption>
</figure>
<p>启动 fbtft 驱动，路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Device Drivers  ---&gt;</span><br><span class="line">     [*] Staging drivers  ---&gt;</span><br><span class="line">     	&lt;*&gt;   Support <span class="keyword">for</span> small TFT LCD display modules  ---&gt;</span><br><span class="line">     		&lt;M&gt;   FB driver <span class="keyword">for</span> the ST7735R LCD Controller <span class="comment"># st7735 芯片对应的驱动</span></span><br><span class="line">     		&lt;M&gt;   Module to <span class="keyword">for</span> adding FBTFT devices       <span class="comment"># fbtft_device 驱动</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233730.png" alt="fbtft-configure">
<figcaption aria-hidden="true">fbtft-configure</figcaption>
</figure>
<blockquote>
<p>注意这里至少需要选择两个驱动，一个是
fbtft_device，一个是屏幕芯片对应的驱动，如果这里没有所使用的屏幕芯片的驱动，可以选择
<code>Generic FB driver for TFT LCD displays</code>
通用驱动，不过用起来稍微有点烦，需要 init 参数。</p>
<p>选中的那个地方是 <code>&lt;M&gt;</code>，这样可以为这些驱动单独生成
<em>.ko</em> 驱动文件，方便调试</p>
</blockquote>
<p>保存后，编译内核：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make xilinx_zynq_defconfig</span><br><span class="line">make -j8</span><br><span class="line">make UIMAGE_LOADADDR=0x8000 uImage -j8</span><br></pre></td></tr></table></figure>
<p>其中在第二个命令输出的 log 中会说生成的 <em>.ko</em>
文件的位置，将生成的内核 uImage 拷贝到内存卡，<em>.ko</em> 文件拷贝到
U盘 中。</p></li>
</ol>
<h1 id="加载驱动">加载驱动</h1>
<p>使用新的 <em>devicetree.dtb, uImage, BOOT.bin</em> 启动后，可以在
<em>/dev</em> 目录下看到 gpio 设备和 spi 设备，</p>
<h2 id="测试-gpio">测试 GPIO</h2>
<p>先测试下 gpio 是否工作正常，步骤可以参考 <a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841846/AXI+GPIO">xilinx-wiki
-- AXI GPIO</a></p>
<p>在 <em>/sys/class/gpio</em> 目录下执行 <code>ls -all</code>
命令可以看到 gpio 设备的信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xilinx@pynq:/sys/class/gpio$ <span class="built_in">ls</span> -all</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  2 root root    0 May 11 15:11 .</span><br><span class="line">drwxr-xr-x 48 root root    0 Jan 28  2018 ..</span><br><span class="line">--w-------  1 root root 4096 May 11 15:11 <span class="built_in">export</span></span><br><span class="line">lrwxrwxrwx  1 root root    0 May 11 15:11 gpiochip1014 -&gt; ../../devices/soc0/amba_pl/41210000.gpio/gpio/gpiochip1014</span><br><span class="line">lrwxrwxrwx  1 root root    0 May 11 15:11 gpiochip1016 -&gt; ../../devices/soc0/amba_pl/41200000.gpio/gpio/gpiochip1016</span><br><span class="line">lrwxrwxrwx  1 root root    0 May 11 15:11 gpiochip1020 -&gt; ../../devices/soc0/amba_pl/41200000.gpio/gpio/gpiochip1020</span><br><span class="line">lrwxrwxrwx  1 root root    0 May 11 15:11 gpiochip896 -&gt; ../../devices/soc0/amba/e000a000.gpio/gpio/gpiochip896</span><br><span class="line">--w-------  1 root root 4096 May 11 15:11 unexport</span><br></pre></td></tr></table></figure>
<p>我的 DC 和 RST 引脚是接在了 <em>gpiochip1014</em> 上了，这里 gpio
的编号是怎么来的还没完全搞明白，不过可以通过 gpio 设备的地址来确定</p>
<p>接下来对 gpio 的电平，测一下 fpga 管脚上的电平是不是按预期的变化，在
<em>/sys/class/gpio</em> 目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1014 &gt; <span class="built_in">export</span> <span class="comment"># gpiochip1014 的第一个管脚</span></span><br><span class="line"><span class="built_in">echo</span> 1015 &gt; <span class="built_in">export</span> <span class="comment"># gpiochip1014 的第二个管脚</span></span><br><span class="line"><span class="comment"># 这时在 /sys/class/gpio 目录下应该会产生 gpio1014 gpio1015 两个目录</span></span><br><span class="line"><span class="built_in">echo</span> out &gt; gpio1014/direction <span class="comment"># 设置 gpio 方向为输出</span></span><br><span class="line"><span class="built_in">echo</span> out &gt; gpio1015/direction</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; gpio1014/value <span class="comment"># 在第一个管脚上输出高电平</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; gpio1015/value <span class="comment"># 在第二个管脚上输出高电平</span></span><br><span class="line"><span class="built_in">echo</span> 0 &gt; gpio1014/value <span class="comment"># 在第一个管脚上输出低电平</span></span><br><span class="line"><span class="built_in">echo</span> 0 &gt; gpio1015/value <span class="comment"># 在第二个管脚上输出低电平</span></span><br></pre></td></tr></table></figure>
<p>接在 DC 和 RST 上的两个 gpio 管脚应该会按预期输出电平</p>
<h2 id="加载-fbtft-驱动">加载 fbtft 驱动</h2>
<p><em>.ko</em> 文件放在了 U盘里，首先将 U盘 挂载上，然后进入
<em>.ko</em> 文件所在位置，如何在 zynq 上挂载 U盘 可以参考 <a href="https://blog.leo-fitz.com/2020/04/13/ZYNQ-移植-Linux-USB/">ZYNQ
移植 Linux -- USB</a></p>
<p>使用如下命令加载驱动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> insmod fbtft_device.ko name=adafruit18 busnum=1 gpios=<span class="string">&quot;reset:1014,dc:1015&quot;</span> rotate=90 custom=1 height=160 width=80</span><br><span class="line"><span class="built_in">sudo</span> insmod fb_st7735r.ko</span><br></pre></td></tr></table></figure>
<p>如果成功了屏幕应该就会有显示了，在 <em>/dev</em> 目录下会产生
<em>fb0</em> 设备，不成功可以用 <code>dmesg</code> 命令查看内核
log，看下报错信息。</p>
<p>到这步还出现了个小问题，就是 fbtft 里面提供的 st7735 驱动是 160x128
分辨率的，而我的屏幕是 160x80 分辨率的，虽然已经在 fbtft_device.ko
的参数里制定了自定义的分辨率，但是屏幕的内容就显示不全，上面内容的冒到屏幕外了，下面还有一点屏幕空白，这应该是显示区域的起点错了，导致显示区域偏屏幕上方，看了下
st7735
的手册，发现这个芯片工作的逻辑是先发送要刷新区域的位置，然后再发送显示的内容：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233731.png" alt="y">
<figcaption aria-hidden="true">y</figcaption>
</figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233732.png" alt="y1">
<figcaption aria-hidden="true">y1</figcaption>
</figure>
<p>然后就在驱动代码里找啊找，在
<em>linux-xlnx/drivers/staging/fbtft/fb_st7735r.c</em> 文件里找到了
<code>static void set_addr_win(struct fbtft_par *par, int xs, int ys, int xe, int ye)</code>
这个函数，这应该就是发送显示区域的函数了，给 <code>ys</code> 和
<code>ye</code> 加了一个偏移，完美，显示区域到了屏幕中央了：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">set_addr_win</span><span class="params">(<span class="keyword">struct</span> fbtft_par *par, <span class="type">int</span> xs, <span class="type">int</span> ys, <span class="type">int</span> xe, <span class="type">int</span> ye)</span></span><br><span class="line">&#123;    </span><br><span class="line">    ys += <span class="number">0x18</span>; <span class="comment">// (128-80)/2</span></span><br><span class="line">    ye += <span class="number">0x18</span>;</span><br><span class="line"></span><br><span class="line">    write_reg(par, MIPI_DCS_SET_COLUMN_ADDRESS,</span><br><span class="line">          xs &gt;&gt; <span class="number">8</span>, xs &amp; <span class="number">0xFF</span>, xe &gt;&gt; <span class="number">8</span>, xe &amp; <span class="number">0xFF</span>);</span><br><span class="line"></span><br><span class="line">    write_reg(par, MIPI_DCS_SET_PAGE_ADDRESS,</span><br><span class="line">          ys &gt;&gt; <span class="number">8</span>, ys &amp; <span class="number">0xFF</span>, ye &gt;&gt; <span class="number">8</span>, ye &amp; <span class="number">0xFF</span>);</span><br><span class="line"></span><br><span class="line">    write_reg(par, MIPI_DCS_WRITE_MEMORY_START);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="开机自动加载驱动">开机自动加载驱动</h1>
<blockquote>
<p>ref:</p>
<p>https://blog.csdn.net/hunanchenxingyu/article/details/47292327</p>
<p>http://www.waveshare.net/wiki/1.3inch_LCD_HAT</p>
</blockquote>
<h2 id="将驱动放到-rootfs-的内核目录下">将驱动放到 rootfs
的内核目录下</h2>
<p>将 <em>fbtft_device.ko</em>、<em>fb_st7735r.ko</em> 放到
<em>/lib/modules/<code>uname -r</code>/</em> 对应目录下：</p>
<p>具体在
<code>/lib/modules/&lt;uname -r&gt;/kernel/drivers/staging/fbtft/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xilinx@pynq:/lib/modules/4.14.0-xilinx-00001-gbba05abe65f5-dirty/kernel/drivers/staging/fbtft$ <span class="built_in">ls</span></span><br><span class="line">fb_ili9486.ko  fb_st7735r.ko  fb_st7789v.ko  fbtft_device.ko  flexfb.ko</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips:</p>
<p><code>uname -r</code> 命令可以用来查看内核版本号</p>
</blockquote>
<p>之后在生成 map 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> depmod -A</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这步目的是为了生成一个引索，这样内核可以找到之前拷贝过来的驱动</p>
</blockquote>
<p>可以用 <code>modprobe</code>
命令测试是否可以加载，用法（在任意目录下执行）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">modprobe xxx.ko        <span class="comment">#加载某个模块</span></span><br><span class="line">modprobe -r xxx.ko     <span class="comment">#卸载某个模块</span></span><br></pre></td></tr></table></figure>
<h2 id="启用模块">启用模块</h2>
<p>编辑文件 <em>/etc/modules</em>，添加如下：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">fb<span class="emphasis">_st7735r</span></span><br><span class="line"><span class="emphasis">fbtft_</span>device</span><br></pre></td></tr></table></figure>
<h2 id="新建配置文件配置-fbtft">新建配置文件，配置 fbtft</h2>
<p>新建配置文件 <em>/etc/modprobe.d/fbtft.conf</em>，内容如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">options fbtft_device <span class="attribute">name</span>=adafruit18 <span class="attribute">busnum</span>=1 <span class="attribute">gpios</span>=reset:1014,dc:1015 <span class="attribute">rotate</span>=90 <span class="attribute">custom</span>=1 <span class="attribute">height</span>=160 <span class="attribute">width</span>=80</span><br></pre></td></tr></table></figure>
<p>上面 3 步完成后重启，应该就可以看到屏幕被点亮并显示了
console，说明驱动被自动加载了</p>
<h1 id="使用">使用</h1>
<blockquote>
<p>ref: https://github.com/notro/fbtft/wiki/Framebuffer-use</p>
</blockquote>
<ol type="1">
<li><p>显示图像化界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FRAMEBUFFER=/dev/fb0 startx</span><br></pre></td></tr></table></figure></li>
<li><p>播放视频</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mplayer -vo fbdev:/dev/fb0 -zoom -x 160 -y 80 -nosound test.mp4</span><br></pre></td></tr></table></figure>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<p><iframe src="//player.bilibili.com/player.html?aid=243218293&bvid=BV1ae411W731&cid=189943254&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></p>
</div></li>
</ol>
]]></content>
      <categories>
        <category>ZYNQ 移植 Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZYNQ 移植 Linux -- AXI-GPIO</title>
    <url>/2020/05/06/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux-AXI-GPIO/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>ZYNQ 移植 Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZYNQ 移植 Linux -- SPI</title>
    <url>/2020/05/05/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux-SPI/</url>
    <content><![CDATA[<h1 id="修改-vivado-工程启用-ps-spi">修改 vivado 工程，启用 PS-SPI</h1>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233811.png" alt="vivado SPI">
<figcaption aria-hidden="true">vivado SPI</figcaption>
</figure>
<span id="more"></span>
<h1 id="重新生成-boot.bin">重新生成 BOOT.bin</h1>
<p>因为修改了 vivado 工程，所以需要使用新的 <em>bitstream</em>
文件重新生成 BOOT.bin</p>
<h1 id="修改-device-tree">修改 device-tree</h1>
<ol type="1">
<li><p>首先参考<a href="https://blog.leo-fitz.com/2020/03/30/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux/#%E5%88%9B%E5%BB%BA%E8%AE%BE%E5%A4%87%E6%A0%91%E6%96%87%E4%BB%B6">创建设备树文件</a>使用
SDK 重新生成设备树文件，可以看到在 <em>pcw.dtsi</em> 文件中多了
<code>&amp;spi0 &#123;</code>，这个是 SDK 自动生成的设备树；</p></li>
<li><p>修改 <em>pcw.dtsi</em> 文件中的 <code>&amp;spi0 &#123;</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&amp;spi0 &#123;</span><br><span class="line">    is-decoded-cs = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">    num-cs = &lt;<span class="number">3</span>&gt;;</span><br><span class="line">    status = <span class="string">&quot;okay&quot;</span>;</span><br><span class="line">    spidev@<span class="number">0</span> &#123;</span><br><span class="line">        compatible = <span class="string">&quot;spidev&quot;</span>;</span><br><span class="line">        reg = &lt;<span class="number">0</span>&gt;; <span class="comment">/*chipselect 0*/</span></span><br><span class="line">        spi-max-frequency = &lt;<span class="number">50000000</span>&gt;;</span><br><span class="line">        spi-cpol;</span><br><span class="line">        spi-cpha;</span><br><span class="line">    &#125;;</span><br><span class="line">    spidev@<span class="number">1</span> &#123;</span><br><span class="line">        compatible = <span class="string">&quot;spidev&quot;</span>;</span><br><span class="line">        reg = &lt;<span class="number">1</span>&gt;; <span class="comment">/*chipselect 1*/</span></span><br><span class="line">        spi-max-frequency = &lt;<span class="number">50000000</span>&gt;;</span><br><span class="line">        spi-cpol;</span><br><span class="line">        spi-cpha;</span><br><span class="line">    &#125;;</span><br><span class="line">    spidev@<span class="number">2</span> &#123;</span><br><span class="line">        compatible = <span class="string">&quot;spidev&quot;</span>;</span><br><span class="line">        reg = &lt;<span class="number">2</span>&gt;; <span class="comment">/*chipselect 2*/</span></span><br><span class="line">        spi-max-frequency = &lt;<span class="number">50000000</span>&gt;;</span><br><span class="line">        spi-cpol;</span><br><span class="line">        spi-cpha;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中 <code>reg = &lt;*&gt;;</code> 为片选信号，可以控制
<code>SPIO_SS*</code> 引脚；</p>
<p><code>is-decoded-cs = &lt;0&gt;;</code> 为不使用编码器，所以现在 zynq
的 SPI-Mater 最多只能接 3 个 slaver，需要更多的 slaver 可以使用
3-8编码器；</p>
<p><strong>!!!</strong> <code>spi-cpol; spi-cpha;</code>
这两行一定要加！</p>
<p>修改 <em>top.dts</em> 中的 <code>aliases</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">aliases &#123;</span><br><span class="line">    ethernet0 = &amp;gem0;</span><br><span class="line">    i2c0 = &amp;i2c0;</span><br><span class="line">    serial0 = &amp;uart0;</span><br><span class="line">    spi0 = &amp;qspi;</span><br><span class="line">    spi1 = &amp;spi0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>添加了 <code>spi1 = &amp;spi0;</code></p></li>
<li><p>重新编译设备树：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dtc -I dts -O dtb -o devicetree.dtb zynq-pynqz2.dts</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="配置内核">配置内核</h1>
<p>参考 <a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842437/SPI+Zynq+driver">Xlinx
wiki: SPI Zynq driver</a> 需要启用
<code>CONFIG_SPI_CADENCE</code>，这个选项在
<em>xilinx_zynq_defconfig</em> 文件中是默认启用的：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233812.png" alt="SPI_CADENCE">
<figcaption aria-hidden="true">SPI_CADENCE</figcaption>
</figure>
<p>参考 <a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842255/Linux+SPI+Driver">Xlinx
wiki: Linux SPI Driver</a> 需要启用
<code>CONFIG_SPI_XILINX</code>，这个选项在
<em>xilinx_zynq_defconfig</em> 文件中也是默认启用的：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233813.png" alt="CONFIG_SPI_XILINX">
<figcaption aria-hidden="true">CONFIG_SPI_XILINX</figcaption>
</figure>
<p>但是这样配置怎么也找不到 <em>spidev</em> 设备，后来在 <a href="https://forums.xilinx.com/t5/Embedded-Linux/linux-SPI-for-zynq/td-p/417133">forums.xilinx</a>
上看到的一个回答：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233814.png" alt="USER_MODE_SPI">
<figcaption aria-hidden="true">USER_MODE_SPI</figcaption>
</figure>
<p>需要启用 <code>CONFIG_SPI_SPIDEV</code> ，在 <em>Device Drivers -&gt;
SPI Support -&gt; User mode SPI device driver support</em></p>
<p>最后重新编译内核：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make xilinx_zynq_defconfig</span><br><span class="line">make -j8</span><br><span class="line">make UIMAGE_LOADADDR=0x8000 uImage -j8</span><br></pre></td></tr></table></figure>
<p>使用新的 <em>dtb, uImage, BOOT.bin</em> 启动后，就可以在
<em>/dev/</em> 下面看到 SPI 设备了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xilinx@pynq:~$ <span class="built_in">ls</span> /dev/spi*</span><br><span class="line">/dev/spidev1.0  /dev/spidev1.1  /dev/spidev1.2</span><br></pre></td></tr></table></figure>
<h1 id="用户程序测试">用户程序测试</h1>
<p>linux-xlnx 中提供了 spi test 程序，自己写可以参考，路径在
<em>linux-xlnx/tools/spi/spidev_test.c</em>，编译命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arm-linux-gnueabihf-gcc -O2 spidev_test.c -o spidev_test</span><br></pre></td></tr></table></figure>
<p>将生成的 <em>spidev_test</em> 拷贝到 ZYNQ 中，运行
<code>./spidev_test</code>，可以看到 SPI 接口上产生了正确的波形：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233815.png" alt="SPI-WAVE">
<figcaption aria-hidden="true">SPI-WAVE</figcaption>
</figure>
]]></content>
      <categories>
        <category>ZYNQ 移植 Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZYNQ 移植 Linux -- USB</title>
    <url>/2020/04/13/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux-USB/</url>
    <content><![CDATA[<p>在之前 <a href="https://blog.leo-fitz.com/2020/03/30/ZYNQ-移植-Linux/">ZYNQ 移植
Linux</a> 的基础上，下一步就是要移植驱动了，但是每次都把 SD
卡拔下来把驱动拷进去再重新开机太麻烦了，ZYNQ 上有两个 USB 外设，可以配成
Host、Peripheral、OTG 三种模式，因此我们可以将 USB 配置成 Host
模式，这样 ZYNQ 上的 Linux 系统就可以读取 USB 接口上的 U盘了。</p>
<span id="more"></span>
<blockquote>
<p>Reference:</p>
<p>https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842272/Zynq+Linux+USB+Device+Driver#ZynqLinuxUSBDeviceDriver-PeripheralMode</p>
<p>https://blog.csdn.net/u010580016/article/details/104188236?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-8&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-8</p>
<p>https://stackoverflow.com/questions/57823438/how-to-configure-petalinux-device-tree-with-usb-correctly</p>
</blockquote>
<p>这里现在只写了 Host 模式的配置，其他模式的配置可以参考 <a href="https://blog.csdn.net/u010580016/article/details/104188236?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-8&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-8">ZYNQ学习之路8.USB总线学习(一)</a>
和 <a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842272/Zynq+Linux+USB+Device+Driver#ZynqLinuxUSBDeviceDriver-PeripheralMode">xilinx-wiki</a>。</p>
<h1 id="配置内核">配置内核</h1>
<p>按照 <a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842272/Zynq+Linux+USB+Device+Driver#ZynqLinuxUSBDeviceDriver-PeripheralMode">xilinx-wiki</a>
中的步骤，需要对内核进行如下配置：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Device</span> Drivers</span><br><span class="line"><span class="attribute">USB</span> support</span><br><span class="line">    <span class="section">&lt;*&gt;</span> <span class="attribute">Support</span> for Host-side USB</span><br><span class="line">    <span class="section">&lt;*&gt;</span> <span class="attribute">EHCI</span> HCD (USB <span class="number">2</span>.<span class="number">0</span>) support</span><br><span class="line">    <span class="section">&lt;*&gt;</span> <span class="attribute">USB</span> Mass Storage support</span><br><span class="line">    <span class="section">&lt;*&gt;</span> <span class="attribute">ChipIdea</span> Highspeed Dual Role Controller</span><br><span class="line">    <span class="section">&lt;*&gt;</span> <span class="attribute">ChipIdea</span> host controller</span><br><span class="line">        <span class="attribute">USB</span> Physical Layer drivers ---&gt;</span><br><span class="line">        <span class="section">&lt;*&gt;</span> <span class="attribute">Generic</span> ULPI Transceiver Driver</span><br></pre></td></tr></table></figure>
<p>不过这些在 <em>xilinx_zynq_defconfig</em>
这个文件里好像都配置好了，不过还是按照步骤来一遍：</p>
<p>在 <a href="https://blog.leo-fitz.com/2020/03/30/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux/#%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8">编译内核</a>
这一步，先运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>
<p>使用这种类似图像界面配置：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233832.png" alt="menuconfig">
<figcaption aria-hidden="true">menuconfig</figcaption>
</figure>
<p>然后 <code>&lt;Load&gt;</code> 配置文件：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233833.png" alt="load">
<figcaption aria-hidden="true">load</figcaption>
</figure>
<p>配置文件的路径是
<em>arch/arm/configs/xilinx_zynq_defconfig</em>，按照上面的要求进行配置，最后
<code>&lt;Save&gt;</code>，然后 <code>&lt;Exit&gt;</code></p>
<p>然后重新编译内核：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make xilinx_zynq_defconfig</span><br><span class="line">make -j8</span><br><span class="line">make UIMAGE_LOADADDR=0x8000 uImage -j8</span><br></pre></td></tr></table></figure>
<h1 id="修改设备树">修改设备树</h1>
<p>之前的在这里被坑了一下，<a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842272/Zynq+Linux+USB+Device+Driver#ZynqLinuxUSBDeviceDriver-PeripheralMode">xilinx-wiki</a>
写的不太明白，像我这种菜鸡没看懂怎么去修改设备树，后来在 <a href="https://stackoverflow.com/questions/57823438/how-to-configure-petalinux-device-tree-with-usb-correctly">stackoverflow</a>
上找到了一篇文章解决了问题。</p>
<p>在前一篇的 <a href="https://blog.leo-fitz.com/2020/03/30/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux/#%E5%88%9B%E5%BB%BA%E8%AE%BE%E5%A4%87%E6%A0%91%E6%96%87%E4%BB%B6">创建设备树文件</a>
步骤中，会生成 <em>system-top.dts, pcw.dtsi, pl.dtsi</em>
三个文件，需要修改 <em>system-top.dts, pcw.dtsi</em> 这两个文件：</p>
<p>修改 <em>pcw.dtsi</em> ：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * CAUTION: This file is automatically generated by Xilinx.</span></span><br><span class="line"><span class="comment"> * Version:</span></span><br><span class="line"><span class="comment"> * Today is: Thu Apr  9 12:48:12 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">cpus</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="title class_">cpu@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">operating-points</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">650000</span> <span class="number">1000000</span> <span class="number">325000</span> <span class="number">1000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="variable">&amp;gem0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">phy-mode</span> <span class="operator">=</span> <span class="string">&quot;rgmii-id&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">xlnx,ptp-enet-clock</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x6750918</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">400000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="variable">&amp;intc</span> <span class="punctuation">&#123;</span></span><br><span class="line">    num_<span class="attr">cpus</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    num_<span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">96</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="variable">&amp;qspi</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">is-dual</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">num-cs</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">spi-rx-bus-width</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">4</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">spi-tx-bus-width</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">4</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="variable">&amp;sdhci0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">xlnx,has-cd</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">xlnx,has-power</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">xlnx,has-wp</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;serial&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">port-number</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="variable">&amp;usb0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    dr_<span class="attr">mode</span> <span class="operator">=</span> <span class="string">&quot;host&quot;</span><span class="punctuation">;</span></span><br><span class="line">    phy_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;ulpi&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">usb-phy</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;usb_phy0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="variable">&amp;clkc</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">fclk-enable</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x7</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">ps-clk-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">50000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure>
<p>然后修改 <em>system-top.dts</em> :</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * CAUTION: This file is automatically generated by Xilinx.</span></span><br><span class="line"><span class="comment"> * Version:</span></span><br><span class="line"><span class="comment"> * Today is: Thu Apr  9 12:48:12 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">/dts-v1/</span><span class="punctuation">;</span></span><br><span class="line"><span class="keyword">/include/</span> <span class="string">&quot;zynq-7000.dtsi&quot;</span></span><br><span class="line"><span class="keyword">/include/</span> <span class="string">&quot;pl.dtsi&quot;</span></span><br><span class="line"><span class="keyword">/include/</span> <span class="string">&quot;pcw.dtsi&quot;</span></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">bootargs</span> <span class="operator">=</span> <span class="string">&quot;earlycon&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">stdout-path</span> <span class="operator">=</span> <span class="string">&quot;serial0:115200n8&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">        ethernet0 = <span class="variable">&amp;gem0</span><span class="punctuation">;</span></span><br><span class="line">        i2c0 = <span class="variable">&amp;i2c0</span><span class="punctuation">;</span></span><br><span class="line">        serial0 = <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        spi0 = <span class="variable">&amp;qspi</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="title class_">memory</span> <span class="punctuation">&#123;</span></span><br><span class="line">        device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;memory&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x0</span> <span class="number">0x20000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">    usb_phy0:</span> <span class="title class_">phy0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;ulpi-phy&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="meta">#phy-cells = &lt;0&gt;;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0xe0002000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">view-port</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x170</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">drv-vbus</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，在 <em>pcw.dtsi</em> 中修改了 <em>usb0</em> 这一项，设置了
<code>dr_mode</code> 为 <code>host</code>，设置了 <code>usb-phy</code>
为 <code>usb_phy0</code>，然后在 <em>system-top.dts</em> 对
<code>usb_phy0</code> 进行了定义，这个与 <a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842272/Zynq+Linux+USB+Device+Driver#ZynqLinuxUSBDeviceDriver-PeripheralMode">xilinx-wiki</a>
中略有不同，其实是在 <em>zynq-7000.dtsi</em> 文件中对 <code>usb0</code>
有定义，而 <em>pcw.dtsi</em> 中对 <code>usb0</code>
的是一个覆盖定义(表述不是很准确，等我后面再去查一下 dts 的语法)。</p>
<p>然后重新编译设备树：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dtc -I dts -O dtb -o devicetree.dtb zynq-pynqz2.dts</span><br></pre></td></tr></table></figure>
<h1 id="最后">最后</h1>
<p>最后将内核 <em>uImage</em> 和 设备树 <em>devicetree.dtb</em> 拷贝到
SD 卡重新启动 ZYNQ，在将 U盘插入 USB 口后，可以看到 <em>/dev/</em>
下多了 <em>sda</em> 设备，将其挂载，便可读写 U盘的文件了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br></pre></td></tr></table></figure>
<p>通过访问 <em>/mnt</em> 文件夹就可以访问 U盘的文件了。</p>
<h1 id="主要问题总结">主要问题总结</h1>
<ul>
<li>不熟悉设备树编写的规则，卡了好久；</li>
</ul>
]]></content>
      <categories>
        <category>ZYNQ 移植 Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZYNQ 移植 Linux -- VDMA</title>
    <url>/2020/04/09/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux-VDMA/</url>
    <content><![CDATA[<p>https://lauri.xn--vsandi-pxa.com/hdl/zynq/xilinx-video-capture.html</p>
<p>https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842337/Linux+Soft+DMA+Driver</p>
]]></content>
      <categories>
        <category>ZYNQ 移植 Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ZYNQ 移植 Linux</title>
    <url>/2020/03/30/ZYNQ-%E7%A7%BB%E6%A4%8D-Linux/</url>
    <content><![CDATA[<p>使用传统方式在 ZYNQ 上移植 Linux。</p>
<blockquote>
<p>reference:
https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841738/Getting+Started</p>
<p>硬件平台: <a href="http://www.tul.com.tw/ProductsPYNQ-Z2.html">PYNQ-Z2</a></p>
<p>Vivado版本: 2018.2</p>
</blockquote>
<span id="more"></span>
<h1 id="vivado-工程创建">Vivado 工程创建</h1>
<p>创建一个 zynq 的 vivado 工程，最小系统就行了，blockdesign 如图：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233854.png" alt="blockdesign">
<figcaption aria-hidden="true">blockdesign</figcaption>
</figure>
<p>这里添加了一个 AXI-GPIO，是为了后面练习驱动。</p>
<p>生成 bitstream 后，导出到 sdk。</p>
<h1 id="下载需要的资源">下载需要的资源</h1>
<table>
<colgroup>
<col style="width: 3%">
<col style="width: 43%">
<col style="width: 52%">
</colgroup>
<thead>
<tr>
<th></th>
<th><strong>Repository Name</strong></th>
<th><strong>Content</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>https://github.com/Xilinx/linux-xlnx.git</td>
<td>The Linux kernel with Xilinx patches and drivers</td>
</tr>
<tr>
<td>2</td>
<td>https://github.com/Xilinx/u-boot-xlnx.git</td>
<td>The u-boot bootloader with Xilinx patches and drivers</td>
</tr>
<tr>
<td>3</td>
<td>https://github.com/Xilinx/device-tree-xlnx.git</td>
<td>Device Tree generator plugin for xsdk</td>
</tr>
<tr>
<td>4</td>
<td>https://git.kernel.org/pub/scm/utils/dtc/dtc.git</td>
<td>Device Tree compiler (required to build U-Boot)</td>
</tr>
<tr>
<td>5</td>
<td>https://github.com/Xilinx/arm-trusted-firmware.git</td>
<td>ARM Trusted Firmware (required for Zynq UltraScale+ MPSoC and Versal
platforms)</td>
</tr>
<tr>
<td>6</td>
<td>https://github.com/Xilinx/xen.git</td>
<td>Xilinx Xen branch for Zynq UltraScale+ and Versal platforms</td>
</tr>
<tr>
<td>7</td>
<td>https://github.com/Xilinx/embeddedsw.git</td>
<td>Xilinx embeddedsw repository for bare-metal applications such as
FSBL, PMU Firmware, PLM</td>
</tr>
</tbody>
</table>
<h1 id="配置环境">配置环境</h1>
<h2 id="build-device-tree-compiler-dtc">Build Device Tree Compiler
(dtc)</h2>
<blockquote>
<p>Tools Required: vivado sdk</p>
<p>Source Required: <a href="https://git.kernel.org/pub/scm/utils/dtc/dtc.git">Device Tree
compiler</a></p>
</blockquote>
<p>下载<a href="https://git.kernel.org/pub/scm/utils/dtc/dtc.git">Device
Tree compiler</a>，在目录 <em>dtc</em> 下运行：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">make</span></span><br></pre></td></tr></table></figure>
<p>会在当前目录生成 <code>dtc</code>，一个可执行文件，将其添加到 PATH
中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=`<span class="built_in">pwd</span>`:<span class="variable">$PATH</span> <span class="comment"># 或者把 `pwd` 换为 &lt;dtc&gt; 目录</span></span><br></pre></td></tr></table></figure>
<h2 id="其他">其他</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export PATH=/home/fitz/linux-on-zynq/linux-xlnx/scripts/dtc:$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/home/fitz/linux-on-zynq/dtc:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/home/fitz/linux-on-zynq/u-boot-xlnx/tools:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=arm-linux-gnueabihf-</span><br><span class="line"><span class="built_in">export</span> ARCH=arm</span><br></pre></td></tr></table></figure>
<h1 id="创建设备树文件">创建设备树文件</h1>
<blockquote>
<p>Tools Required: vivado sdk</p>
<p>Source Required: <a href="https://github.com/Xilinx/device-tree-xlnx.git">device-tree-xlnx</a></p>
</blockquote>
<p>下载与 vivado 版本对应的 device-tree-xlnx</p>
<p>在 vivado sdk 中添加设备树插件：</p>
<p>SDK Menu: Xilinx &gt; Repositories &gt; New…
<code>&lt;device-tree-xlnx&gt;</code> &gt; OK</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233855.png" alt="add-repositories">
<figcaption aria-hidden="true">add-repositories</figcaption>
</figure>
<p>然后创建一个 BSP，选择 device_tree 模板：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233856.png" alt="bsp">
<figcaption aria-hidden="true">bsp</figcaption>
</figure>
<p>生成的 .dts/.dtsi 在 <em>/device_tree_bsp_0/ folder</em>
目录下，会使用到文件有：<em>system-top.dts, pcw.dtsi, pl.dtsi</em></p>
<p>这几个文件在后面编译 u-boot 的时候会用到，在编译 u-boot
的时候同时生成 .dtb</p>
<h1 id="编译-u-boot-编译设备树">编译 U-BOOT &amp; 编译设备树</h1>
<blockquote>
<p>Tools Required: vivado sdk</p>
<p>Source Required: <a href="https://github.com/Xilinx/device-tree-xlnx.git">u-boot-xlnx</a></p>
</blockquote>
<p>下载与 vivado 版本对应的 u-boot-xlnx，需要创建/修改 4 个文件：</p>
<ol type="1">
<li><p><em>u-boot-xlnx/include/configs/zynq_pynqz2.h</em>（新建）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __CONFIG_ZYNQ_PYNQZ2_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __CONFIG_ZYNQ_PYNQZ2_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_ZYNQ_I2C0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define PYNQZ2 PS Clock Frequency to 50MHz */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_ZYNQ_PS_CLK_FREQ 50000000UL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;configs/zynq-common.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __CONFIG_ZYNQ_PYNQZ2_H */</span></span></span><br></pre></td></tr></table></figure>
<p>这里面定义了 PS 时钟频率 50 MHz</p></li>
<li><p><em>u-boot-xlnx/include/configs/zynq-common.h</em>（修改）</p>
<p>将：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;sdboot=if mmcinfo; then &quot;</span> \</span><br><span class="line">        <span class="string">&quot;run uenvboot; &quot;</span> \</span><br><span class="line">        <span class="string">&quot;echo Copying Linux from SD to RAM... &amp;&amp; &quot;</span> \</span><br><span class="line">        <span class="string">&quot;load mmc 0 $&#123;kernel_load_address&#125; $&#123;kernel_image&#125; &amp;&amp; &quot;</span> \</span><br><span class="line">        <span class="string">&quot;load mmc 0 $&#123;devicetree_load_address&#125; $&#123;devicetree_image&#125; &amp;&amp; &quot;</span> \</span><br><span class="line">        <span class="string">&quot;load mmc 0 $&#123;ramdisk_load_address&#125; $&#123;ramdisk_image&#125; &amp;&amp; &quot;</span> \</span><br><span class="line">        <span class="string">&quot;bootm $&#123;kernel_load_address&#125; $&#123;ramdisk_load_address&#125; $&#123;devicetree_load_address&#125;; &quot;</span> \</span><br><span class="line">    <span class="string">&quot;fi\0&quot;</span> \</span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;sdboot=if mmcinfo; then &quot;</span> \</span><br><span class="line">        <span class="string">&quot;run uenvboot; &quot;</span> \</span><br><span class="line">        <span class="string">&quot;echo Copying Linux from SD to RAM... &amp;&amp; &quot;</span> \</span><br><span class="line">        <span class="string">&quot;load mmc 0 $&#123;kernel_load_address&#125; $&#123;kernel_image&#125; &amp;&amp; &quot;</span> \</span><br><span class="line">        <span class="string">&quot;load mmc 0 $&#123;devicetree_load_address&#125; $&#123;devicetree_image&#125; &amp;&amp; &quot;</span> \</span><br><span class="line">        <span class="string">&quot;bootm $&#123;kernel_load_address&#125; - $&#123;devicetree_load_address&#125;; &quot;</span> \</span><br><span class="line">    <span class="string">&quot;fi\0&quot;</span> \</span><br></pre></td></tr></table></figure>
<p>修改 sboot 这段，这段表示从 SD
卡启动时，文件加载的情况，我们将文件系统放在了 SD
卡的第二个分区，因此不需要 load ramdisk，这里的 <code>-</code>
号，左右都要有空格，意思是替代的地址，那么就要把 <code>-</code> 作为
<code>$&#123;ramdisk_load_address&#125;</code> 的替代，告诉 u-boot
和内核没有文件系统，启动的时候就不会加载它。</p></li>
<li><p><em>u-boot-xlnx/configs/zynq_pynqz2_defconfig</em></p>
<p><em>zynq_pynqz2_defconfig</em> 可以参考同目录下的
<em>u-boot-xlnx/configs/zynq_zybo_defconfig</em>，稍作修改：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CONFIG_ARM=y</span><br><span class="line">CONFIG_SYS_CONFIG_NAME=<span class="string">&quot;zynq_pynqz2&quot;</span></span><br><span class="line">CONFIG_ARCH_ZYNQ=y</span><br><span class="line">CONFIG_SYS_TEXT_BASE=<span class="number">0x4000000</span></span><br><span class="line">CONFIG_SPL_STACK_R_ADDR=<span class="number">0x200000</span></span><br><span class="line">CONFIG_DEFAULT_DEVICE_TREE=<span class="string">&quot;zynq-pynqz2&quot;</span></span><br><span class="line">CONFIG_DEBUG_UART=y</span><br><span class="line">CONFIG_DISTRO_DEFAULTS=y</span><br><span class="line">CONFIG_FIT=y</span><br><span class="line">CONFIG_FIT_VERBOSE=y</span><br><span class="line">CONFIG_FIT_SIGNATURE=y</span><br><span class="line">CONFIG_BOOTCOMMAND=<span class="string">&quot;run $modeboot || run distro_bootcmd&quot;</span></span><br><span class="line"># CONFIG_DISPLAY_CPUINFO is not <span class="built_in">set</span></span><br><span class="line">CONFIG_SPL=y</span><br><span class="line">CONFIG_SPL_STACK_R=y</span><br><span class="line">CONFIG_SPL_OS_BOOT=y</span><br><span class="line">CONFIG_SPL_DM_MMC=y</span><br><span class="line">CONFIG_SYS_PROMPT=<span class="string">&quot;Zynq&gt; &quot;</span></span><br><span class="line">CONFIG_CMD_THOR_DOWNLOAD=y</span><br><span class="line">CONFIG_CMD_DFU=y</span><br><span class="line">CONFIG_CMD_FPGA_LOADBP=y</span><br><span class="line">CONFIG_CMD_FPGA_LOADFS=y</span><br><span class="line">CONFIG_CMD_FPGA_LOADMK=y</span><br><span class="line">CONFIG_CMD_FPGA_LOADP=y</span><br><span class="line">CONFIG_CMD_GPIO=y</span><br><span class="line">CONFIG_CMD_I2C=y</span><br><span class="line">CONFIG_CMD_MMC=y</span><br><span class="line">CONFIG_CMD_SF=y</span><br><span class="line">CONFIG_CMD_USB=y</span><br><span class="line"># CONFIG_CMD_SETEXPR is not <span class="built_in">set</span></span><br><span class="line">CONFIG_CMD_TFTPPUT=y</span><br><span class="line">CONFIG_CMD_CACHE=y</span><br><span class="line">CONFIG_CMD_EXT4_WRITE=y</span><br><span class="line">CONFIG_OF_EMBED=y</span><br><span class="line">CONFIG_ENV_IS_IN_SPI_FLASH=y</span><br><span class="line">CONFIG_NET_RANDOM_ETHADDR=y</span><br><span class="line">CONFIG_SPL_DM_SEQ_ALIAS=y</span><br><span class="line">CONFIG_DFU_MMC=y</span><br><span class="line">CONFIG_DFU_RAM=y</span><br><span class="line">CONFIG_FPGA_XILINX=y</span><br><span class="line">CONFIG_DM_GPIO=y</span><br><span class="line">CONFIG_MMC=y</span><br><span class="line">CONFIG_MMC_SDHCI=y</span><br><span class="line">CONFIG_MMC_SDHCI_ZYNQ=y</span><br><span class="line">CONFIG_SPI_FLASH=y</span><br><span class="line">CONFIG_SPI_FLASH_BAR=y</span><br><span class="line">CONFIG_SPI_FLASH_SPANSION=y</span><br><span class="line">CONFIG_PHY_MARVELL=y</span><br><span class="line">CONFIG_PHY_REALTEK=y</span><br><span class="line">CONFIG_PHY_XILINX=y</span><br><span class="line">CONFIG_ZYNQ_GEM=y</span><br><span class="line">CONFIG_ZYNQ_GEM_SPI_MAC_OFFSET=<span class="number">0x20</span></span><br><span class="line">CONFIG_DEBUG_UART_ZYNQ=y</span><br><span class="line">CONFIG_DEBUG_UART_BASE=<span class="number">0xe0000000</span></span><br><span class="line">CONFIG_DEBUG_UART_CLOCK=<span class="number">50000000</span></span><br><span class="line">CONFIG_ZYNQ_SERIAL=y</span><br><span class="line">CONFIG_ZYNQ_QSPI=y</span><br><span class="line">CONFIG_USB=y</span><br><span class="line">CONFIG_USB_EHCI=y</span><br><span class="line">CONFIG_USB_EHCI_HCD=y</span><br><span class="line">CONFIG_USB_EHCI_ZYNQ=y</span><br><span class="line">CONFIG_USB_ULPI_VIEWPORT=y</span><br><span class="line">CONFIG_USB_ULPI=y</span><br><span class="line">CONFIG_USB_STORAGE=y</span><br><span class="line">CONFIG_USB_GADGET=y</span><br><span class="line">CONFIG_USB_GADGET_MANUFACTURER=<span class="string">&quot;Xilinx&quot;</span></span><br><span class="line">CONFIG_USB_GADGET_VENDOR_NUM=<span class="number">0x03fd</span></span><br><span class="line">CONFIG_USB_GADGET_PRODUCT_NUM=<span class="number">0x0300</span></span><br><span class="line">CONFIG_CI_UDC=y</span><br><span class="line">CONFIG_USB_GADGET_DOWNLOAD=y</span><br></pre></td></tr></table></figure>
<p>在这里指定了 device tree，因此需要将前一个步骤中生成的
<em>system-top.dts, pcw.dtsi, pl.dtsi</em> 复制到
<em>u-boot-xlnx/arch/arm/dts/</em> 目录下，将 <em>system-top.dts</em>
改名为 <em>zynq-pynqz2.dts</em></p></li>
</ol>
<p>在完成这些后，就可以编译 u-boot 了，运行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make distclean</span><br><span class="line">make zynq_pynqz2_defconfig</span><br><span class="line">make <span class="comment"># 或者 make -j8</span></span><br></pre></td></tr></table></figure>
<p>会在 <em>u-boot-xlnx/</em> 目录下生成 <em>u-boot</em>
文件，将其改名为 <em>u-boot.elf</em> 待用，更新一些版本的 vivado
可以直接生成 <em>u-boot.elf</em> 文件。</p>
<p>同时在 <em>arch/arm/dts/</em> 目录下生成 <em>zynq-pynqz2.dtb</em>
文件，即编译好的设备树文件，将其改名为 <em>devicetree.dtb</em>
待用。</p>
<blockquote>
<p>设备树也可以单独编译，命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dtc -I dts -O dtb -o devicetree.dtb system-top.dts</span><br></pre></td></tr></table></figure>
<p><em>devicetree.dtb</em> 为生成的 dtb
文件名字/路径，<em>system-top.dts</em> 为待编译的设备树文件</p>
</blockquote>
<h1 id="创建-boot.bin">创建 BOOT.bin</h1>
<blockquote>
<p>Tools Required: vivado sdk</p>
</blockquote>
<p>首先用 vivado sdk 生成 fsbl，即新建一个
<code>Application Project</code>，选择 <code>Zynq FSBL</code> 模板：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233857.png" alt="fsbl">
<figcaption aria-hidden="true">fsbl</figcaption>
</figure>
<p>然后在这个 Project 上右击 &gt; Create Boot Image</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233858.png" alt="Create-Boot-Image">
<figcaption aria-hidden="true">Create-Boot-Image</figcaption>
</figure>
<p>依次添加 <em>fsbl.elf, .bit, u-boot.elf</em>，其中的
<em>u-boot.elf</em> 是在上一个步骤中生成的，最后点击
<code>Create Image</code>，会在
<em><vivado_project>/<vivado_project>.sdk/fsbl/bootimage/</vivado_project></vivado_project></em>
目录下生成 <em>BOOT.bin</em> 文件。</p>
<h1 id="编译内核">编译内核</h1>
<blockquote>
<p>Tools Required: vivado sdk</p>
<p>Source Required: <a href="https://github.com/Xilinx/linux-xlnx.git">linux-xlnx</a></p>
</blockquote>
<p>在目录 <em>linux-xlnx</em> 下，运行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make xilinx_zynq_defconfig</span><br><span class="line">make -j8</span><br><span class="line">make UIMAGE_LOADADDR=0x8000 uImage -j8</span><br></pre></td></tr></table></figure>
<p>编译完成后，在目录 <em>linux-xlnx/arch/arm/boot/</em>
下生成未经压缩过的内核镜像 <em>uImage</em> 文件。</p>
<blockquote>
<p>下载不同版本的 <em>linux-xlnx</em>，编译后可以得到不同内核版本</p>
</blockquote>
<h1 id="环境变量文件">环境变量文件</h1>
<p>创建一个名为 <em>uEnv.txt</em> 的文件，内容如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bootargs</span>=console=ttyPS0,115200n8 <span class="attribute">root</span>=/dev/mmcblk0p2 rw noinitrd earlyprintk <span class="attribute">rootfstype</span>=ext4 rootwait devtmpfs.<span class="attribute">mount</span>=0</span><br></pre></td></tr></table></figure>
<p>这里面是系统启动时传给内核的参数，</p>
<p><code>console=ttyPS0,115200n8</code> 表示控制台的串口号；</p>
<p><code>root=/dev/mmcblk0p2 rw noinitrd rootfstype=ext4</code>
配合之前对 <em>u-boot-xlnx/include/configs/zynq-common.h</em>
的修改，实现了从 SD 的第二分区读取文件系统，该分区为 ext4 格式；</p>
<h1 id="最后">最后</h1>
<blockquote>
<p>Source Required: <a href="https://releases.linaro.org/archive/12.09/ubuntu/precise-images/ubuntu-desktop/linaro-precise-ubuntu-desktop-20120923-436.tar.gz">linaro
文件系统</a></p>
</blockquote>
<p>将 SD 分两个区，第一个区 200M，为 FAT32
格式，剩余容量给第二个分区，为 ext4 格式。</p>
<p>将前几步得到的 <em>BOOT.bin, devicetree.dtb, uImage, uEnv.txt</em>
拷贝到 SD 卡的 FAT32 分区中；</p>
<p>将下载的 <a href="https://releases.linaro.org/archive/12.09/ubuntu/precise-images/ubuntu-desktop/linaro-precise-ubuntu-desktop-20120923-436.tar.gz">linaro
文件系统</a> 解压，将 <em>binary/boot/filesystem.dir</em>
目录下的文件拷贝到 ext4 分区中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rsync -a --progress ./ /media/fitz/sandisk</span><br></pre></td></tr></table></figure>
<p>最后，将 SD 卡插回板子上，板子上的条线帽选择 SD
卡启动，打开电源，连上串口线，可以看到串口输出如下信息，表示启动成功：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">U-Boot <span class="number">2017.0</span>1-dirty (Mar <span class="number">31</span> <span class="number">2020</span> <span class="operator">-</span> <span class="number">17</span>:<span class="number">21</span>:<span class="number">17</span> <span class="operator">+</span><span class="number">0800</span>)</span><br><span class="line"></span><br><span class="line"><span class="params">Model:</span> Zynq pynq z2 Development Board</span><br><span class="line"><span class="params">Board:</span> Xilinx Zynq</span><br><span class="line"><span class="params">I2C:</span>   ready</span><br><span class="line"><span class="params">DRAM:</span>  ECC disabled <span class="number">512</span> MiB</span><br><span class="line"><span class="params">MMC:</span>   sdhci@<span class="params">e0100000:</span> <span class="number">0</span> (SD)</span><br><span class="line"><span class="params">SF:</span> Detected s25fl128s_64k <span class="keyword">with</span> page size <span class="number">256</span> Bytes, erase size <span class="number">64</span> KiB, total <span class="number">16</span> MiB</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> Warning <span class="operator">-</span> bad CRC, using default environment</span><br><span class="line"></span><br><span class="line"><span class="params">In:</span>    serial@e0000000</span><br><span class="line"><span class="params">Out:</span>   serial@e0000000</span><br><span class="line"><span class="params">Err:</span>   serial@e0000000</span><br><span class="line"><span class="params">Model:</span> Zynq pynq z2 Development Board</span><br><span class="line"><span class="params">Board:</span> Xilinx Zynq</span><br><span class="line"><span class="params">Net:</span>   ZYNQ <span class="params">GEM:</span> e000b000, phyaddr ffffffff, interface rgmii-id</span><br><span class="line"><span class="params">eth0:</span> ethernet@e000b000</span><br><span class="line">reading uEnv.txt</span><br><span class="line"><span class="number">119</span> bytes read <span class="keyword">in</span> <span class="number">8</span> ms (<span class="number">13.7</span> KiB<span class="operator">/</span>s)</span><br><span class="line">Importing environment from SD ...</span><br><span class="line">Hit any key to stop <span class="params">autoboot:</span>  <span class="number">0</span></span><br><span class="line"><span class="params">Device:</span> sdhci@e0100000</span><br><span class="line">Manufacturer <span class="params">ID:</span> <span class="number">3</span></span><br><span class="line"><span class="params">OEM:</span> <span class="number">5344</span></span><br><span class="line"><span class="params">Name:</span> SC16G</span><br><span class="line">Tran <span class="params">Speed:</span> <span class="number">50000000</span></span><br><span class="line">Rd Block <span class="params">Len:</span> <span class="number">512</span></span><br><span class="line">SD version <span class="number">3.0</span></span><br><span class="line">High <span class="params">Capacity:</span> Yes</span><br><span class="line"><span class="params">Capacity:</span> <span class="number">14.8</span> GiB</span><br><span class="line">Bus <span class="params">Width:</span> <span class="number">4</span><span class="operator">-</span>bit</span><br><span class="line">Erase Group <span class="params">Size:</span> <span class="number">512</span> Bytes</span><br><span class="line">reading uEnv.txt</span><br><span class="line"><span class="number">119</span> bytes read <span class="keyword">in</span> <span class="number">8</span> ms (<span class="number">13.7</span> KiB<span class="operator">/</span>s)</span><br><span class="line">Loaded environment from uEnv.txt</span><br><span class="line">Importing environment from SD ...</span><br><span class="line">Copying Linux from SD to RAM...</span><br><span class="line">reading uImage</span><br><span class="line"><span class="number">3745912</span> bytes read <span class="keyword">in</span> <span class="number">325</span> ms (<span class="number">11</span> MiB<span class="operator">/</span>s)</span><br><span class="line">reading devicetree.dtb</span><br><span class="line"><span class="number">9958</span> bytes read <span class="keyword">in</span> <span class="number">14</span> ms (<span class="number">694.3</span> KiB<span class="operator">/</span>s)</span><br><span class="line"><span class="comment">## Booting kernel from Legacy Image at 02080000 ...</span></span><br><span class="line">   Image <span class="params">Name:</span>   Linux-<span class="number">4.9</span>.<span class="number">0</span><span class="operator">-</span>xilinx</span><br><span class="line">   Image <span class="params">Type:</span>   ARM Linux Kernel Image (uncompressed)</span><br><span class="line">   Data <span class="params">Size:</span>    <span class="number">3745848</span> Bytes <span class="operator">=</span> <span class="number">3.6</span> MiB</span><br><span class="line">   Load <span class="params">Address:</span> <span class="number">00008000</span></span><br><span class="line">   Entry <span class="params">Point:</span>  <span class="number">00008000</span></span><br><span class="line">   Verifying Checksum ... OK</span><br><span class="line"><span class="comment">## Flattened Device Tree blob at 02000000</span></span><br><span class="line">   Booting using the fdt blob at <span class="number">0</span>x2000000</span><br><span class="line">   Loading Kernel Image ... OK</span><br><span class="line">   Loading Device Tree to <span class="number">1</span>eb1e000, end <span class="number">1</span>eb236e5 ... OK</span><br><span class="line"></span><br><span class="line">Starting kernel ...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Last <span class="params">login:</span> Thu Jan  <span class="number">1</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">06</span> UTC <span class="number">1970</span> on tty1</span><br><span class="line"><span class="params">cat:</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>update-notifier<span class="operator">/</span><span class="params">fsck-at-reboot:</span> No such file <span class="keyword">or</span> directory</span><br><span class="line"><span class="params">run-parts:</span> <span class="symbol">/etc/update-motd.d/98-fsck-at-reboot</span> exited <span class="keyword">with</span> return code <span class="number">1</span></span><br><span class="line">Welcome to Linaro <span class="number">12.09</span> (GNU<span class="symbol">/Linux</span> <span class="number">5.4</span>.<span class="number">0</span><span class="operator">-</span>xilinx-<span class="number">2809</span>6-gef412ed37999 armv7l)</span><br><span class="line"></span><br><span class="line"> <span class="operator">*</span> <span class="params">Documentation:</span>  https:<span class="operator">//</span>wiki.linaro.org<span class="symbol">/</span></span><br><span class="line">root@linaro-ubuntu-desktop:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h1 id="坑">坑</h1>
<ol type="1">
<li><p>在 build device tree 时，报错：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">devicetree.dtb: Warning (unit_address_vs_reg): <span class="keyword">Node</span> <span class="title">/memory</span> has a reg <span class="keyword">or</span> ranges <span class="keyword">property</span><span class="title"></span>, but no unit name</span><br></pre></td></tr></table></figure>
<p>解决办法：</p>
<ol type="1">
<li><p><del>dtc 版本与 vivado sdk 版本不对应，换成对应版本的 dtc
就行</del></p></li>
<li><p>修改 <em>system-top.dts</em> 中的 <code>memory</code>：</p>
<p>将：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">memory &#123;</span><br><span class="line">device_type <span class="operator">=</span> <span class="string">&quot;memory&quot;</span><span class="comment">;</span></span><br><span class="line"><span class="attribute">reg</span> <span class="operator">=</span> &lt;<span class="number">0</span>x0 <span class="number">0</span>x20000000&gt;<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">memory<span class="meta">@0</span> &#123;</span><br><span class="line">device_type = <span class="string">&quot;memory&quot;</span>;</span><br><span class="line">reg = <span class="variable">&lt;0x0 0x20000000&gt;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>Linux 启动时内存分配失败：</p>
<p>启动时串口输出类似信息：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">U</span>-Boot <span class="number">2017</span>.<span class="number">01</span>-dirty (Mar <span class="number">31</span> <span class="number">2020</span> - <span class="number">17</span>:<span class="number">21</span>:<span class="number">17</span> +<span class="number">0800</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">Model</span>: Zynq pynq z2 Development Board</span><br><span class="line"><span class="attribute">Board</span>: Xilinx Zynq</span><br><span class="line"><span class="attribute">I2C</span>:   ready</span><br><span class="line"><span class="attribute">DRAM</span>:  ECC disabled <span class="number">0</span> MiB</span><br><span class="line"><span class="attribute">MMC</span>:   sdhci@e0100000: <span class="number">0</span> (SD)</span><br><span class="line"><span class="attribute">SF</span>: Detected s25fl128s_64k with page size <span class="number">256</span> Bytes, erase size <span class="number">64</span> KiB, total <span class="number">16</span> MiB</span><br></pre></td></tr></table></figure>
<p>可以看到 DRAM 为 0，应该是修改
<em>u-boot-xlnx/include/configs/zynq-common.h</em> 或
<em>u-boot-xlnx/include/configs/zynq_pynqz2.h</em> 的问题，DRAM
的大小应该在设备树文件里面的 <code>memory</code> 定义，不要在
<em>zynq-common.h</em> 里面用
<code>#define CONFIG_SYS_SDRAM_SIZE (512 * 1024 * 1024)</code>
定义。</p></li>
</ol>
]]></content>
      <categories>
        <category>ZYNQ 移植 Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
      </tags>
  </entry>
  <entry>
    <title>自动追剧（or电影）</title>
    <url>/2022/03/18/automovie/</url>
    <content><![CDATA[<p>全自动观影流程</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/202204261123304.svg" alt="automovie">
<figcaption aria-hidden="true">automovie</figcaption>
</figure>
<span id="more"></span>
<h2 id="all">All</h2>
<p>https://leishi.io/blog/posts/2021-12/home-nas-media-center</p>
<p><a href="https://post.smzdm.com/p/a5d22v7k/">软路由的用法（自动追剧配置）</a></p>
<h2 id="jackett">Jackett</h2>
<p><a href="https://post.smzdm.com/p/a0do2mnz/">UNRAID一篇就够！Jackett种子索引</a></p>
<h2 id="qbittorrent">qBittorrent</h2>
<p><a href="https://post.smzdm.com/p/ag827k26/">BT下载教程
篇三：qBittorrent 全平台通用优化教程，适用于群晖 N1小钢炮</a></p>
<p>https://hub.docker.com/r/johngong/qbittorrent</p>
<h2 id="jellyfin">Jellyfin</h2>
<p>https://sspai.com/post/67763</p>
<p><a href="https://blog.lishun.me/synology-docker-jellyfin-quicksync">群晖
Docker 安装 Jellyfin 媒体服务器并开启 Intel Quick Sync 提升性能</a></p>
<p><a href="https://blog.lishun.me/docker-jellyfin-chinese-fonts">解决
Docker 安装 Jellyfin 封面图和部分中文字幕变方块</a></p>
<h2 id="my-docker-compose-file">My docker compose file</h2>
<p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jackett:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jackett</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linuxserver/jackett:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9117</span><span class="string">:9117</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/docker/jackett:/config</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">flaresolverr:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">flaresolverr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/flaresolverr/flaresolverr:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_LEVEL=info</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8191</span><span class="string">:8191</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">radarr:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">radarr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lscr.io/linuxserver/radarr:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Europe/London</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7878</span><span class="string">:7878</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/docker/radarr:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/DATA/aria2-completed/movies:/movies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/DATA/aria2-downloads:/downloads</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/OneDrive_SEU_NAS/media:/onedrive_media</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sonarr:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sonarr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linuxserver/sonarr:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8987</span><span class="string">:8989</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/docker/sonarr:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/DATA/aria2-completed/TV:/TV</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/DATA/aria2-downloads:/downloads</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/OneDrive_SEU_NAS/media:/onedrive_media</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">chinesesubfinder:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">chinesesubfinder</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">allanpk716/chinesesubfinder:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">19035</span><span class="string">:19035</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/docker/chinesesubfinder/cache:/app/cache</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/docker/chinesesubfinder/config:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/DATA/aria2-downloads:/downloads</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/DATA/aria2-completed/movies:/movies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/DATA/aria2-completed/TV:/TV</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/OneDrive_SEU_NAS/media:/onedrive_media</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">emby</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">emby</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">qbittorrent:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">qbittorrent</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">johngong/qbittorrent:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">QB_WEBUI_PORT=8989</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">QB_EE_BIN=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">QB_TRACKERS_UPDATE_AUTO=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">UMASK=000</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6882</span><span class="string">:6881</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6882</span><span class="string">:6881/udp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8989</span><span class="string">:8989</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/docker/qbittorrent:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/DATA/aria2-downloads:/Downloads</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/DATA/aria2-completed:/Completed</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/OneDrive_SEU_NAS/media:/onedrive_media</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">ombi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lscr.io/linuxserver/ombi:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ombi</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/docker/ombi:/config</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3579</span><span class="string">:3579</span></span><br><span class="line">    <span class="attr">dns:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.12</span><span class="number">.2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">emby</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarr</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">radarr</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">emby</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarr</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">radarr</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">emby:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">emby/embyserver</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">emby</span></span><br><span class="line">    <span class="comment"># network_mode: host # Enable DLNA and Wake-on-Lan</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">UID=1000</span> <span class="comment"># The UID to run emby as (default: 2)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GID=100</span> <span class="comment"># The GID to run emby as (default 2)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GIDLIST=100</span> <span class="comment"># A comma-separated list of additional GIDs to run emby as (default: 2)</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/docker/emby:/config</span> <span class="comment"># Configuration directory</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/aria2-complete/TV:/mnt/tvshows</span> <span class="comment"># Media directory</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/aria2-complete/movies:/mnt/movies</span> <span class="comment"># Media directory</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/OneDrive_SEU_NAS/media:/onedrive_media</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8096</span><span class="string">:8096</span> <span class="comment"># HTTP port</span></span><br><span class="line">      <span class="comment"># - 8920:8920 # HTTPS port</span></span><br><span class="line">    <span class="attr">dns:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.12</span><span class="number">.2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span></span><br><span class="line">    <span class="attr">devices:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/dri:/dev/dri</span> <span class="comment"># VAAPI/NVDEC/NVENC render nodes</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">jellyfin:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jellyfin</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nyanmisaka/jellyfin:latest</span></span><br><span class="line">    <span class="attr">devices:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/dri:/dev/dri</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JELLYFIN_PublishedServerUrl=192.168.12.10</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/homes/fitz/docker/jellyfin:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/aria2-complete/TV:/data/tvshows</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/aria2-complete/movies:/data/movies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/share/OneDrive_SEU_NAS/media:/onedrive_media</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8097</span><span class="string">:8096</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8920</span><span class="string">:8920</span> <span class="comment"># HTTPS port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7359</span><span class="string">:7359/udp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1901</span><span class="string">:1900/udp</span></span><br><span class="line">    <span class="attr">dns:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.12</span><span class="number">.2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="comment"># privileged: true</span></span><br><span class="line">    <span class="comment"># command:</span></span><br><span class="line">    <span class="comment">#   - sh</span></span><br><span class="line">    <span class="comment">#   - -c</span></span><br><span class="line">    <span class="comment">#   - |</span></span><br><span class="line">    <span class="comment">#       chmod -R 777 /dev/dri/renderD128</span></span><br><span class="line">    <span class="comment">#       chmod -R 777 /dev/dri/card0</span></span><br><span class="line">    <span class="comment">#       bash</span></span><br><span class="line">    <span class="comment"># tty: true</span></span><br><span class="line">    <span class="comment"># stdin_open: true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>懒人推动科技发展</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>chisel 学习（1）</title>
    <url>/2021/05/24/chisel-start/</url>
    <content><![CDATA[<figure>
<img src="https://pic.zhouyuqian.com/img/20210726235317.svg" alt="Chisel 3">
<figcaption aria-hidden="true">Chisel 3</figcaption>
</figure>
<span id="more"></span>
<h1 id="什么是-chisel">什么是 chisel</h1>
<p>https://www.chisel-lang.org/</p>
<h1 id="学习资料">学习资料</h1>
<ol type="1">
<li><a href="https://github.com/freechipsproject/chisel-bootcamp">Chisel
Bootcamp</a>是一个很不错的chisel教程, 还支持在线运行chisel代码,
你可以一边编写chisel代码一边学习. 其中
<ul>
<li>第1章是scala入门</li>
<li>第2章是chisel基础</li>
<li>第3章是scala高级特性和chisel的混合使用</li>
<li>第4章是FIRRTL后端相关内容 你需要完成前两章的学习,
同时我们强烈建议你学习第3章. 第4章和本课程没有直接关系,
可以作为课外阅读材料.</li>
</ul></li>
<li><a href="https://www.chiselchina.com/archives/">Chisel Bootcamp
中文</a> 这个是翻译成中文的 Chisel Bootcamp</li>
<li><a href="https://www.chisel-lang.org/chisel3/docs/introduction.html">Chisel
Users Guideopen in new window</a>比较系统地整理了chisel的特性,
也是不错的入门教程.</li>
<li><a href="https://www.chisel-lang.org/api/latest/chisel3/index.html">Chisel
API</a>详细地列出了chisel库的所有API供参考.</li>
<li><a href="https://github.com/freechipsproject/chisel-cheatsheet/releases/latest/download/chisel_cheatsheet.pdf">Chisel小抄open
in new window</a>简明地列出了chisel语言的大部分用法.</li>
<li><a href="https://github.com/schoeberl/chisel-book">schoeberl/chisel-book</a></li>
<li><a href="https://github.com/schoeberl/chisel-examples">schoeberl/chisel-examples</a></li>
</ol>
<h1 id="安装">安装</h1>
<p><a href="https://www.scala-sbt.org/release/docs/Setup.html#Installing+sbt">Installing
sbt</a></p>
<p>Follow the instructions from <a href="https://github.com/freechipsproject/chisel3">Chisel3</a> and <a href="https://github.com/freechipsproject/firrtl">firrtl</a>
websites.</p>
<p>Docker:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/muojp/</span>docker-sbt-chisel.git</span><br></pre></td></tr></table></figure>
<p>OR: 使用 <a href="https://github.com/OpenXiangShan/chisel-playground.git">OpenXiangShan/chisel-playground</a>
项目，已经配置好了环境，使用 <a href="https://com-lihaoyi.github.io/mill">mill</a> 作为 Scala
编译器.</p>
<h1 id="before-start">Before Start</h1>
<p>首先需要理解Scala：</p>
<h1 id="语法">语法</h1>
<h2 id="variables-and-constants---var-and-val">Variables and Constants -
var and val</h2>
<p>推荐使用 val (常量)</p>
<h2 id="seq">Seq</h2>
<h2 id="when">when</h2>
<p><strong>等于</strong>要使用 <code>===</code></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">when ( myData === <span class="number">3.</span><span class="type">U</span> ) &#123;</span><br><span class="line">  <span class="comment">// Some logic to run when myData equals 3.</span></span><br><span class="line">&#125; .elsewhen ( myData === <span class="number">1.</span><span class="type">U</span> ) &#123;</span><br><span class="line">   <span class="comment">// Some logic to run when myData equals 1.</span></span><br><span class="line">&#125; .otherwise &#123;</span><br><span class="line">  <span class="comment">// Some logic to run when myData is neither 3 nor 1.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// Returns the current `when` condition</span></span><br><span class="line">when (a) &#123;</span><br><span class="line">  when (b) &#123;</span><br><span class="line">    when (c) &#123;</span><br><span class="line">    &#125;.otherwise &#123;</span><br><span class="line">      when.cond <span class="comment">// this is equal to: a &amp;&amp; b &amp;&amp; !c</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="for">for</h2>
<p>其功能相当于 Verilog 中的 generator</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">0</span> until consts.length) &#123;</span><br><span class="line">      muls += regs(i) * consts(i).<span class="type">U</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="if-or-when">if or when ?</h2>
<p><code>if</code> 是 scala 的语法，不能综合；</p>
<p><code>when</code> 是 chisel 的语法，等同于 Verilog 中的
<code>if</code>；</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterFile</span>(<span class="params">readPorts: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">    require(readPorts &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> wen   = <span class="type">Input</span>(<span class="type">Bool</span>())</span><br><span class="line">        <span class="keyword">val</span> waddr = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">5.</span><span class="type">W</span>))</span><br><span class="line">        <span class="keyword">val</span> wdata = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">32.</span><span class="type">W</span>))</span><br><span class="line">        <span class="keyword">val</span> raddr = <span class="type">Input</span>(<span class="type">Vec</span>(readPorts, <span class="type">UInt</span>(<span class="number">5.</span><span class="type">W</span>)))</span><br><span class="line">        <span class="keyword">val</span> rdata = <span class="type">Output</span>(<span class="type">Vec</span>(readPorts, <span class="type">UInt</span>(<span class="number">32.</span><span class="type">W</span>)))</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// A Register of a vector of UInts</span></span><br><span class="line">    <span class="keyword">val</span> reg = <span class="type">RegInit</span>(<span class="type">VecInit</span>(<span class="type">Seq</span>.fill(<span class="number">32</span>)(<span class="number">0.</span><span class="type">U</span>(<span class="number">32.</span><span class="type">W</span>))))</span><br><span class="line">    </span><br><span class="line">    when(io.wen) &#123;</span><br><span class="line">        reg(io.waddr) := io.wdata</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i &lt;- <span class="number">0</span> until readPorts) &#123;</span><br><span class="line">        when(io.raddr(i) === <span class="number">0.</span><span class="type">U</span>) &#123;</span><br><span class="line">            io.rdata(i) := <span class="number">0.</span><span class="type">U</span>(<span class="number">32.</span><span class="type">W</span>)</span><br><span class="line">        &#125;.otherwise &#123;</span><br><span class="line">            io.rdata(i) := reg(io.raddr(i))</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//         if(io.raddr(i) == 0.U) io.rdata(i) := 0.U(32.W)</span></span><br><span class="line"><span class="comment">//         else io.rdata(i) := reg(io.raddr(i))</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="加法">加法</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a +&amp; b 包含进位, 而 a + b 不包含</span></span><br><span class="line">io.sum := io.in0 +&amp; io.in1</span><br></pre></td></tr></table></figure>
<h2 id="获得-verilog-代码">获得 Verilog 代码</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">println(getVerilog(<span class="keyword">new</span> &lt;module&gt;))</span><br></pre></td></tr></table></figure>
<h2 id="可视化">可视化</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">visualize(() =&gt; <span class="keyword">new</span> &lt;module&gt;)</span><br></pre></td></tr></table></figure>
<h2 id="带有decoupled接口的模块">带有<code>Decoupled</code>接口的模块</h2>
<p><code>Decoupled</code>可以将基本的chisel数据类型包装起来，并为其提供<code>ready</code>和<code>valid</code>信号。
Testers2提供了一些很好的工具，可以自动并可靠地测试这些接口。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueModule</span>[<span class="type">T</span> &lt;: <span class="type">Data</span>](<span class="params">ioType: <span class="type">T</span>, entries: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">MultiIOModule</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> in = <span class="type">IO</span>(<span class="type">Flipped</span>(<span class="type">Decoupled</span>(ioType)))</span><br><span class="line">  <span class="keyword">val</span> out = <span class="type">IO</span>(<span class="type">Decoupled</span>(ioType))</span><br><span class="line">  out &lt;&gt; <span class="type">Queue</span>(in, entries)</span><br><span class="line">&#125;</span><br><span class="line">visualize(() =&gt; <span class="keyword">new</span> <span class="type">QueueModule</span>(<span class="type">UInt</span>(<span class="number">9.</span><span class="type">W</span>), entries = <span class="number">200</span>))</span><br><span class="line">println(getVerilog(<span class="keyword">new</span> <span class="type">QueueModule</span>(<span class="type">UInt</span>(<span class="number">9.</span><span class="type">W</span>), entries = <span class="number">200</span>)))</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727174715.png" alt="q">
<figcaption aria-hidden="true">q</figcaption>
</figure>
<p><strong>计算最大公约数：</strong></p>
<p><strong>src</strong></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GcdInputBundle</span>(<span class="params">val w: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Bundle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> value1 = <span class="type">UInt</span>(w.<span class="type">W</span>)</span><br><span class="line">  <span class="keyword">val</span> value2 = <span class="type">UInt</span>(w.<span class="type">W</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GcdOutputBundle</span>(<span class="params">val w: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Bundle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> value1 = <span class="type">UInt</span>(w.<span class="type">W</span>)</span><br><span class="line">  <span class="keyword">val</span> value2 = <span class="type">UInt</span>(w.<span class="type">W</span>)</span><br><span class="line">  <span class="keyword">val</span> gcd    = <span class="type">UInt</span>(w.<span class="type">W</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GCD</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用减法来计算GCD。</span></span><br><span class="line"><span class="comment">  * 从寄存器 x 和 y 中较大一个中减去较小的一个，直到寄存器 y 为零。</span></span><br><span class="line"><span class="comment">  * 输入寄存器 x 的值就是最大公约数</span></span><br><span class="line"><span class="comment">  * 返回包含两个输入值及其GCD的包</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoupledGcd</span>(<span class="params">width: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">MultiIOModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> input = <span class="type">IO</span>(<span class="type">Flipped</span>(<span class="type">Decoupled</span>(<span class="keyword">new</span> <span class="type">GcdInputBundle</span>(width))))</span><br><span class="line">  <span class="keyword">val</span> output = <span class="type">IO</span>(<span class="type">Decoupled</span>(<span class="keyword">new</span> <span class="type">GcdOutputBundle</span>(width)))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> xInitial    = <span class="type">Reg</span>(<span class="type">UInt</span>())</span><br><span class="line">  <span class="keyword">val</span> yInitial    = <span class="type">Reg</span>(<span class="type">UInt</span>())</span><br><span class="line">  <span class="keyword">val</span> x           = <span class="type">Reg</span>(<span class="type">UInt</span>())</span><br><span class="line">  <span class="keyword">val</span> y           = <span class="type">Reg</span>(<span class="type">UInt</span>())</span><br><span class="line">  <span class="keyword">val</span> busy        = <span class="type">RegInit</span>(<span class="literal">false</span>.<span class="type">B</span>)</span><br><span class="line">  <span class="keyword">val</span> resultValid = <span class="type">RegInit</span>(<span class="literal">false</span>.<span class="type">B</span>)</span><br><span class="line"></span><br><span class="line">  input.ready := ! busy</span><br><span class="line">  output.valid := resultValid</span><br><span class="line">  output.bits := <span class="type">DontCare</span></span><br><span class="line"></span><br><span class="line">  when(busy)  &#123;</span><br><span class="line">    <span class="comment">// 在计算期间，从每次较大的值中减去较小的值</span></span><br><span class="line">    when(x &gt; y) &#123;</span><br><span class="line">      x := x - y</span><br><span class="line">    &#125;.otherwise &#123;</span><br><span class="line">      y := y - x</span><br><span class="line">    &#125;</span><br><span class="line">    when(y === <span class="number">0.</span><span class="type">U</span>) &#123;</span><br><span class="line">      <span class="comment">// 当 y 变为零时，计算结束，将输出置为 valid</span></span><br><span class="line">      output.bits.gcd := x</span><br><span class="line">      output.bits.value1 := xInitial</span><br><span class="line">      output.bits.value2 := yInitial</span><br><span class="line">      output.bits.gcd := x</span><br><span class="line">      output.valid := <span class="literal">true</span>.<span class="type">B</span></span><br><span class="line">      busy := <span class="literal">false</span>.<span class="type">B</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;.otherwise &#123;</span><br><span class="line">    when(input.valid) &#123;</span><br><span class="line">      <span class="comment">// 当有可用的有效数据且没有进行计算时，获取新值并开始计算</span></span><br><span class="line">      <span class="keyword">val</span> bundle = input.deq()</span><br><span class="line">      x := bundle.value1</span><br><span class="line">      y := bundle.value2</span><br><span class="line">      xInitial := bundle.value1</span><br><span class="line">      yInitial := bundle.value2</span><br><span class="line">      busy := <span class="literal">true</span>.<span class="type">B</span></span><br><span class="line">      resultValid := <span class="literal">false</span>.<span class="type">B</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>tb</strong></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">test(<span class="keyword">new</span> <span class="type">DecoupledGcd</span>(<span class="number">16</span>)) &#123; dut =&gt;</span><br><span class="line">  dut.input.initSource().setSourceClock(dut.clock)</span><br><span class="line">  dut.output.initSink().setSinkClock(dut.clock)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> testValues = <span class="keyword">for</span> &#123; x &lt;- <span class="number">1</span> to <span class="number">10</span>; y &lt;- <span class="number">1</span> to <span class="number">10</span>&#125; <span class="keyword">yield</span> (x, y)</span><br><span class="line">  <span class="keyword">val</span> inputSeq = testValues.map &#123; <span class="keyword">case</span> (x, y) =&gt;</span><br><span class="line">    (<span class="keyword">new</span> <span class="type">GcdInputBundle</span>(<span class="number">16</span>)).<span class="type">Lit</span>(_.value1 -&gt; x.<span class="type">U</span>, _.value2 -&gt; y.<span class="type">U</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> resultSeq = testValues.map &#123; <span class="keyword">case</span> (x, y) =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">GcdOutputBundle</span>(<span class="number">16</span>).<span class="type">Lit</span>(_.value1 -&gt; x.<span class="type">U</span>, _.value2 -&gt; y.<span class="type">U</span>, _.gcd -&gt; <span class="type">BigInt</span>(x).gcd(<span class="type">BigInt</span>(y)).<span class="type">U</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fork join 并行测试</span></span><br><span class="line">  fork &#123;</span><br><span class="line">    dut.input.enqueueSeq(inputSeq)</span><br><span class="line">  &#125;.fork &#123;</span><br><span class="line">    dut.output.expectDequeueSeq(resultSeq)</span><br><span class="line">  &#125;.join()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="queues">Queues</h2>
<p><code>Queue</code> creates a FIFO (first-in, first-out) queue with
Decoupled interfaces on both sides, allowing backpressure. Both the data
type and number of elements are configurable.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>(<span class="params">width: <span class="type">Int</span>, len: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> in = <span class="type">Flipped</span>(<span class="type">Decoupled</span>(<span class="type">UInt</span>(width.<span class="type">W</span>)))</span><br><span class="line">        <span class="keyword">val</span> out = <span class="type">Decoupled</span>(<span class="type">UInt</span>(width.<span class="type">W</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">val</span> fifo = <span class="type">Queue</span>(io.in, len)</span><br><span class="line">    io.out &lt;&gt; fifo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">visualize(() =&gt; <span class="keyword">new</span> <span class="type">MyQueue</span>(<span class="number">32</span>, <span class="number">10</span>))</span><br><span class="line">println(getVerilog(<span class="keyword">new</span> <span class="type">MyQueue</span>(<span class="number">32</span>, <span class="number">10</span>)))</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727174733.png" alt="Queues">
<figcaption aria-hidden="true">Queues</figcaption>
</figure>
<h2 id="arbiters">Arbiters</h2>
<p>Arbiters routes data from <em>n</em> <code>DecoupledIO</code> sources
to one <code>DecoupledIO</code> sink, given a prioritization. There are
two types included in Chisel:</p>
<ul>
<li><code>Arbiter</code>: prioritizes lower-index producers</li>
<li><code>RRArbiter</code>: runs in round-robin order</li>
</ul>
<p>Note that Arbiter routing is implemented in <strong>combinational
logic</strong>.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArbiter</span>(<span class="params"><span class="type">InNum</span>: <span class="type">Int</span>, width: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Example circuit using a priority arbiter</span></span><br><span class="line">    <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> in = <span class="type">Flipped</span>(<span class="type">Vec</span>(<span class="type">InNum</span>, <span class="type">Decoupled</span>(<span class="type">UInt</span>(width.<span class="type">W</span>))))</span><br><span class="line">      <span class="keyword">val</span> out = <span class="type">Decoupled</span>(<span class="type">UInt</span>(width.<span class="type">W</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// Arbiter doesn&#x27;t have a convenience constructor, so it&#x27;s built like any Module</span></span><br><span class="line">    <span class="keyword">val</span> arbiter = <span class="type">Module</span>(<span class="keyword">new</span> <span class="type">Arbiter</span>(<span class="type">UInt</span>(width.<span class="type">W</span>), <span class="type">InNum</span>))  <span class="comment">// 2 to 1 Priority Arbiter</span></span><br><span class="line">    arbiter.io.in &lt;&gt; io.in</span><br><span class="line">    io.out &lt;&gt; arbiter.io.out</span><br><span class="line">&#125;</span><br><span class="line">println(getVerilog(<span class="keyword">new</span> <span class="type">MyArbiter</span>(<span class="number">2</span>, <span class="number">32</span>)))</span><br></pre></td></tr></table></figure>
<h2 id="popcount">PopCount</h2>
<p>PopCount returns the number of high (1) bits in the input as a
<code>UInt</code>.</p>
<p>计算 <code>1</code> 的个数。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">io.out := <span class="type">PopCount</span>(io.in)</span><br></pre></td></tr></table></figure>
<h2 id="reverse">Reverse</h2>
<p>Reverse returns the bit-reversed input.</p>
<p>翻转。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">io.out := <span class="type">Reverse</span>(io.in)</span><br></pre></td></tr></table></figure>
<h2 id="onehot-encoding-utilities">OneHot encoding utilities</h2>
<p>OneHot is an encoding of integers where there is one wire for each
value, and exactly one wire is high. This allows the efficient creation
of some functions, for example muxes. However, behavior may be undefined
if the one-wire-high condition is not held.</p>
<ul>
<li>UInt to OneHot: <code>UIntToOH</code></li>
<li>OneHot to UInt: <code>OHToUInt</code></li>
</ul>
<h2 id="muxes">Muxes</h2>
<p>These muxes take in a list of values with select signals, and output
the value associated with the lowest-index select signal.</p>
<p>These can either take a list of (select: Bool, value: Data) tuples,
or corresponding lists of selects and values as arguments. For
simplicity, the examples below only demonstrate the second form.</p>
<h3 id="priority-mux">Priority Mux</h3>
<p>A <code>PriorityMux</code> outputs the value associated with the
lowest-index asserted select signal.</p>
<h3 id="onehot-mux">OneHot Mux</h3>
<p>An <code>Mux1H</code> provides an efficient implementation when it is
guaranteed that exactly one of the select signals will be high. Behavior
is undefined if the assumption is not true.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriorityMux</span>(<span class="params"><span class="type">InNum</span>: <span class="type">Int</span>, width: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Example circuit using PriorityMux</span></span><br><span class="line">    <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> in_sels = <span class="type">Input</span>(<span class="type">Vec</span>(<span class="type">InNum</span>, <span class="type">Bool</span>()))</span><br><span class="line">      <span class="keyword">val</span> in_bits = <span class="type">Input</span>(<span class="type">Vec</span>(<span class="type">InNum</span>, <span class="type">UInt</span>(width.<span class="type">W</span>)))</span><br><span class="line">      <span class="keyword">val</span> out = <span class="type">Output</span>(<span class="type">UInt</span>(width.<span class="type">W</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    io.out := <span class="type">PriorityMux</span>(io.in_sels, io.in_bits)</span><br><span class="line">&#125;</span><br><span class="line">println(getVerilog(<span class="keyword">new</span> <span class="type">MyPriorityMux</span>(<span class="number">2</span>, <span class="number">32</span>)))</span><br></pre></td></tr></table></figure>
<h2 id="counter">counter</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCounter</span>(<span class="params">cnt: <span class="type">Int</span>, width: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Example circuit using Mux1H</span></span><br><span class="line">    <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> count = <span class="type">Input</span>(<span class="type">Bool</span>())</span><br><span class="line">      <span class="keyword">val</span> out = <span class="type">Output</span>(<span class="type">UInt</span>(width.<span class="type">W</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">val</span> counter = <span class="type">Counter</span>(cnt)  <span class="comment">// 3-count Counter (outputs range [0...2])</span></span><br><span class="line">    when(io.count) &#123;</span><br><span class="line">      counter.inc()</span><br><span class="line">    &#125;</span><br><span class="line">    io.out := counter.value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">println(getVerilog(<span class="keyword">new</span> <span class="type">MyCounter</span>(<span class="number">3</span>, <span class="number">2</span>))) <span class="comment">// 3-count Counter (outputs range [0...2])</span></span><br></pre></td></tr></table></figure>
<h2 id="map">Map</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).map(x =&gt; x + <span class="number">1</span>))  <span class="comment">// explicit argument list in function</span></span><br><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).map(_ + <span class="number">1</span>))  <span class="comment">// equivalent to the above, but implicit arguments</span></span><br><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).map(_.toString + <span class="string">&quot;a&quot;</span>))  <span class="comment">// the output element type can be different from the input element type</span></span><br><span class="line"></span><br><span class="line">println(<span class="type">List</span>((<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">6</span>), (<span class="number">3</span>, <span class="number">7</span>), (<span class="number">4</span>, <span class="number">8</span>)).map &#123; <span class="keyword">case</span> (x, y) =&gt; x*y &#125;)  <span class="comment">// this unpacks a tuple, note use of curly braces</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Related: Scala has a syntax for constructing lists of sequential numbers</span></span><br><span class="line">println(<span class="number">0</span> to <span class="number">10</span>)  <span class="comment">// to is inclusive , the end point is part of the result</span></span><br><span class="line">println(<span class="number">0</span> until <span class="number">10</span>)  <span class="comment">// until is exclusive at the end, the end point is not part of the result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Those largely behave like lists, and can be useful for generating indices:</span></span><br><span class="line"><span class="keyword">val</span> myList = <span class="type">List</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">println((<span class="number">0</span> until <span class="number">4</span>).map(myList(_)))</span><br></pre></td></tr></table></figure>
<blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">List</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="attribute">List</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="attribute">List</span>(<span class="number">1</span>a, <span class="number">2</span>a, <span class="number">3</span>a, <span class="number">4</span>a)</span><br><span class="line"><span class="attribute">List</span>(<span class="number">5</span>, <span class="number">12</span>, <span class="number">21</span>, <span class="number">32</span>)</span><br><span class="line"><span class="attribute">Range</span> <span class="number">0</span> to <span class="number">10</span></span><br><span class="line"><span class="attribute">Range</span> <span class="number">0</span> until <span class="number">10</span></span><br><span class="line"><span class="attribute">Vector</span>(a, b, c, d)</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="zipwithindex"><strong>zipWithIndex</strong></h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).zipWithIndex)  <span class="comment">// note indices start at zero</span></span><br><span class="line">println(<span class="type">List</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>).zipWithIndex)</span><br><span class="line">println(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>), (<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>), (<span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>), (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>)).zipWithIndex)  <span class="comment">// tuples nest</span></span><br></pre></td></tr></table></figure>
<blockquote>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">List((<span class="number">1</span>,<span class="number">0</span>), (<span class="number">2</span>,<span class="number">1</span>), (<span class="number">3</span>,<span class="number">2</span>), (<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line">List((<span class="name">a</span>,<span class="number">0</span>), (<span class="name">b</span>,<span class="number">1</span>), (<span class="name">c</span>,<span class="number">2</span>), (<span class="name">d</span>,<span class="number">3</span>))</span><br><span class="line">List(((<span class="name">a</span>,b),<span class="number">0</span>), ((<span class="name">c</span>,d),<span class="number">1</span>), ((<span class="name">e</span>,f),<span class="number">2</span>), ((<span class="name">g</span>,h),<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="reduce"><strong>Reduce</strong></h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce((a, b) =&gt; a + b))  <span class="comment">// returns the sum of all the elements</span></span><br><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(_ * _))  <span class="comment">// returns the product of all the elements</span></span><br><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).map(_ + <span class="number">1</span>).reduce(_ + _))  <span class="comment">// you can chain reduce onto the result of a map</span></span><br></pre></td></tr></table></figure>
<blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">24</span><br><span class="line">14</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="fold"><strong>Fold</strong></h2>
<p>类似 <code>reduce</code>，不过可以提供一个初值。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).fold(<span class="number">0</span>)(_ + _))  <span class="comment">// equivalent to the sum using reduce</span></span><br><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).fold(<span class="number">1</span>)(_ + _))  <span class="comment">// like above, but accumulation starts at 1</span></span><br><span class="line">println(<span class="type">List</span>().fold(<span class="number">1</span>)(_ + _))  <span class="comment">// unlike reduce, does not fail on an empty input</span></span><br></pre></td></tr></table></figure>
<blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">11</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="decoupled-arbiter"><strong>Decoupled Arbiter</strong></h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRoutingArbiter</span>(<span class="params">numChannels: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> in = <span class="type">Vec</span>(numChannels, <span class="type">Flipped</span>(<span class="type">Decoupled</span>(<span class="type">UInt</span>(<span class="number">8.</span><span class="type">W</span>))))</span><br><span class="line">    <span class="keyword">val</span> out = <span class="type">Decoupled</span>(<span class="type">UInt</span>(<span class="number">8.</span><span class="type">W</span>))</span><br><span class="line">  &#125; )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// YOUR CODE BELOW</span></span><br><span class="line">    io.out.valid := io.in.map(_.valid).reduce(_ || _)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 注意，这里是 = 而不是 :=</span></span><br><span class="line">    <span class="keyword">val</span> channel = <span class="type">PriorityMux</span>(</span><br><span class="line">        io.in.map(_.valid).zipWithIndex.map &#123; <span class="keyword">case</span> (valid, index) =&gt; (valid, index.<span class="type">U</span>) &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i &lt;- <span class="number">0</span> until numChannels) &#123;</span><br><span class="line">        when(channel === i.<span class="type">U</span>) &#123;</span><br><span class="line">            io.in(i).ready := io.out.ready</span><br><span class="line">        &#125;.otherwise&#123;</span><br><span class="line">            io.in(i).ready := <span class="number">0.</span><span class="type">U</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// or    </span></span><br><span class="line"><span class="comment">//     io.in.map(_.ready).zipWithIndex.foreach &#123; case (ready, index) =&gt;</span></span><br><span class="line"><span class="comment">//         ready := io.out.ready &amp;&amp; channel === index.U</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line">    </span><br><span class="line">    io.out.bits := io.in(channel).bits</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="scala-语法">scala 语法</h2>
<h3 id="合并-list">合并 list</h3>
<p>Merge two lists using the <code>++</code>, <code>concat</code>, or
<code>:::</code> methods.</p>
<h1 id="functional-programming">Functional Programming</h1>
]]></content>
      <categories>
        <category>chisel</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>chisel</tag>
      </tags>
  </entry>
  <entry>
    <title>GCC-4.8.5 编译安装</title>
    <url>/2021/11/30/build-install-gcc-4-8-5/</url>
    <content><![CDATA[<h2 id="gcc-4.8.5-编译安装">GCC-4.8.5 编译安装</h2>
<blockquote>
<ol type="1">
<li><a href="https://stackoverflow.com/questions/61945439/how-to-install-compiler-g-4-8-5-in-ubuntu-20-04">https://stackoverflow.com/questions/61945439/how-to-install-compiler-g-4-8-5-in-ubuntu-20-04</a></li>
<li><a href="https://www.icode9.com/content-3-1202280.html">https://www.icode9.com/content-3-1202280.html</a></li>
<li><a href="https://www.frank.fyi/archives/336_gcc-compile-error/">https://www.frank.fyi/archives/336_gcc-compile-error/</a></li>
</ol>
</blockquote>
<p>参考第一篇：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载gcc</span></span><br><span class="line">wget http://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.bz2</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf gcc-4.8.5.tar.bz2</span><br><span class="line"><span class="comment"># 修改 gcc-4.8.5 两处 bug</span></span><br><span class="line">sed -i -e <span class="string">&#x27;s/__attribute__/\/\/__attribute__/g&#x27;</span> gcc-4.8.5/gcc/cp/cfns.h</span><br><span class="line">sed -i <span class="string">&#x27;s/struct ucontext/ucontext_t/g&#x27;</span> gcc-4.8.5/libgcc/config/i386/linux-unwind.h</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装依赖三大件，会自动顺序安装gmp、mpfr、mpc</span></span><br><span class="line">gcc-4.8.5/contrib/download_prerequisites</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">sudo</span> apt install make wget git gcc g++ lhasa libgmp-dev libmpfr-dev libmpc-dev flex bison gettext texinfo ncurses-dev autoconf rsync</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建编译目录 gcc-4.8.5-build</span></span><br><span class="line"><span class="built_in">mkdir</span> gcc-4.8.5-build</span><br><span class="line"><span class="built_in">cd</span> gcc-4.8.5-build</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 开始编译安装</span></span><br><span class="line"><span class="variable">$PWD</span>/../gcc-4.8.5/configure --enable-languages=c,c++ --prefix=/usr/local/gcc-4.8.5 --enable-shared --enable-plugin --program-suffix=-4.8.5 --disable-multilib</span><br><span class="line">make MAKEINFO=<span class="string">&quot;makeinfo --force&quot;</span> -j</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译完成后安装</span></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
<p>编译的过程中会出现一些问题，主要参考了<a href="https://www.icode9.com/content-3-1202280.html">第二篇文章</a>和<a href="https://www.frank.fyi/archives/336_gcc-compile-error/">第三篇文章</a>。</p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>IC_design</tag>
      </tags>
  </entry>
  <entry>
    <title>digital-learning</title>
    <url>/2022/04/27/digital-learning/</url>
    <content><![CDATA[<h1 id="前端">前端</h1>
<h1 id="后端">后端</h1>
]]></content>
  </entry>
  <entry>
    <title>分频器--锁存器</title>
    <url>/2020/09/23/divider/</url>
    <content><![CDATA[<p><strong>分频器</strong>是伴随着频率综合器的出现而发展起来的，在射频无线收发芯片中需要频率综合器输出高质量的本地载波来完成信号的上变频或下变频；在数字芯片中需要频率综合器输出各种不同频率的时钟来驱动时序电路完成各种逻辑运算。频率综合器中都需要分频器来讲高频时钟分频至低频时钟的任务。</p>
<span id="more"></span>
<h1 id="分频器">分频器</h1>
<p>分频器可分为：</p>
<ul>
<li>模拟分频器</li>
<li>数字分频器</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>模拟分频器</th>
<th>数字分频器</th>
</tr>
</thead>
<tbody>
<tr>
<td>工作频率</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>工作范围</td>
<td>窄</td>
<td>宽</td>
</tr>
<tr>
<td>实现方式</td>
<td>复杂</td>
<td>简单</td>
</tr>
<tr>
<td>功耗</td>
<td>较大</td>
<td>正比工作频率</td>
</tr>
<tr>
<td>工艺角及温度影响</td>
<td>较大</td>
<td>较小</td>
</tr>
<tr>
<td>随工艺发展的潜力</td>
<td>较小</td>
<td>较大</td>
</tr>
</tbody>
</table>
<p>下文主要介绍数字分频器。</p>
<hr>
<h1 id="数字分频器">数字分频器</h1>
<p>数字分频器是基于锁存器（Latch）所存数据的原理，在输入时钟的使能下完成对输入时钟的分频。</p>
<h2 id="d-锁存器">D 锁存器</h2>
<p>D
锁存器的数据输出在时钟输入端为高电平时，跟随数据输入端；在时钟输入端为低电平时，一直锁存当前数据保持不变。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727175641.png" alt="D 锁存器理想时序图" style="zoom:40%; margin: auto;"></p>
<h2 id="主从锁存器">主从锁存器</h2>
<p>锁存器的数据输出端在时钟时钟输入端为高电平时一直跟随数据输入端的变化而变化会引起一系列诸如不稳定、毛刺和竞争冒险等时序问题。可以使用由两个相位互反的时钟分别驱动两个串联的
D 锁存器来解决。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727175655.png" alt="主从锁存器理想时序图" style="zoom:60%; margin: auto;"></p>
<h2 id="亚稳态稳定性分析">亚稳态/稳定性分析</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727175705.png" alt="主从锁存器(a)亚稳态(b)实际时序图" style="zoom:50%; margin: auto;"></p>
<p>如图(a)所示，在时钟上升沿，数据输入发生变化，那么数据输出该如何变化。此时就产生了亚稳态问题。</p>
<p>主从锁存器的实际时序图如图(b)所示：</p>
<ul>
<li><span class="math inline">\(T_{CLK}\)</span>
：时钟输入端的时钟周期；</li>
<li><span class="math inline">\(T_S\)</span> ：建立时间(Set-up
Time)，为数据输入端在时钟输入端上升沿来临前的建立时间；</li>
<li><span class="math inline">\(T_H\)</span> ：保持时间(Hold
Time)，为数据输入端在时钟输入端上升沿来临前的保持时间；</li>
<li><span class="math inline">\(T_{CQ}\)</span>
：时钟输入端到数据输出端的时延(CLK-to-Q Delay)，决定了 <span class="math inline">\(T_S\)</span> 和 <span class="math inline">\(T_H\)</span> 的最小值；</li>
</ul>
<p>为保证锁存器工作的稳定性，需要满足如下条件：</p>
<ul>
<li><span class="math inline">\(T_{CLK}\)</span>
大于锁存器的最小出入时钟周期；</li>
<li>数据输入端在 <span class="math inline">\(T_S\)</span>
之前建立完毕，并保持到 <span class="math inline">\(T_H\)</span>
之后；</li>
</ul>
<p>时序关系如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727175719.png" alt="主从锁存器的稳定性" style="zoom:40%; margin: auto;"></p>
<h1 id="正交二分频器的结构">正交二分频器的结构</h1>
<p>目前已有很多种结构的锁存器被发明出来做分频电路，下文介绍几种具有代表性的锁存器结构。</p>
<h2 id="传输门主从锁存器">传输门主从锁存器</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727175730.png" alt="基本传输门锁存器" style="zoom:35%; margin: auto;"></p>
<p>基本的传输门锁存器如上图所示，一对互补的 MOS
管组成了一个传输门开关。</p>
<ul>
<li>CLK为高电平时，传输门打开，输入信号 D 存储至电容 C 中；</li>
<li>CLK由高变低时，传输门关闭，电容 C
存储的电荷继续维持锁存器的输出。</li>
</ul>
<p>实际中电容 C
可以用传输门和反相器的寄生电容来实现，但由于传输门关闭后仍有微小的漏电流存在，传输门寄存器需要<strong>定期刷新</strong>来保证数据不丢失。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727175740.png" alt="传输门主从锁存器" style="zoom:35%; margin: auto;"></p>
<p>如上图所示，<strong>传输门主从锁存器 (Transmission Gate Master-Slave
Latch)</strong>克服了<strong>传输门锁存器</strong>需要定期刷新的缺点。</p>
<p>该结构中，传输门 TG1、TG2 和反相器 INV1、INV2
构成了<strong>第一级主锁存器</strong>；传输门 TG3、TG4 和反相器
INV3、INV4 构成第二级<strong>从锁存器</strong>。</p>
<ul>
<li><p>CLK 由高变低时：传输门 TG1、TG4 打开，传输门 TG2、TG3 关闭。</p>
<p>由于 TG1 打开，TG2关闭，输入信号路径：<strong>D -&gt; TG1 -&gt; A
-&gt; INV1 -&gt; INV2 -&gt; B</strong>，此时一级主锁存器将信号输入 D
传至输出端 B 点；</p>
<p>由于 TG3 关闭，TG4 打开，因此 C 点电平不受 B
点影响，路径为：<strong>C -&gt; INV3 -&gt; INV4 -&gt; Q -&gt; TG4 -&gt;
C</strong>，此时二级从锁存器形成一个稳定的锁存回路，输出端 Q
保持上一次的电平不变。</p></li>
<li><p>CLK 由低电平变高电平时：与上面 CLK 由高变低时的情况相反，传输门
TG1、TG4 关闭，传输门 TG2、TG3 打开。</p>
<p>相应的，一级主锁存器形成一个锁存回路，输出 B 点保持上次电平不变；</p>
<p>二级从寄存器将 B 点信号传输至 Q 点。</p></li>
</ul>
<h2 id="时钟控制-cmos-主从锁存器">时钟控制 CMOS 主从锁存器</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727175816.png" alt="时钟控制 CMOS 主从锁存器" style="zoom:35%; margin: auto;"></p>
<p><strong>时钟控制 CMOS 主从锁存器 (Clocked CMOS Master-Slave
Latch)</strong>
是在传输门主从锁存器的基础上发展而来，其主要变化是将传输门锁存器中的传输门和反相器合二为一，构成了如上图
(a)
所示的<strong>时钟控制反相器</strong>，从而简化了版图，提升了主从锁存器的工作速度。</p>
<blockquote>
<p><strong><em>(具体分析)</em></strong> 待完成</p>
</blockquote>
<h2 id="共源共栅电压切换逻辑主从锁存器">共源共栅电压切换逻辑主从锁存器</h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727175826.png" alt="共源共栅电压切换逻辑主从锁存器" style="zoom:40%; margin: auto;"></p>
<p>一种基于共源共栅电压切换逻辑的主从锁存器 (Cascode Voltage Switch
Logic Master-Slave Latch) 如上图所示，<span class="math inline">\(M_1
\sim M_6\)</span> 构成了一级主锁存器，<span class="math inline">\(M_7
\sim M_{12}\)</span> 构成二级从锁存器。<span class="math inline">\(M_1\)</span> 和 <span class="math inline">\(M_2\)</span> 是一级主锁存器的<strong>再生式管对
(???)</strong>，<span class="math inline">\(M_{11}\)</span> 和 <span class="math inline">\(M_{12}\)</span>
是第二极从锁存器中的<strong><em>再生式管对</em></strong>。</p>
<p>以第一级主锁存器为例，介绍其工作原理。</p>
<ul>
<li><p>CLK 由低变高时，M5、M6 打开；</p>
<ol type="1">
<li><p>若输入 D 为<strong>高电平</strong>，M3 打开，M4 关闭；</p>
<p>A 点电平下降，B 点电平上升；</p>
<p>A 点电平下降控制 M2 逐渐打开，使 B 点电平更快地上升；</p>
<p>B 点电平下降控制 M1 逐渐关闭，使 A 点电平更快地下降；</p>
<p>最终 A 点下降至地电平，B 点上升至 <span class="math inline">\(V_{DD}\)</span> 电平。</p></li>
<li><p>若输入 D 为<strong>低电平</strong>，则情况相反，A 点上升至 <span class="math inline">\(V_{DD}\)</span> 电平，B 点下降至地电平。</p></li>
</ol></li>
<li><p>CLK 由高变低时，M5、M6 关闭，A、B 点通过 M1、M2
维持前一刻电平不变。</p></li>
</ul>
<p>一级主锁存器与二级从锁存器交替工作，形成了一个完整的共源共栅电压切换逻辑主从锁存器。</p>
<h2 id="真单相时钟主从锁存器">真单相时钟主从锁存器</h2>
<p>真单相时钟主从锁存器 (True Single-Phase Clock Master-Slave Latch)
是在时钟控制 CMOS
主从锁存器的基础上简化而来，主要是省略了同相锁存器，完全以节点寄生电容来存储电平。真单相时钟主从锁存器结构简单、MOS
管数量少、工作速度高、功耗低，特别适用于<strong>高速分频器</strong>。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727175841.png" alt="真单相时钟主从锁存器" style="zoom:40%; margin: auto;"></p>
<p>常用的一种真单相时钟主从锁存器结构如上图所示：<span class="math inline">\(M_1 \sim M_3\)</span>
构成第一级<strong>时钟控制反相器</strong>，<span class="math inline">\(M_4 \sim M_6\)</span>
构成第二级时钟控制反相器，<span class="math inline">\(M_7 \sim
M_9\)</span> 构成第三级时钟控制反相器，<span class="math inline">\(M_{10}\)</span> 和 <span class="math inline">\(M_{11}\)</span> 构成输出反相器。</p>
<ul>
<li><p>CLK 由高电平变低电平后：</p>
<p>第一级时钟控制反相器输出 A 跟随数据输入 D；</p>
<p>第二级时钟控制反相器输出 B 被拉伸至 <span class="math inline">\(V_{DD}\)</span>；</p>
<p>M7 和 M8 分别被 B 和 CLK 关闭，第三级时钟控制反相器输出 C
维持前一时刻电平不变。</p></li>
<li><p>CLK 由低电平变高电平后，输入信号 D 需要维持不变 (保证数据输入端在
<span class="math inline">\(T_S\)</span> 之前建立完毕)，A 点电平与 D
点相同：</p>
<p>若 A 点为高电平，B 点被拉低至地电平；若 A 点为低电平，M4、M5 关闭，B
点维持高电平不变；这样实现了 B 点反向跟随 A 点电平；</p>
<p>此时 M8 被 CLK 打开，输出信号 <span class="math inline">\(\overline{Q}\)</span>，再经过
M10、M11组成的反相器输出信号 <span class="math inline">\(Q\)</span>。</p></li>
</ul>
<h2 id="电流模型主从锁存器">电流模型主从锁存器</h2>
<p>电流模型主从锁存器 (Current Mode Logic Master-Slave Latch)
本质上是一个<strong>模拟分频器</strong>，其 MOS
管的静态工作点均位于<strong>饱和区</strong>且有<strong>尾电流</strong>，因此无论该锁存器有没有输入信号，其功耗都是一定的。相比于上述的
CMOS
逻辑锁存器，电流模型主从锁存器的<strong>功耗</strong>虽然<strong>较大</strong>，但其<strong>工作频率</strong>有很大优势，因此在<strong>超高速分频器</strong>中有广泛应用。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727175853.png" alt="电流模型主从锁存器" style="zoom:35%; margin: auto;"></p>
<p>电流模型主从锁存器的结构如上图所示，由两个相同的电流模型锁存器串联组成。</p>
<p>先对其左半部分分析：</p>
<p>M1、M2 为一对差分信号放大管，M3、M4 为一对交叉信号锁存管，M5、M6
为一对查分时钟放大管。</p>
<ul>
<li><p>CLK 为高电平时：</p>
<p>M5 导通，M6 截止；</p>
<p>差分信号放大管 M1、M2 对差分输入信号 D 进行采样放大；</p>
<p>交叉信号锁存管 M3、M4 处于无效状态。</p></li>
<li><p>CLK 为低电平时：</p>
<p>M5 截止、M6 导通；</p>
<p>差分信号放大管 M1、M2 处于无效状态；</p>
<p>交叉信号锁存管 M3、M4 形成正反馈，开始锁存被采样信号。</p></li>
</ul>
<p>右半部分与左半部分结构相同，差分管 M12、M13 的输入信号与 M5、M6
的输入信号时钟反相。</p>
<h1 id="cadence-仿真">Cadence 仿真</h1>
<blockquote>
<p>待完成</p>
</blockquote>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>在 docker 中安装 vivado</title>
    <url>/2021/06/01/docker-vivado/</url>
    <content><![CDATA[<figure>
<img src="https://pic.zhouyuqian.com/img/20210726231059.png" alt="docker_vivado">
<figcaption aria-hidden="true">docker_vivado</figcaption>
</figure>
<p>最近台式机崩了，只能使用使用笔记本了（macOS 系统）。因为要用到
vivado，想着装个虚拟机，发现了这篇<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/">文章</a>，原来
docker 也可以使用图形化界面，于是选择了将 vivado 安装到 docker
中，避免虚拟机的臃肿。<del>从此，vivado 成为了全平台软件，macOS
终于站起来了。</del>🤪</p>
<span id="more"></span>
<p>本次安装使用的 vivado 安装包是
<em>Xilinx_Unified_2020.2_1118_1232.tar.gz</em>，需要自行去 <a href="https://www.xilinx.com/support/download.html">Xilinx
官网</a>下载，其他的文件已经上传到 <a href="https://github.com/Starrynightzyq/MyDocker.git">github</a>。</p>
<h1 id="准备">准备</h1>
<p>在 Docker 中安装软件，用 Dockerfile
的方式，需要使用命令行的方式来安装软件，vivado
可以使用命令行的方式安装，安装的设置使用配置文件来实现。</p>
<p>下载 vivado 的安装包，然后解压，然后运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ docker container run --<span class="built_in">rm</span> -it -v &lt;/path/to/Xilinx_Vivado&gt;:/vivado -w /vivado ubuntu:xenial /bin/bash</span><br><span class="line">root@187602ac180d:/vivado# ./xsetup -b ConfigGen</span><br><span class="line">Running <span class="keyword">in</span> batch mode...</span><br><span class="line">Copyright (c) 1986-2021 Xilinx, Inc.  All rights reserved.</span><br><span class="line"></span><br><span class="line">INFO : Log file location - /root/.Xilinx/xinstall/xinstall_1622527035477.<span class="built_in">log</span></span><br><span class="line">Select a Product from the list:</span><br><span class="line">1. Vitis</span><br><span class="line">2. Vivado</span><br><span class="line">3. On-Premises Install <span class="keyword">for</span> Cloud Deployments (Linux only)</span><br><span class="line">4. BootGen</span><br><span class="line">5. Lab Edition</span><br><span class="line">6. Hardware Server</span><br><span class="line">7. PetaLinux (Linux only)</span><br><span class="line">8. Documentation Navigator (Standalone)</span><br><span class="line"></span><br><span class="line">Please choose: 2</span><br><span class="line"></span><br><span class="line">Select an Edition from the list:</span><br><span class="line">1. Vivado HL WebPACK</span><br><span class="line">2. Vivado HL Design Edition</span><br><span class="line">3. Vivado HL System Edition</span><br><span class="line"></span><br><span class="line">Please choose: 3</span><br><span class="line"></span><br><span class="line">INFO : Config file available at /root/.Xilinx/install_config.txt. Please use -c &lt;filename&gt; to point to this install configuration.</span><br></pre></td></tr></table></figure>
<p>这时生成了 vivado 安装的配置文件，将其从 docker
中拷贝出来，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@187602ac180d:/vivado# <span class="built_in">cp</span> /root/.Xilinx/install_config.txt ./</span><br></pre></td></tr></table></figure>
<p>退出容器后，将 <em>install_config.txt</em>
拷贝到合适的位置，再作修改：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### Vivado HL System Edition Install Configuration ####</span></span><br><span class="line"><span class="attribute">Edition</span>=Vivado HL System Edition</span><br><span class="line"></span><br><span class="line"><span class="attribute">Product</span>=Vivado</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path where Xilinx software will be installed.</span></span><br><span class="line"><span class="attribute">Destination</span>=/opt/Xilinx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose the Products/Devices the you would like to install.</span></span><br><span class="line"><span class="attribute">Modules</span>=Zynq UltraScale+ MPSoC:<span class="number">0</span>,Versal AI Core Series ES1:<span class="number">0</span>,Versal Prime Series:<span class="number">0</span>,DocNav:<span class="number">1</span>,System Generator:<span class="number">0</span>,Virtex UltraScale+ HBM:<span class="number">0</span>,Virtex UltraScale+ <span class="number">58</span>G:<span class="number">0</span>,Virtex UltraScale+ <span class="number">58</span>G ES:<span class="number">0</span>,Kintex-<span class="number">7</span>:<span class="number">0</span>,Virtex UltraScale+:<span class="number">0</span>,Zynq-<span class="number">7000</span>:<span class="number">1</span>,Versal AI Core Series:<span class="number">0</span>,Kintex UltraScale+:<span class="number">0</span>,Model Composer and System Generator:<span class="number">0</span>,Spartan-<span class="number">7</span>:<span class="number">0</span>,Kintex UltraScale:<span class="number">0</span>,Virtex UltraScale:<span class="number">0</span>,Engineering Sample Devices:<span class="number">0</span>,Zynq UltraScale+ RFSoC:<span class="number">0</span>,Virtex-<span class="number">7</span>:<span class="number">0</span>,Versal Prime Series ES1:<span class="number">0</span>,Artix-<span class="number">7</span>:<span class="number">0</span>,Virtex UltraScale+ HBM ES:<span class="number">0</span>,Zynq UltraScale+ RFSoC ES:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose the post install scripts you&#x27;d like to run as part of the finalization step. Please note that some of these scripts may require user interaction during runtime.</span></span><br><span class="line"><span class="attribute">InstallOptions</span>=Acquire or Manage a License Key:<span class="number">0</span>,Enable WebTalk for Vivado to send usage statistics to Xilinx (Always enabled for WebPACK license):<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Shortcuts and File associations ##</span></span><br><span class="line"><span class="comment"># Choose whether Start menu/Application menu shortcuts will be created or not.</span></span><br><span class="line"><span class="attribute">CreateProgramGroupShortcuts</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose the name of the Start menu/Application menu shortcut. This setting will be ignored if you choose NOT to create shortcuts.</span></span><br><span class="line"><span class="attribute">ProgramGroupFolder</span>=Xilinx Design Tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose whether shortcuts will be created for All users or just the Current user. Shortcuts can be created for all users only if you run the installer as administrator.</span></span><br><span class="line"><span class="attribute">CreateShortcutsForAllUsers</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose whether shortcuts will be created on the desktop or not.</span></span><br><span class="line"><span class="attribute">CreateDesktopShortcuts</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose whether file associations will be created or not.</span></span><br><span class="line"><span class="attribute">CreateFileAssociation</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose whether disk usage will be optimized (reduced) after installation</span></span><br><span class="line"><span class="attribute">EnableDiskUsageOptimization</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="创建-docker-镜像">创建 Docker 镜像</h1>
<h2 id="ubuntu-xorg">ubuntu-xorg</h2>
<p>第一个 <code>ubuntu-xorg</code> 的 <code>Dockerfile</code>
是这样的：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:xenial</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND noninteractive</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">  sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt upgrade -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt -y --no-install-recommends install \</span></span><br><span class="line"><span class="language-bash">    ca-certificates curl <span class="built_in">sudo</span> xorg dbus dbus-x11 ubuntu-gnome-default-settings gtk2-engines \</span></span><br><span class="line"><span class="language-bash">    ttf-ubuntu-font-family fonts-ubuntu-font-family-console fonts-droid-fallback lxappearance &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt-get autoclean &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt-get autoremove &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">rm</span> -rf /var/lib/apt/lists/* &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">echo</span> <span class="string">&quot;%sudo ALL=(ALL) NOPASSWD: ALL&quot;</span> &gt;&gt; /etc/sudoers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> gosu_version=<span class="number">1.10</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">  curl -SL <span class="string">&quot;https://github.com/tianon/gosu/releases/download/<span class="variable">$&#123;gosu_version&#125;</span>/gosu-<span class="subst">$(dpkg --print-architecture)</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    -o /usr/local/bin/gosu &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  curl -SL <span class="string">&quot;https://github.com/tianon/gosu/releases/download/<span class="variable">$&#123;gosu_version&#125;</span>/gosu-<span class="subst">$(dpkg --print-architecture)</span>.asc&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    -o /usr/local/bin/gosu.asc &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  gpg --verify /usr/local/bin/gosu.asc &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">rm</span> -rf /usr/local/bin/gosu.asc /root/.gnupg &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">chmod</span> +x /usr/local/bin/gosu</span></span><br></pre></td></tr></table></figure>
<p>然后创建这个镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image build --<span class="built_in">rm</span> --no-cache --pull -t ubuntu-xorg .</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>--rm :</strong> 设置镜像成功后删除中间容器；</li>
<li><strong>--no-cache : </strong>创建镜像的过程不使用缓存；</li>
<li><strong>--pull :</strong> 尝试去更新镜像的新版本；</li>
<li><strong>--tag, -t :</strong> 镜像的名字及标签，通常 name:tag 或者
name 格式；可以在一次构建中为一个镜像设置多个标签。</li>
</ul>
</blockquote>
<h2 id="ubuntu-vivado">ubuntu-vivado</h2>
<p>第二个镜像 <code>ubuntu-vivado</code> 的 <code>Dockerfile</code>
是这样的：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu-xorg</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">  dpkg --add-architecture i386 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt -y --no-install-recommends install \</span></span><br><span class="line"><span class="language-bash">    build-essential git gcc-multilib libc6-dev:i386 ocl-icd-opencl-dev libjpeg62-dev &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt-get install -y vim &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt-get autoclean &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt-get autoremove &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> install_config.txt /vivado-installer/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> Vivado_license_to2037.lic /vivado-installer/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> VIVADO_TAR_URI=http://host.docker.internal/Xilinx_Unified_2020.<span class="number">2</span>_1118_1232.tar.gz</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">  curl <span class="variable">$&#123;VIVADO_TAR_URI&#125;</span> | tar zx --strip-components=1 -C /vivado-installer &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  /vivado-installer/xsetup \</span></span><br><span class="line"><span class="language-bash">    --agree 3rdPartyEULA,WebTalkTerms,XilinxEULA \</span></span><br><span class="line"><span class="language-bash">    --batch Install \</span></span><br><span class="line"><span class="language-bash">    --config /vivado-installer/install_config.txt &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">echo</span> <span class="string">&quot;source /opt/Xilinx/Vivado/2020.2/.settings64-Vivado.sh&quot;</span> &gt;&gt; /etc/bash.bashrc &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">mkdir</span> -p /work/.Xilinx &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">cp</span> /vivado-installer/Vivado_license_to2037.lic /work/.Xilinx/Vivado_license_to2037.lic &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">rm</span> -rf /vivado-installer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> pynq-z2.tar.gz /opt/Xilinx/Vivado/2020.2/data/boards/board_files/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> entrypoint.sh /usr/local/bin/entrypoint.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /usr/local/bin/entrypoint.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/usr/local/bin/entrypoint.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-l&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里使用 <code>http://host.docker.internal</code>
来访问宿主机，这种用法似乎只在 windows 和 macOS 版的 docker
上可以用，linux 要换种方法。</p>
</blockquote>
<p>这里使用 curl 来获取 vivado
安装包，避免了生成的镜像过大的问题（其实安装的时候还是需要很大空间，安装后的镜像有快
43G 了，安装过程中还有解压后的安装包，因此最好将 Disk image size
设置为大于
100G，否则可能会因为空间不足而安装失败），因此需要在本地搭建一个文件服务器，来提供
vivado 安装包。</p>
<p>在含有 vivado 安装包的目录下运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Dockerfile 中，vivado安装包的路径是
<code>http://host.docker.internal/Xilinx_Unified_2020.2_1118_1232.tar.gz</code>，在宿主机中应该可以通过
<code>http://127.0.0.1/Xilinx_Unified_2020.2_1118_1232.tar.gz</code>
访问到 vivado 的安装包，路径不对的可以改一下。</p>
</blockquote>
<p>在运行 docker bulid 之前，先要确保在含有 <code>Dockerfile</code>
的文件夹下有这些文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">Dockerfile                Vivado_license_to2037.lic entrypoint.sh             install_config.txt        pynq-z2.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>install_config.txt</strong> 是第一步生成的 vivado
安装配置文件；</p>
<p><strong>pynq-z2.tar.gz</strong>
是板卡文件，可以换成别的板卡文件，不过需要修改一下 Dockerfile；</p>
<p><strong>Vivado_license_to2037.lic</strong> 是
license，<del>不要也没关系，反正还没找到用命令行安装 license
的方法</del>，会安装到 <em>/work/.Xilinx/</em> 目录下；</p>
<p><strong>entrypoint.sh</strong> 是一个把宿主机用户和容器内用户的 UID
组合在一起的脚本，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">UART_GROUP_ID=$&#123;UART_GROUP_ID:-20&#125;</span><br><span class="line">if ! grep -q &quot;x:$&#123;UART_GROUP_ID&#125;:&quot; /etc/group; then</span><br><span class="line">  groupadd -g &quot;$UART_GROUP_ID&quot; uart</span><br><span class="line">fi</span><br><span class="line">UART_GROUP=$(grep -Po &quot;^\\w+(?=:x:$&#123;UART_GROUP_ID&#125;:)&quot; /etc/group)</span><br><span class="line"></span><br><span class="line">if [[ -n &quot;$USER_ID&quot; ]]; then</span><br><span class="line">  useradd -s /bin/bash -u &quot;$USER_ID&quot; -o -d &quot;$PWD&quot; user</span><br><span class="line">  usermod -aG sudo user</span><br><span class="line">  usermod -aG &quot;$UART_GROUP&quot; user</span><br><span class="line">  chown user $(tty)</span><br><span class="line">  exec /usr/local/bin/gosu user &quot;$@&quot;</span><br><span class="line">else</span><br><span class="line">  exec &quot;$@&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</blockquote>
<p>然后含有 <code>Dockerfile</code> 的目录下运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image build --<span class="built_in">rm</span> --no-cache -t ubuntu-vivado .</span><br></pre></td></tr></table></figure>
<h1 id="使用已安装的-vivado">使用已安装的 Vivado</h1>
<h2 id="在容器中创建一个工作用户"><del>在容器中创建一个工作用户</del></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docke container run -it --<span class="built_in">rm</span> -e USER_ID=<span class="variable">$UID</span> -v &lt;localhost/vivado/workspace&gt;:/work -w /work ubuntu-vivado</span><br></pre></td></tr></table></figure>
<p>这一步只是演示如何以非 root 用户启动 docker 容器。</p>
<h2 id="在-docker-中调用-x11">在 Docker 中调用 X11</h2>
<blockquote>
<p>在 MAC 上需要先安装 XQuartz 在转发 X11，可以使用 brew 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask xquartz</span><br></pre></td></tr></table></figure>
<p>安装完需要重启电脑，并且在 XQuartz 的设置里勾选上
<em>安全性--允许从网络连接</em></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726231129.png" alt="xquartz">
<figcaption aria-hidden="true">xquartz</figcaption>
</figure>
</blockquote>
<p>首先，允许工作用户使用以下命令在本地请求 X11：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ xhost +si:localuser:$(<span class="built_in">whoami</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ xhost +</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726231144.png" alt="X11">
<figcaption aria-hidden="true">X11</figcaption>
</figure>
<p>接下来，使用以下选项启动 Docker 容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container run -it --<span class="built_in">rm</span> \</span><br><span class="line">    -e USER_ID=<span class="variable">$UID</span> \</span><br><span class="line">    -e DISPLAY \</span><br><span class="line">    -v /tmp/.X11-unix:/tmp/.X11-unix:ro \</span><br><span class="line">    -v &lt;localhost/vivado/workspace&gt;:/work \</span><br><span class="line">    -w /work \</span><br><span class="line">    ubuntu-vivado</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的命令在 MAC 中使用的时候会提示无权限使用 X11，将
<code>-e DISPLAY</code> 换成了
<code>-e DISPLAY=host.docker.internal:0</code> 就可以运行了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container run -it --<span class="built_in">rm</span> \</span><br><span class="line"> -e USER_ID=<span class="variable">$UID</span> \</span><br><span class="line"> -e DISPLAY=host.docker.internal:0 \</span><br><span class="line"> -v /tmp/.X11-unix:/tmp/.X11-unix:ro \</span><br><span class="line"> -v <span class="variable">$PWD</span>:/work \</span><br><span class="line"> -w /work \</span><br><span class="line"> ubuntu-vivado</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<ul>
<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>
<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i
同时使用；</li>
<li><strong>--volume , -v:</strong> 绑定一个卷；</li>
<li><strong>-w, --workdir= :</strong> Working directory inside the
container；</li>
<li><strong>-e, --env=[] :</strong> Set environment
variables(设置环境变量) ；</li>
<li><strong>--rm=false</strong> Automatically remove the container when
it exits；</li>
</ul>
</blockquote>
<p>这时，在终端里输入 <code>vivado</code>，就可以打开 vivado 了：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726231202.png" alt="vivado">
<figcaption aria-hidden="true">vivado</figcaption>
</figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210726231221.png" alt="vivado2">
<figcaption aria-hidden="true">vivado2</figcaption>
</figure>
<h1 id="reference">Reference</h1>
<p>[1] <a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/">Xilinx
の開発ツールを Docker コンテナに閉じ込める</a></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>vivado</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>获取 VSCode VSIX 扩展</title>
    <url>/2025/03/06/get-vscode-vsix-extension/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>在官方的扩展市场中已经不提供直接下载 .vsix 的 link
了，本文介绍了一种获取 VSCode Extansion 的离线安装包的方法。该方法来自<a href="https://oscar.blog.csdn.net/">oscar999</a>分享的文章<a href="https://blog.csdn.net/oscar999/article/details/145193849">获取VS
Code扩展指定版本的安装档(.vsix)的方式</a>。</p>
<h1 id="更简单的方法">更简单的方法</h1>
<p><a href="https://vsix.2i.gs/">https://vsix.2i.gs/</a>
这个网站可以快速获取 VSCode 的 .vsix 文件，直接输入插件的 URL
就可以获取到该插件的 .vsix 文件。</p>
<h1 id="原来的方法">原来的方法</h1>
<p>见下文。</p>
<h1 id="vsix-获取">.vsix 获取</h1>
<p>可以通过 VS Code 官方拓展市场的 API 接口
<strong><code>https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery</code></strong>
获取 .vsix 文件，我们可以用 <a href="https://web.postman.co/">PostMan</a> 来调用这个 API。</p>
<p>具体步骤：</p>
<ol type="1">
<li><p>创建一个 POST
类型的请求，地址设为：<code>https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery</code></p></li>
<li><p>在 Header 中添加如下参数：</p>
<p><code>Accept</code>:
<code>application/json;api-version=6.0-preview.1</code></p>
<p><code>Content-Type</code>: <code>application/json</code></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/202503061954757.png" alt="header">
<figcaption aria-hidden="true">header</figcaption>
</figure>
<blockquote>
<p><code>application/json</code>
指定了客户端希望接收的响应内容类型为JSON格式。<code>api-version=6.0-preview.1</code>指定客户端希望使用的API版本。</p>
<p><code>Content-Type: application/json</code>明确告诉服务器，客户端发送的请求体（如果有的话）是JSON格式的</p>
</blockquote></li>
<li><p>Body 类型选 raw -- JSON，在 Body 中输入如下内容：
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;filters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;criteria&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;filterType&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GitHub.github-vscode-theme&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;flags&quot;</span><span class="punctuation">:</span> <span class="number">103</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/202503061955457.png" alt="Body">
<figcaption aria-hidden="true">Body</figcaption>
</figure>
<p>其中 <code>"value": "GitHub.github-vscode-theme"</code>
是要下载的扩展的标识符，可以通过 VS Code 的扩展市场的链接最后的
<code>itemName</code> 找到对应的标识符。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/202503061952292.png" alt="itemName">
<figcaption aria-hidden="true">itemName</figcaption>
</figure></li>
<li><p>点击 Send，在 Body 中会看到返回的 JSON 数据。</p>
<p>找到其中 <code>assetType</code> 为
<code>Microsoft.VisualStudio.Services.VSIXPackage</code> 就是对应版本的
vsix 文件，<code>source</code> 为下载地址。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/202503061955958.png" alt="Result">
<figcaption aria-hidden="true">Result</figcaption>
</figure></li>
<li><p>下载链接的文件，得到一个文件名为
<code>Microsoft.VisualStudio.Services.VSIXPackage</code>
的文件，将其后缀改为 <code>.vsix</code>，即可安装了。</p></li>
</ol>
<h1 id="vsix-安装">.vsix 安装</h1>
<figure>
<img src="https://pic.zhouyuqian.com/img/202503061953571.png" alt="vsix 安装">
<figcaption aria-hidden="true">vsix 安装</figcaption>
</figure>
<h1 id="reference">Reference</h1>
<p>[1] <a href="https://blog.csdn.net/oscar999/article/details/145193849">获取VS
Code扩展指定版本的安装档(.vsix)的方式</a></p>
<p>[2] <a href="https://itlanyan.com/vsix-downloader-tool-to-download-vscode-extensions/">VSIX
Downloader：一个VS Code插件下载工具</a></p>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 GitHub Actions 自动发布 Hexo 博客</title>
    <url>/2024/12/09/hexo-auto-deploy-with-github-actions/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>由于换了电脑，重新搭建 hexo
博客环境还是蛮麻烦的，尤其是好多依赖都是国外网站，下载很慢，因此就想使用
Github Actions 自动发布博客。</p>
<p>实现的目标：本地撰写 Mardown 格式的文章，提交到 Github 仓库，由
Github Actions 自动构建，部署到 Github Pages。</p>
<h1 id="设置-github-actions">设置 Github Actions</h1>
<p>假设我们有两个 Github
仓库，分别用于存放博客源代码和博客静态资源（存放博客静态资源的仓库名字通常为
<code>usrname.github.io</code>）。存放博客源代码的仓库下文称
<code>src</code> 仓库，存放博客静态资源的仓库下文称为 <code>prd</code>
仓库。</p>
<h2 id="设置密钥">1. 设置密钥</h2>
<p>为了确保 Github Actions 能够正确部署博客，需要在 Github
仓库中设置密钥。</p>
<p>首先在本地生成密钥对：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span> -f hexo-dedeploy-key</span><br></pre></td></tr></table></figure>
<p>一路回车，当前目录就生成了 hexo-dedeploy-key 和 hexo-dedeploy-key.pub
两个文件。</p>
<p>然后我们来设置 <code>src</code> 仓库的 repository secrets：</p>
<p>进入 <code>src</code> 仓库，选择 Settings -&gt; Secrets and variables
-&gt; Actions -&gt; New repository secret，Name 为
<code>HEXO_DEPLOY_PRI</code>，secrets 填 <code>hexo-dedeploy-key</code>
文件的内容。</p>
<p>接着设置 <code>prd</code> 仓库的 deployment keys：</p>
<p>进入 <code>prd</code> 仓库，选择 Settings -&gt; Deploy keys -&gt; Add
deploy key，Title 为 <code>HEXO_DEPLOY_PUB</code>，Key 填
<code>hexo-dedeploy-key.pub</code> 文件的内容。</p>
<h2 id="github-actions-文件">2. Github Actions 文件</h2>
<p>在 <code>src</code> 仓库中，创建
<code>.github/workflows/deploy.yml</code> 文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span> <span class="string">blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">starrynightzyq[bot]</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">starrynightzyq[bot]@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span> <span class="string">on</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.repository.owner.id</span> <span class="string">==</span> <span class="string">github.event.sender.id</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">16.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">SSH</span> <span class="string">key</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">shimataro/ssh-key-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">id_rsa</span></span><br><span class="line">          <span class="attr">known_hosts:</span> <span class="string">&#x27;github.com&#x27;</span></span><br><span class="line">          <span class="attr">if_key_exists:</span> <span class="string">replace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">pandoc</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">nikeee/setup-pandoc@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">publish</span></span><br></pre></td></tr></table></figure>
<p>配置好之后，我们在 <code>src</code> 仓库的
<code>source/_posts/</code> 目录下创建一个 Markdown
文件，编写博客内容，然后提交代码，Github Actions
就会自动构建博客，并将博客部署到 <code>prd</code> 仓库。</p>
<h1 id="github-actions-的注意点">Github Actions 的注意点</h1>
<h2 id="设置-ssh-key">1. 设置 ssh key</h2>
<p>网上的教程中看到的方法都是直接修改系统的 ssh key，但是 Github Actions
是在虚拟机中运行的，所以修改系统 ssh key 是没有意义的。</p>
<p>错误的方法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">SSH</span> <span class="string">key</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">    echo &quot;$HEXO_DEPLOY_PRI&quot; | tr -d &#x27;\r&#x27; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">    chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">    ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br></pre></td></tr></table></figure>
<p>正确的方法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">SSH</span> <span class="string">key</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">shimataro/ssh-key-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">id_rsa</span></span><br><span class="line">    <span class="attr">known_hosts:</span> <span class="string">&#x27;github.com&#x27;</span></span><br><span class="line">    <span class="attr">if_key_exists:</span> <span class="string">replace</span></span><br></pre></td></tr></table></figure>
<h2 id="配置-pandoc">2. 配置 pandoc</h2>
<p>pandoc 是一个将 Markdown 转换为各种格式的命令行工具，它使用 Lua
脚本来扩展 Markdown 的语法。在 Github Actions 中，我们可以使用 npm 安装
pandoc，也可以使用 pandoc-action 安装 pandoc。我用的是
pandoc-action：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">pandoc</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">nikeee/setup-pandoc@v1</span></span><br></pre></td></tr></table></figure>
<h1 id="遇到的问题">遇到的问题</h1>
<h2 id="npm-err-request-to-httpsregistry.npm.taobao.orgyargsdownload...-failed-reason-certificate-has-expired">1.
npm ERR! request to https://registry.npm.taobao.org/yargs/download/...
failed, reason: certificate has expired</h2>
<p>在执行 <code>npm install</code> 这一步时，报错：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">npm</span> ERR! code CERT_HAS_EXPIRED</span><br><span class="line"><span class="attribute">npm</span> ERR! errno CERT_HAS_EXPIRED</span><br><span class="line"><span class="attribute">npm</span> ERR! request to https://registry.npm.taobao.org/yargs/download/yargs-<span class="number">3</span>.<span class="number">10</span>.<span class="number">0</span>.tgz?cache=<span class="number">0</span>&amp;sync_timestamp=<span class="number">1594421075416</span>&amp;other_urls=https%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fregistry.npm.taobao.org%<span class="number">2</span>Fyargs%<span class="number">2</span>Fdownload%<span class="number">2</span>Fyargs-<span class="number">3</span>.<span class="number">10</span>.<span class="number">0</span>.tgz failed, reason: certificate has expired</span><br></pre></td></tr></table></figure>
<p>这是因为之前本地 deploy 时，使用了淘宝的镜像，但是taobao
的镜像已经过期了，所以需要更新镜像。由于我们是在 Github Actions
中，所以只需要删除 package-lock.json 文件重新 check in 即可。</p>
<h2 id="err-typeerror-tab.repeat-is-not-a-function">2. err: TypeError:
tab.repeat is not a function</h2>
<p>执行 <code>hexo g</code> 命令时，报出如下错误：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: TypeError: <span class="keyword">tab</span>.<span class="built_in">repeat</span> <span class="keyword">is</span> not <span class="keyword">a</span> <span class="keyword">function</span></span><br></pre></td></tr></table></figure>
<p>是 <code>_config.yml</code> 文件中 highlight 配置错误（ tab_replace
值写法错误）</p>
<p>错误写法：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>正确写法：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;    &#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="error-rhexo-renderer-pandoc-pandoc-exited-with-code-null.">3.
Error: R][hexo-renderer-pandoc] pandoc exited with code null.</h2>
<p>在执行 <code>hexo g</code> 命令时，报出如下错误：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Error: </span>R][hexo-renderer-pandoc] pandoc exited with code null.</span><br></pre></td></tr></table></figure>
<p>这是因为在 next 主题中将公式渲染器跟换为
hexo-renderer-pandoc，该渲染器需要有 pandoc
的后端渲染程序支持，所以需要安装 pandoc。在 Github Actions
中，可以加入下面的步骤：</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">steps</span><span class="punctuation">:</span></span><br><span class="line"><span class="attribute">...</span></span><br><span class="line"><span class="attribute">- name</span><span class="punctuation">:</span> <span class="string">Setup pandoc</span></span><br><span class="line">  <span class="attribute">uses</span><span class="punctuation">:</span> <span class="string">nikeee/setup-pandoc@v1</span></span><br></pre></td></tr></table></figure>
<h1 id="其他">其他</h1>
<p>在 Github Actions 设置完成后，本地可以不安装 hexo 环境，我通常使用
VSCode 编写博客，为了自动生成文章头（Front-matter），可以借助 VSCode
的插件：<a href="https://marketplace.visualstudio.com/items?itemName=OBKoro1.korofileheader">koroFileHeader</a>。安装该插件后，在
VSCode 的 <code>settings.json</code> 文件中添加如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;fileheader.customMade&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;toc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Do not edit&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;LastEditTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Do not edit&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[]&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fileheader.configObj&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;throttleTime&quot;</span><span class="punctuation">:</span> <span class="number">60000</span><span class="punctuation">,</span> <span class="comment">// 对同一个文件 需要过1分钟再次修改文件并保存才会更新注释</span></span><br><span class="line">        <span class="attr">&quot;supportAutoLanguage&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;md&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 设置过后只有该数组里面的文件 才会自动添加头部注释</span></span><br><span class="line">        <span class="comment">// 自定义语言</span></span><br><span class="line">        <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;md&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// md后缀的文件</span></span><br><span class="line">                <span class="attr">&quot;head&quot;</span><span class="punctuation">:</span> <span class="string">&quot;---&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;middle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span> <span class="string">&quot;---&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;specialOptions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// 文件后缀、或者语言后缀，可针对单个文件后缀进行配置：language的自定义语言配置</span></span><br><span class="line">            <span class="attr">&quot;md&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">//  特殊字段自定义</span></span><br><span class="line">                <span class="attr">&quot;Date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;LastEditTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;description&quot;</span><span class="punctuation">,</span> <span class="comment">// 头部注释大写的描述Description</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>使用快捷键 window：<code>ctrl+win+i</code>,
mac：<code>ctrl+cmd+i</code>, linux: <code>ctrl+meta+i</code>, Ubuntu:
<code>ctrl+super+i</code>，即可自动在 Markdown 文件添加
Front-matter，格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-02-06 16:40:37</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2025-02-06 16:43:25</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="attr">tags:</span> []</span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>保存文件的时候会自动更新 <code>updated</code> 时间。</p>
<h1 id="refrerence">Refrerence</h1>
<p>[1]. <a href="https://alanlee.fun/2024/07/05/deploy-hexo-with-github-action/">使用
GitHub Actions 自动发布 Hexo 博客</a></p>
<p>[2]. <a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用
Github Actions 自动部署 Hexo 博客</a></p>
<p>[3]. <a href="https://hui-shao.com/hexo-github-action-vervel/">使用
Github Action + Vercel 为 Hexo 的 Pandoc 渲染器提供支持</a></p>
<p>[4]. <a href="https://www.cnblogs.com/ll666/p/18089299">淘宝镜像的https证书过期</a></p>
<p>[5]. <a href="https://yijile.com/zh/hexo-7-3-0-server-type-error-highlight-tab-replace/">Hexo
7.3.0 使用 hexo server 报错“TypeError: tab.repeat is not a function at
_modules-util.js:73:44”如何解决</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github-actions</tag>
      </tags>
  </entry>
  <entry>
    <title>gmid 设计方法</title>
    <url>/2021/03/10/gmid/</url>
    <content><![CDATA[<h1 id="gmid-设计方法的优点">gm/id 设计方法的优点</h1>
<ul>
<li>gm/Id对应Vov，通过其数值大小的选取来达到增益与带宽的折衷；</li>
<li>gm/Id方法是一种look-up table方法；</li>
<li>gm/Id方法为短沟道器件电路设计提供了比公式手算更准确的初值；</li>
<li>gm/Id方法为亚阈值设计提供了有力的工具。</li>
</ul>
<span id="more"></span>
<h1 id="长沟道模型回顾">长沟道模型回顾</h1>
<p>在长沟道期间中，<span class="math inline">\(V_{ov}\)</span>
表示过驱动电压： <span class="math display">\[
V_{ov} = V_{gs} - V_{T}
\]</span></p>
<p><img src="https://pic.zhouyuqian.com/img/20210727181920.png" alt="image-20210310201310417" style="zoom:50%;"></p>
<p>在不同的 <span class="math inline">\(V_{ds}\)</span> 和 <span class="math inline">\(V_{gs}\)</span> 下，NMOS
管会工作在不同的区域：</p>
<ul>
<li><p>截止区：</p>
<p><span class="math inline">\(V_{ov}&lt;0\)</span> ( or <span class="math inline">\(V_{gs} &lt; V_{T}\)</span> )，</p>
<p><span class="math display">\[
I_{D} = 0
\]</span></p></li>
<li><p>线性区：</p>
<p><span class="math inline">\(V_{ov}&gt;0\)</span> and <span class="math inline">\(V_{ds} &lt; V_{dsat}\)</span>，</p>
<p><span class="math display">\[
I_D = \frac{1}{2}\mu C_{ox}\frac{W}{L}[2V_{ov}V_{DS}-V_{DS}^2]
\]</span></p>
<p><span class="math display">\[
R_{on} = \frac{\partial V_{ds}}{\partial I_D}
\]</span></p></li>
<li><p>饱和区：</p>
<p><span class="math inline">\(V_{ov}&gt;0\)</span> and <span class="math inline">\(V_{ds} &gt; V_{dsat}\)</span>，</p>
<p><span class="math display">\[
I_D = \frac{1}{2}\mu C_{ox}\frac{W}{L} V_{ov}^2
\]</span></p></li>
</ul>
<p><img src="https://pic.zhouyuqian.com/img/20210727181933.png" alt="image-20210310202752762" style="zoom:50%;"></p>
<p><img src="https://pic.zhouyuqian.com/img/20210727181942.png" alt="image-20210310202909324" style="zoom:50%;"></p>
<p>在<strong>饱和区</strong>，<span class="math inline">\(I_D\)</span>
是 <span class="math inline">\(V_{ov}\)</span> 的函数，小信号模型中的
<span class="math inline">\(g_m\)</span> 被定义为： <span class="math display">\[
g_m = \frac{\partial I_D}{\partial V_{ov}} = \mu C_{ox}\frac{W}{L}
V_{ov}
\]</span> 可以得到： <span class="math display">\[
\frac{g_m}{I_D} = \frac{2}{V_{ov}}
\]</span> 上述公式表明了 <span class="math inline">\(g_m/I_D\)</span> 和
<span class="math inline">\(V_{ov}\)</span> 之间的关系。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182000.png" alt="image-20210310213132752" style="zoom:50%;"></p>
<p>定义晶体管的截止频率 (transit frequency) <span class="math inline">\(f_T\)</span>: <span class="math display">\[
f_T = \frac{1}{2\pi}\frac{g_m}{C_{gs}}
\]</span> 其中 <span class="math inline">\(C_{gs} =
\frac{2}{3}C_{ox}WL\)</span>，则： <span class="math display">\[
f_T = \frac{1}{2\pi}\frac{g_m}{C_{gs}} = \frac{1}{2\pi}\frac{2\mu
V_{ov}}{3L^2}
\]</span> 从上面的等式中我们可以得到 <span class="math inline">\(g_m\)</span> 和 <span class="math inline">\(f_T\)</span> 之间的约束，Fig. 9 将其表示出来。</p>
<h1 id="传统的-v_ov-设计方法">传统的 <span class="math inline">\(V_{ov}\)</span> 设计方法</h1>
<p><img src="https://pic.zhouyuqian.com/img/20210727182013.png" alt="image-20210310203850046" style="zoom:50%;"></p>
<p>在上图的电路中，假设 <span class="math inline">\(V_{ov} = 300 mV,
I_D=1mA\)</span>，则： <span class="math display">\[
v_{out} = -i_s \cdot R_L=-v_{in} \cdot g_m \cdot 1k\Omega
\]</span></p>
<p><span class="math display">\[
g_m = 2\frac{I_D}{V_{ov}} = \frac{2\cdot 1mA}{300 mV} = 6.7 \frac{mA}{V}
\]</span></p>
<p>可以得到增益为： <span class="math display">\[
\frac{v_{out}}{v_{in}}= -g_m \cdot R_L = -6.7\frac{mA}{V}\cdot 1k\Omega
= -6.7 \frac{V}{V}
\]</span> 在上面的结构中假设要求带宽 <span class="math inline">\(500MHz\)</span>，增益为 10，基于 <span class="math inline">\(V_{ov}\)</span> 的设计流程如下：</p>
<ol type="1">
<li><p>为了保证增益，首先可以计算 <span class="math inline">\(g_m\)</span>： <span class="math display">\[
g_m = \frac{v_{out}}{v_{in}} / R_L = 10\frac{V}{V}/1k = 10mA/V
\]</span></p></li>
<li><p>输入极点在 <span class="math inline">\(500MHz\)</span>，可以以此计算 <span class="math inline">\(C_{gs}\)</span>： <span class="math display">\[
C_{gs} = \frac{1}{2\pi \times 300\Omega \times 500MHz} = 1.1pF
\]</span></p></li>
<li><p>可以计算出截止频率： <span class="math display">\[
f_T = \frac{g_m}{C_{gs}}=\frac{10mS}{1.1pF} = 9.4 GHz
\]</span></p></li>
<li><p>通过 Fig. 9 可以知道： <span class="math display">\[
V_{ov} \geq 75 mV
\]</span></p></li>
<li><p>由此通过 Fig. 9 可以知道： <span class="math display">\[
g_m/I_D \leq 26 mS/mA
\]</span></p></li>
<li><p>最终可以得到： <span class="math display">\[
I_D = \frac{g_m}{g_m/I_D} = \frac{10mS}{26mS/mA}=385\mu A
\]</span></p></li>
</ol>
<h1 id="基于-v_ov-设计方法的缺点">基于 <span class="math inline">\(V_{ov}\)</span> 设计方法的缺点</h1>
<p><img src="https://pic.zhouyuqian.com/img/20210727182032.png" alt="image-20210310220510541" style="zoom:50%;"></p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182044.png" alt="image-20210310220527243" style="zoom:50%;"></p>
<p>从 Fig.12 可以看出，长沟道模型在 <span class="math inline">\(V_{ov}\)</span> 较小 (弱反型区) 时 <span class="math inline">\(g_m/I_D\)</span> 与 <span class="math inline">\(V_{ov}\)</span>
的关系预测值与仿真值相差较大，在亚阈值区 (<span class="math inline">\(V_{ov} &lt;0\)</span>) 则完全失效。</p>
<p>从 Fig.12 可以看出，长沟道模型预测的 <span class="math inline">\(f_T\)</span> 与 <span class="math inline">\(V_{ov}\)</span> 的关系与仿真值相差较大。</p>
<h1 id="基于-g_mi_d-的设计方法">基于 <span class="math inline">\(g_m/I_D\)</span> 的设计方法</h1>
<p>由于 <span class="math inline">\(g_m/I_D\)</span> 与 <span class="math inline">\(V_{ov}\)</span> 之间存在关系，则可以用 <span class="math inline">\(g_m/I_D\)</span> 取代 <span class="math inline">\(V_{ov}\)</span> 来表示与 <span class="math inline">\(f_T\)</span> 的关系，原来 Fig.9 的关系可以用
Fig.14 来表示。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182058.png" alt="image-20210310221848963" style="zoom:50%;"></p>
<h2 id="设计流程">设计流程</h2>
<p>在 Fig.8 的结构中假设要求带宽 <span class="math inline">\(500MHz\)</span>，增益为 10，基于 <span class="math inline">\(g_m/I_D\)</span> 的设计流程如下：</p>
<ol type="1">
<li><p>为了保证增益，首先可以计算 <span class="math inline">\(g_m\)</span>： <span class="math display">\[
g_m = \frac{v_{out}}{v_{in}} / R_L = 10\frac{V}{V}/1k = 10mA/V
\]</span></p></li>
<li><p>输入极点在 <span class="math inline">\(500MHz\)</span>，可以以此计算 <span class="math inline">\(C_{gs}\)</span>： <span class="math display">\[
C_{gs} = \frac{1}{2\pi \times 300\Omega \times 500MHz} = 1.1pF
\]</span></p></li>
<li><p>可以计算出截止频率： <span class="math display">\[
f_T = \frac{g_m}{C_{gs}}=\frac{10mS}{1.1pF} = 9.4 GHz
\]</span></p></li>
<li><p>通过 Fig.14 可以知道： <span class="math display">\[
g_m/I_D \leq 17.5 mS/mA
\]</span></p></li>
<li><p>最终： <span class="math display">\[
I_D = \frac{g_m}{g_m/I_D} = \frac{10mS}{17.5mS/mA}=570\mu A
\]</span></p></li>
</ol>
<p><img src="https://pic.zhouyuqian.com/img/20210727182116.png" alt="image-20210311101408375" style="zoom:50%;"></p>
<p>Fig.16 是不同的 <span class="math inline">\(L\)</span> 下，<span class="math inline">\(f_T\)</span> 与 <span class="math inline">\(g_m/I_D\)</span> 的关系，<strong>越大的 <span class="math inline">\(L\)</span>
通常意味着晶体管更慢</strong>。这就意味着要是没有其他的限制，我们就会选择最小的
<span class="math inline">\(L\)</span>，这样晶体管速度最快，面积也最小。因此还需要一个限制会影响
<span class="math inline">\(L\)</span> 的选取，这个限制就是 <span class="math inline">\(r_0\)</span>。</p>
<h2 id="考虑-r_0">考虑 <span class="math inline">\(r_0\)</span></h2>
<p><img src="https://pic.zhouyuqian.com/img/20210727182131.png" alt="image-20210311095357398" style="zoom:50%;"></p>
<p>从上图可以看到 <span class="math inline">\(r_0\)</span> 相当于一个和
<span class="math inline">\(R_L\)</span> 并联的负载，但我们考虑 $R_L $
时，可以忽略 <span class="math inline">\(R_L\)</span> 只考虑 <span class="math inline">\(r_0\)</span>。则： <span class="math display">\[
Intrinsic \ \ Gain = g_mr_0 (\frac{V}{V})
\]</span> <strong><span class="math inline">\(Intrinsic \ \
Gain\)</span> 是晶体管可以达到的最大增益</strong>。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182143.png" alt="image-20210311100239741" style="zoom:50%;"></p>
<p>从 Fig.19 中可以看到不同的 <span class="math inline">\(L\)</span>
对应不同的 <span class="math inline">\(g_mr_0(Intrinsic \ \
Gain)\)</span>。</p>
<p>由于 <span class="math inline">\(r_0\)</span> 与 <span class="math inline">\(V_{ds}\)</span> 有关，这里的假设是 <span class="math inline">\(V_{ds} = V_{DD}/2\)</span>。</p>
<h2 id="考虑-w">考虑 <span class="math inline">\(W\)</span></h2>
<p>通过 Fig.16 和 Fig.19 可以确定 <span class="math inline">\(L\)</span>
和 <span class="math inline">\(g_m/I_D\)</span>：为了满足增益的要求，通过 Fig.19
确定了 <span class="math inline">\(L\)</span>；为了满足 <span class="math inline">\(f_T\)</span> 的要求，通过 Fig.16 确定了 <span class="math inline">\(g_m/I_D\)</span>；通过 <span class="math inline">\(g_m/I_D\)</span> 和 <span class="math inline">\(g_m\)</span> 确定了 <span class="math inline">\(I_D\)</span>。最后剩下的没有确定的量就是 <span class="math inline">\(W\)</span>。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182154.png" alt="image-20210311102457544" style="zoom:50%;"></p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182204.png" alt="image-20210311104821336" style="zoom:50%;"></p>
<p>在 Fig.21 中，由于 <span class="math inline">\(V_b\)</span> 和 <span class="math inline">\(V_{DS}\)</span> 相等，因此 a 和 b 的 <span class="math inline">\(g_m\)</span> 、<span class="math inline">\(C_{gs}\)</span> 相同，而 b
由于并联了两个晶体管，由此 <span class="math inline">\(I_D\)</span> 是 a
的两倍，c 和 b 等价。由此只要保证 <span class="math inline">\(g_m\)</span>-to-<span class="math inline">\(I_D\)</span> 和 <span class="math inline">\(g_m\)</span>-to-<span class="math inline">\(C_{gs}\)</span> 的比率相等，W 变为原来的 N
倍，<span class="math inline">\(I_D\)</span> 也变为原来的 N 倍，而 <span class="math inline">\(g_m/I_D\)</span> 和 <span class="math inline">\(f_T\)</span> 不变。</p>
<h1 id="a-top-to-bottom-design-example">A Top-to-Bottom Design
Example</h1>
<p><img src="https://pic.zhouyuqian.com/img/20210727182215.png" alt="image-20210311095035057" style="zoom:50%;"></p>
<p>设计一个差分放大器，结构如 Fig.23 所示，要求：</p>
<ul>
<li>Gain of ≈ 10</li>
<li>Bandwidth of ≈ 200MHz</li>
<li>Drive a 1pF load</li>
<li>Be driven by a 300Ω</li>
<li>Lowest possible power</li>
</ul>
<h2 id="搭建电路">搭建电路</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727181843.png" alt="OPA">
<figcaption aria-hidden="true">OPA</figcaption>
</figure>
<h2 id="获取晶体管参数">获取晶体管参数</h2>
<p>通过 cadence 仿真并用 MATLAB 处理数据并画出图形。</p>
<center>
<img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://pic.zhouyuqian.com/img/20210727182230.svg"><br>
<br><br>

<div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">
Figure 25: Fruquency and Gain Tradeoff
</div>
</center>
<center>
<img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://pic.zhouyuqian.com/img/20210727182245.svg"><br>
<br><br>

<div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">
Figure 26
</div>
</center>
<center>
<img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://pic.zhouyuqian.com/img/20210727182256.svg"><br>
<br><br>

<div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">
Figure 27
</div>
</center>
<center>
<img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://pic.zhouyuqian.com/img/20210727182322.svg"><br>
<br><br>

<div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">
Figure 28
</div>
</center>
<h2 id="选择参数">选择参数</h2>
<ol type="1">
<li><p>首先确定 <span class="math inline">\(L\)</span>，通过
Fig.25，选取 <span class="math inline">\(L=340n m\)</span>，在 <span class="math inline">\(g_m\)</span> 选取中等值 (15) 时，Intrinsic Gain
大约是 100，这意味着它只会对整体增益产生10％的影响。 <span class="math display">\[
L = 340n
\]</span></p></li>
<li><p>下一步是计算 R 的值： <span class="math display">\[
R = \frac{1}{2\pi \times C_L \times 200MHz} = 800 \Omega
\]</span></p></li>
<li><p>因此通过增益可以确定 <span class="math inline">\(g_m\)</span>：
<span class="math display">\[
g_m = \frac{Gain}{R}= 12.5mS
\]</span></p></li>
<li><p>由于 200MHz 并不是唯一的一个极点，300Ω 的输入电阻与 <span class="math inline">\(C_{gs}\)</span>
会产生第二个极点，为了减少第二个极点对系统的影响，将第二个极点设置在第一个极点的10倍处：
<span class="math display">\[
C_{gs} = \frac{1}{2\pi \times 300\Omega \times 2GHz} = 265 fF
\]</span></p></li>
<li><p>有了 <span class="math inline">\(g_m\)</span> 和 <span class="math inline">\(C_{gs}\)</span>，可以计算出截止频率： <span class="math display">\[
f_{T} = \frac{1}{2\pi}\frac{g_m}{C_{gs}} =
\frac{1}{2\pi}\frac{12.5mS}{265fF}=7.5GHz
\]</span></p></li>
<li><p>有了 <span class="math inline">\(L\)</span> 和 <span class="math inline">\(f_T\)</span>，通过 Fig.25 可以得到 <span class="math inline">\(g_m/I_D\)</span>： <span class="math display">\[
g_m/I_D = 15mS/mA
\]</span></p></li>
<li><p>有了 <span class="math inline">\(g_m/I_D\)</span> 和 <span class="math inline">\(g_m\)</span>，可以计算出 <span class="math inline">\(I_D\)</span>： <span class="math display">\[
I_D = \frac{g_m}{g_m/I_D}= \frac{12.5}{15}\approx 0.83mA
\]</span></p></li>
<li><p>最后，通过 Fig.27 找出对应的 <span class="math inline">\(I_D/(W/L)\)</span> 为 <span class="math inline">\(2.2046e-06\)</span>，因此可以计算出 <span class="math inline">\(W/L = 376\)</span>： <span class="math display">\[
W = 128um
\]</span></p></li>
</ol>
<h2 id="仿真结果">仿真结果</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727181844.svg" alt="db">
<figcaption aria-hidden="true">db</figcaption>
</figure>
<p>仿真的结果显示增益为 18.7 dB，带宽为 164.4 MHz。</p>
<h1 id="reference">Reference</h1>
<p>[1] <a href="http://pan.baidu.com/s/1slW1U4P">Stanford
ee214b的课件</a></p>
]]></content>
      <categories>
        <category>Analog</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>gmid</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署到vercel</title>
    <url>/2024/12/13/hexo-vercel/</url>
    <content><![CDATA[<h1 id="流程">流程</h1>
<pre class="mermaid">flowchart LR
    src[hexo源码]
    action[环境部署、hexo生成 GitHub Actions 自动完成]
    static[静态页面仓库]
    vercel[vercel 自动抓取]
    src --push到GitHub--> action --action push--> static --被抓取--> vercel</pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 美化</title>
    <url>/2020/03/06/hexo-%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="安装升级next主题">安装/升级next主题</h1>
<p>安装</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<p>升级</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span>-reloaded</span><br></pre></td></tr></table></figure>
<p>在 Hexo 的主配置文件中设置主题：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next-reloaded</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>
<p>更新语言配置</p>
<p>从 v6.0.3 版本起，<code>zh-Hans</code> 改名为
<code>zh-CN</code>：https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3</p>
<p>需要修改 Hexo 主配置文件 <code>_config.yml</code> 里的
<code>language</code> 配置</p>
<h1 id="设置主题的scheme">设置主题的Scheme</h1>
<p>Next自带了几种外观，在<strong>主题目录</strong>下的<code>_config.yml</code>里找到<code>scheme</code>，我比较喜欢Mist：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<h1 id="菜单设置">菜单设置</h1>
<p>在<strong>主题目录</strong>下的<code>_config.yml</code>里找到<code>menu</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment"># about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment"># commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>新添加的菜单需要翻译对应的中文</p>
<p>打开<code>hexo/theme/next/languages/zh-CN.yml</code>，在menu下自定义，如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">resources:</span> <span class="string">资源</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>hexo new page "categories"</code></p>
<p>此时在根目录的<code>source</code>文件夹下会生成一个categories文件，文件中有一个<code>index.md</code>文件，修改内容如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2017-12-14 13:05:38</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="设定站点建立时间">设定站点建立时间</h1>
<p>在<strong>主题目录</strong>下的<code>_config.yml</code>里找到<code>since</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2018</span></span><br></pre></td></tr></table></figure>
<h1 id="设置头像">设置头像</h1>
<p>在<strong>主题目录</strong>下的<code>_config.yml</code>里找到<code>avatar</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span> <span class="comment"># 图标</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment"># 圆形图标</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span> <span class="comment"># 图标旋转</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>图片地址在<code>./themes/next-reloaded/source/images/</code>下</p>
<h1 id="网站图标设置">网站图标设置</h1>
<p>下载16x16以及32x32大小的<strong>PNG格式图标</strong>，置于<code>/themes/next/source/images/</code>下</p>
<p>在<strong>主题目录</strong>下的<code>_config.yml</code>里找到<code>favicon</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-kite.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-kite.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-kite.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo-kite.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>
<h1 id="文章底部标签显示的优化">文章底部标签显示的优化</h1>
<p>修改<code>/themes/next/layout/_macro/post.swig</code>，搜索
<code>rel="tag"&gt;#</code>，将 <code>#</code> 换成
<code>&lt;i class="fa fa-tag"&gt;&lt;/i&gt;</code></p>
<h1 id="主页文章添加阴影效果">主页文章添加阴影效果</h1>
<p>现在使用自定义CSS的办法：
在主题目录下的<code>_config.yml</code>或<code>next.yml</code>中，设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  style: <span class="built_in">source</span>/_data/styles.styl</span><br></pre></td></tr></table></figure>
<p>然后，将自定义CSS放进<code>hexo/source/_data/styles.styl</code>文件中即可</p>
<p>打开<code>hexo/source/source/_data/styles.styl</code>，添加以下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自动更换背景图片">自动更换背景图片</h1>
<blockquote>
<p>https://www.jianshu.com/p/30bf702f533c</p>
</blockquote>
<p>打开<code>hexo/source/source/_data/styles.styl</code>，添加以下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//页面背景</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">https://source.unsplash.com/random/1600x900</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123; </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>background:url为图片路径，也可以使用本地地址，如
<code>/images/background.jpg</code>,地址在
<code>hexo/themes/next/source/images</code> 下
background-repeat：若果背景图片不能全屏，那么是否平铺显示，充满屏幕
background-attachment：背景是否随着网页上下滚动而滚动，fixed为固定
background-size：图片展示大小，这里设置100%
100%的意义为：如果背景图片不能全屏，那么是否通过拉伸的方式将背景强制拉伸至全屏显示。</p>
<h1 id="顶部加载条">顶部加载条</h1>
<p>修改主题配置文件，找到<code>pace</code>改为<code>true</code>，并从上面提供的样式中选择一种填入<code>pace_theme</code>中就可以了：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/HubSpot/pace</span></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure>
<h1 id="浏览页面的时候显示当前浏览进度">浏览页面的时候显示当前浏览进度</h1>
<p>打开 <code>themes/next/_config.yml</code> ,搜索关键字
<code>scrollpercent</code> ,把 <code>false</code> 改为
<code>true</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>如果想把 <code>top</code>按钮放在侧边栏,打开
<code>themes/next/_config.yml</code> ,搜索关键字 <code>b2t</code> ,把
<code>false</code> 改为 <code>true</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar</span></span><br><span class="line">  <span class="attr">b2t:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="文章顶部显示更新时间默认打开">文章顶部显示更新时间(默认打开)</h1>
<p>打开主题配置文件 <code>_config.yml</code> ,搜索关键字
<code>updated_at</code> 设置为 <code>true</code> ：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Post meta display settings</span><br><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at:</span><br><span class="line">    enable: true</span><br><span class="line">    another_day: true</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure>
<p><strong>最新版本的next默认打开了这个选项</strong></p>
<h1 id="修改内容区域的宽度">修改内容区域的宽度</h1>
<p>我们用Next主题是发现在电脑上阅读文章时内容两边留的空白较多，这样在浏览代码块时经常要滚动滚动条才能阅读完整，体验不是很好，下面提供修改内容区域的宽度的方法。
NexT 对于内容的宽度的设定如下：</p>
<ul>
<li>700px，当屏幕宽度 &lt; 1600px</li>
<li>900px，当屏幕宽度 &gt;= 1600px</li>
<li>移动设备下，宽度自适应</li>
</ul>
<p>如果你需要修改内容的宽度，同样需要编辑样式文件。
在Mist和Muse风格可以用下面的方法：</p>
<p>编辑主题的 <code>source/css/_variables/base.styl</code>
文件，新增变量：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 修改成你期望的宽度</span><br><span class="line">$content-desktop = 700px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure>
<p>当你使用Pisces风格时可以用下面的方法：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">header&#123; width: 90%; &#125;</span><br><span class="line">.container .main-inner &#123; width: 90%; &#125;</span><br><span class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</span><br></pre></td></tr></table></figure>
<h1 id="如何设置阅读全文">如何设置「阅读全文」？</h1>
<p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。
NexT 提供三种方式来控制文章在首页的显示方式。
也就是说，在首页显示文章的摘录并显示 <strong>阅读全文</strong>
按钮，可以通过以下方法：</p>
<ol type="1">
<li><p>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo
提供的方式 <strong>推荐</strong></p></li>
<li><p>在文章的 <a href="https://hexo.io/docs/front-matter.html">front-matter</a> 中添加
<code>description</code>，并提供文章摘录</p></li>
<li><p>自动形成摘要，在 <strong>主题配置文件</strong> 中添加：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="params">auto_excerpt:</span></span><br><span class="line">  <span class="params">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="params">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>
<p>默认截取的长度为 <code>150</code> 字符，可以根据需要自行设定</p></li>
</ol>
<p>建议使用
<code>&lt;!-- more --&gt;</code>（即第一种方式），除了可以精确控制需要显示的摘录内容以外，
这种方式也可以让 Hexo 中的插件更好的识别。</p>
<h1 id="页面">404 页面</h1>
<p>使用方法，新建 404.html 页面，放到主题的 <code>source</code>
目录下，内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/plain&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.qq.com/404/search_children.js&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;/&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">homePageName</span>=<span class="string">&quot;回到我的主页&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/data.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/page.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>本地测试没有效果，需要发布</p>
<h1 id="博客压缩">博客压缩</h1>
<ol type="1">
<li><p>gulp 压缩</p>
<blockquote>
<p>参考:</p>
<p>https://zhuanlan.zhihu.com/p/28447279</p>
<p>https://leaferx.online/2017/06/16/use-gulp-to-minimize/</p>
</blockquote></li>
<li><p><a href="https://github.com/chenzhutian/hexo-all-minifier">Hexo-all-minifier</a></p>
<blockquote>
<p>参考：<a href="https://blog.cython.top/hexo-opt1.html">Hexo博客优化之压缩加速</a></p>
</blockquote></li>
</ol>
<h1 id="代码框设置">代码框设置</h1>
<p>打开主题配置文件 <code>_config.yml</code> , 搜索关键字
<code>codeblock</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="string">default</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure>
<h1 id="pajx">PAJX</h1>
<p>该项功能的作用是：跳转到同网站另一个页面的时候，前后两个页面相同的元素不再重复加载，进而节省了加载的时间，加快访问速度。该项功能依赖官方提供的
<a href="https://github.com/theme-next/theme-next-pjax">PJAX
插件</a>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Easily enable fast Ajax navigation on your website.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pjax</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="图片加载">图片加载</h1>
<p>实现该功能的基础是在文章中<a href="https://guanqr.com/tech/website/hexo-theme-next-customization/#图片">插入图片</a>。该项功能的效果是：点击文中插图，图片能够放大，有幻灯片的效果。目前
NexT 提供了两款插件 fancybox 和
mediumzoom，两款插件开启一个即可。两款插件的效果不同，各有各的特点，我推荐使用
mediumzoom。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A JavaScript library for zooming images like Medium.</span></span><br><span class="line"><span class="comment"># Do not enable both `fancybox` and `mediumzoom`.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/francoischalifour/medium-zoom</span></span><br><span class="line"><span class="attr">mediumzoom:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>PS: 本地图片无法加载问题</p>
<p>reference:
https://blog.csdn.net/xjm850552586/article/details/84101345</p>
</blockquote>
<h1 id="段落标题添加锚点">段落标题添加锚点</h1>
<p>使用 NexT 官方制作的一个锚点插件：<a href="https://github.com/theme-next/hexo-theme-next-anchor">hexo-theme-next-anchor</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next-anchor --save</span><br></pre></td></tr></table></figure>
<p>在主题的配置文件 <code>_config.yml</code> 中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">anchor:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;#0e83cd&#x27;</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># If left, anchors will always be visible.</span></span><br><span class="line">  <span class="attr">margin:</span> <span class="string">7px</span> </span><br><span class="line">  <span class="attr">text:</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># If true, the `text` option will be ignored.</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> </span><br><span class="line">    <span class="comment"># By default, NexT has built-in FontAwesome support.</span></span><br><span class="line">    <span class="comment"># This option means `font-family: FontAwesome`, so DO Not change it.</span></span><br><span class="line">    <span class="comment"># Also you can choose ForkAwesome, but that&#x27;s another story.</span></span><br><span class="line">    <span class="attr">font:</span> <span class="string">FontAwesome</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">\f0c1</span> <span class="comment"># CSS content for FontAwesome &amp; ForkAwesome.</span></span><br></pre></td></tr></table></figure>
<h1 id="鼠标点击浮出爱心效果">鼠标点击浮出爱心效果</h1>
<blockquote>
<p>Reference：https://tding.top/archives/58cff12b.html</p>
</blockquote>
<p>在 <em>themes/next/source/js/</em>
目录下新建文件：<em>clicklove.js</em>，填入如下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params">e,t,a</span>)&#123;<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>)&#123;<span class="title function_">c</span>(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class="title function_">o</span>(),<span class="title function_">r</span>()&#125;<span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.<span class="property">length</span>;e++)d[e].<span class="property">alpha</span>&lt;=<span class="number">0</span>?(t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>),d.<span class="title function_">splice</span>(e,<span class="number">1</span>)):(d[e].<span class="property">y</span>--,d[e].<span class="property">scale</span>+=<span class="number">.004</span>,d[e].<span class="property">alpha</span>-=<span class="number">.013</span>,d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;left:&quot;</span>+d[e].<span class="property">x</span>+<span class="string">&quot;px;top:&quot;</span>+d[e].<span class="property">y</span>+<span class="string">&quot;px;opacity:&quot;</span>+d[e].<span class="property">alpha</span>+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;,&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].<span class="property">color</span>+<span class="string">&quot;;z-index:99999&quot;</span>);<span class="title function_">requestAnimationFrame</span>(r)&#125;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.<span class="property">onclick</span>&amp;&amp;e.<span class="property">onclick</span>;e.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;t&amp;&amp;<span class="title function_">t</span>(),<span class="title function_">i</span>(e)&#125;&#125;<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);a.<span class="property">className</span>=<span class="string">&quot;heart&quot;</span>,d.<span class="title function_">push</span>(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.<span class="property">clientX</span>-<span class="number">5</span>,<span class="attr">y</span>:e.<span class="property">clientY</span>-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="title function_">s</span>()&#125;),t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);a.<span class="property">type</span>=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))&#125;<span class="keyword">catch</span>(t)&#123;a.<span class="property">styleSheet</span>.<span class="property">cssText</span>=e&#125;t.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>)&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.<span class="property">requestAnimationFrame</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> e.<span class="property">requestAnimationFrame</span>||e.<span class="property">webkitRequestAnimationFrame</span>||e.<span class="property">mozRequestAnimationFrame</span>||e.<span class="property">oRequestAnimationFrame</span>||e.<span class="property">msRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),<span class="title function_">n</span>()&#125;(<span class="variable language_">window</span>,<span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>
<p>然后修改 */themes/next/layout/_layout.swig*，在末尾 body 中添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;/js/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727182411.png" alt="clicklove">
<figcaption aria-hidden="true">clicklove</figcaption>
</figure>
<h1 id="修改字体大小">修改字体大小</h1>
<blockquote>
<p>reference: https://theme-next.iissnan.com/faqs.html#custom-font</p>
</blockquote>
<p>在 next 主题配置文件 *_config.yml* 中启用
<em>variables.styl</em>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<p>在站点目录下的 *source/_data/* 文件夹下新建
<em>variables.styl</em>，填写如下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 标题，修改成你期望的字体族</span><br><span class="line">$<span class="attribute">font-family</span>-headings = Georgia, sans</span><br><span class="line"></span><br><span class="line">// 修改成你期望的字体族</span><br><span class="line">$<span class="attribute">font-family</span>-base = &quot;Microsoft YaHei&quot;, Verdana, sans-serif</span><br><span class="line"></span><br><span class="line">// 代码字体</span><br><span class="line">$<span class="selector-tag">code</span>-<span class="attribute">font-family</span> = &quot;<span class="selector-tag">Input</span> Mono&quot;, &quot;PT Mono&quot;, Consolas, Monaco, Menlo, monospace</span><br><span class="line"></span><br><span class="line">// 正文字体的大小</span><br><span class="line">$<span class="attribute">font-size</span>-base = <span class="number">16px</span></span><br><span class="line"></span><br><span class="line">// 代码字体的大小</span><br><span class="line">$<span class="selector-tag">code</span>-<span class="attribute">font-size</span> = <span class="number">13px</span></span><br></pre></td></tr></table></figure>
<h1 id="侧边栏社交链接设置">侧边栏社交链接设置</h1>
<blockquote>
<p>Ref：</p>
<p><a href="https://guanqr.com/tech/website/hexo-theme-next-customization/#contents:添加阿里图标支持">添加阿里图标支持</a></p>
</blockquote>
<h1 id="评论系统-valine">评论系统-Valine</h1>
<blockquote>
<p>Ref:</p>
<p><a href="https://blog.csdn.net/blue_zy/article/details/79071414">为你的Hexo加上评论系统-Valine</a></p>
<p><a href="https://blog.csdn.net/weixin_43405525/article/details/99228698?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.compare&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.compare">Valine评论系统</a></p>
<p><a href="https://qianfanguojin.github.io/2019/07/23/Hexo博客进阶：为Next主题添加Valine评论系统/">Hexo博客进阶：为Next主题添加Valine评论系统</a></p>
<p><a href="https://lovelijunyi.gitee.io/posts/e52c.html">Valine评论系统详解(匹配QQ头像)</a></p>
<p><a href="https://blog.hclonely.com/posts/409d3090/">Valine
添加验证码、博主标签及评论微信、QQ 通知 (最终使用 Valine.min.js)</a></p>
</blockquote>
<h1 id="评论邮件通知-valine-admin">评论邮件通知-<a href="https://github.com/DesertsP/Valine-Admin">Valine-Admin</a></h1>
<p>Valine Admin 是 <a href="https://deserts.io/diy-a-comment-system/">Valine
评论系统</a>的扩展和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。支持完全自定义的邮件通知模板。基于Akismet
API实现准确的垃圾评论过滤。此外，使用云函数等技术解决了免费版云引擎休眠问题，支持云引擎自动唤醒，漏发邮件自动补发。兼容云淡风轻及Deserts维护的多版本Valine。</p>
<p>增加了 <a href="https://sct.ftqq.com/">server酱</a> 微信提醒：<a href="https://github.com/Starrynightzyq/Valine-Admin-Server">Valine-Admin-Server</a></p>
<p>配置变量参考：https://www.antmoe.com/posts/2380732b/</p>
<blockquote>
<p>新版的 server酱 推荐使用企业微信应用来推送消息，可以参考：</p>
<p>https://shimo.im/docs/38dpjtwWtRRVQ6Wy/read</p>
</blockquote>
<h1 id="文章结语">文章结语</h1>
<blockquote>
<p>Ref:</p>
<p><a href="https://xian6ge.cn/posts/6d7ed114/#1-%E6%96%87%E7%AB%A0%E7%BB%93%E6%9D%9F%E5%A4%84%E6%B7%BB%E5%8A%A0%E6%84%9F%E8%B0%A2%E9%98%85%E8%AF%BB%E7%9A%84%E6%8F%90%E7%A4%BA">文章结束处添加感谢阅读的提示</a></p>
</blockquote>
<h1 id="数学公式">数学公式</h1>
<blockquote>
<p>Ref:</p>
<p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/MATH.md">next主题的文档</a>
<a href="https://roro4ever.github.io/2019/12/01/hexo-Next%E4%B8%BB%E9%A2%98%E6%B8%B2%E6%9F%93-latex-%E5%85%AC%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/hexo-next%E4%B8%BB%E9%A2%98%E6%B8%B2%E6%9F%93-latex-%E5%85%AC%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/">Hexo
Next主题渲染 Latex 公式的配置方法</a></p>
</blockquote>
<p>办法就是替换Hexo的渲染器，比如在博客目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-pandoc --save <span class="comment"># or hexo-renderer-kramed</span></span><br></pre></td></tr></table></figure>
<p><del>hexo-renderer-kramed 渲染器也有缺点，它不支持行内 latex
公式。解决办法是有的，要么在行内自己加上转义符号，要么修改渲染规则。渲染器作者建议是用`把公式标注成代码块，参见<a href="https://duskcloudxu.github.io/2018/07/14/hexo-renderer-kramed与mathJax的兼容问题及解决方法/">此处</a>。</del></p>
<p>hexo-renderer-pandoc 支持行内数学公式，不用转义。</p>
<hr>
<p>行内数学公式（样式）：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">`<span class="built_in">$</span>f(x) = x<span class="built_in">^</span>&#123;2/3&#125;+e/3*(<span class="keyword">\pi</span>-x<span class="built_in">^</span>2)<span class="built_in">^</span>&#123;1/2&#125;*sin(a*<span class="keyword">\pi</span>*x)<span class="built_in">$</span>`</span><br></pre></td></tr></table></figure>
<p>行内数学公式（测试）：<code>$f(x) = x^&#123;2/3&#125;+e/3*(\pi-x^2)^&#123;1/2&#125;*sin(a*\pi*x)$</code></p>
<hr>
<p>行间数学公式（样式）：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">f(x) = x<span class="built_in">^</span>&#123;2/3&#125;+e/3*(<span class="keyword">\pi</span>-x<span class="built_in">^</span>2)<span class="built_in">^</span>&#123;1/2&#125;*sin(a*<span class="keyword">\pi</span>*x)</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>行内数学公式（测试）： <span class="math display">\[
f(x) = x^{2/3}+e/3*(\pi-x^2)^{1/2}*sin(a*\pi*x)
\]</span> <del>PS: 行内数学公式使用时需要用 ` 转义。</del></p>
<h1 id="自定义-404-页面">自定义 404 页面</h1>
<p>自定义含有小游戏的404页面</p>
<blockquote>
<p>https://chennq.com/Hexo/20190922-hexo_next_404page.html</p>
<p>https://www.jianshu.com/p/1b819734538f</p>
</blockquote>
<p>NGINX 404 配置</p>
<blockquote>
<p>https://leyar.me/create-404-page/</p>
<p>https://zhuanlan.zhihu.com/p/269456060</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
        <tag>hexo</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>VCO 中电感的选取及仿真</title>
    <url>/2021/05/08/inductor/</url>
    <content><![CDATA[<p>本次设计使用的是 TSMC65
工艺，使用的电感是工艺库中提供的中心抽头差分电感，因此可以使用 TIF (TSMC
Inductor Finder) 功能来找到合适的电感。TIF
的使用可以参考工艺库中的文档：<code>TIF_User_Guide.pdf</code>、<code>TIF_tutorial.pdf</code>。</p>
<p>这里使用的电感参数如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727182509.png" alt="ind" style="zoom:50%;"></p>
<p>根据 TIF 的结果，其电感值在 2.4GHz 的频率下为 3.9 nH，我们可以使用 S
参数仿真来看一下电感的 L-Q 曲线。</p>
<p>仿真的电路图如下（方法来自 <a href="http://bbs.eetop.cn/forum.php?mod=redirect&amp;goto=findpost&amp;ptid=292661&amp;pid=6034926">eetop-depend135</a>）：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727182450.png" alt="schematic">
<figcaption aria-hidden="true">schematic</figcaption>
</figure>
<p>SP 仿真的设置如下：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727182451.png" alt="sp">
<figcaption aria-hidden="true">sp</figcaption>
</figure>
<p>这里注意频率的扫描范围不要从 0 开始，不然后面计算电感值时会出现除以 0
的现象，导致无法计算出电感值。</p>
<p>电感的 L 和 Q 计算公式分别为： <span class="math display">\[
L= imag(1/Y11)/(2*\pi * freq)
\]</span></p>
<p><span class="math display">\[
Q = -imag(Y11)/real(Y11)
\]</span></p>
<p>cadence ADE 中没有提供一个方便的获取扫描频率的函数，参考 <a href="http://bbs.eetop.cn/forum.php?mod=redirect&amp;goto=findpost&amp;ptid=702628&amp;pid=9612242">eetop-ctlvip</a>
的方法，使用 xval 来获取 freq，具体的公式如下： <span class="math display">\[
L=\rm{(imag((1 / ypm(&#39;sp 1 1))) / (2 * pi * xval(imag(ypm(&#39;sp 1
1)))))}
\]</span></p>
<p><span class="math display">\[
Q = \rm{((- imag(ypm(&#39;sp 1 1))) / real(ypm(&#39;sp 1 1)))}
\]</span></p>
<p>运行仿真，得到 L-Q 曲线如下图所示：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727182452.svg" alt="L-Q">
<figcaption aria-hidden="true">L-Q</figcaption>
</figure>
<p>这个曲线和 TIF 的结果是一致的。</p>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员（假）的浪漫</title>
    <url>/2020/08/25/love/</url>
    <content><![CDATA[<p><img src="https://pic.zhouyuqian.com/img/20210727183151.jpg" alt="love" style="zoom:40%;"></p>
<span id="more"></span>
<blockquote>
<p>灵感来自：https://mp.weixin.qq.com/s/ZozqC8chJPQP84gcpju4mQ</p>
</blockquote>
<p>原作者用 MATLAB 和 Verilog 实现了心形图案，由于手上电脑没有装可以运行
MATLAB 或者 Verilog 的软件，因此我用 Python
写了一个，最重要的是这个公式：<code>$f(x) = x^&#123;2/3&#125;+e/3*(\pi-x^2)^&#123;1/2&#125;*sin(a*\pi*x)$</code>，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">love_line</span>(<span class="params">x, a, w</span>):</span><br><span class="line">    y = np.power(np.<span class="built_in">abs</span>(x), <span class="number">2</span>/<span class="number">3</span>) + np.exp(<span class="number">1</span>)/<span class="number">3</span> * np.sqrt(np.pi - np.square(x)) * np.sin(a*np.pi*x)</span><br><span class="line">    <span class="keyword">return</span> w*y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># draw multiple pictures</span></span><br><span class="line">    x = np.arange(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">0.01</span>)</span><br><span class="line">    num_start = <span class="number">1</span></span><br><span class="line">    num_end = <span class="number">20</span></span><br><span class="line">    loop = np.arange(num_start,num_end,<span class="number">1</span>)</span><br><span class="line">    loop = np.hstack((loop,[num_end],loop[::-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ims = []</span><br><span class="line"></span><br><span class="line">    plt.title(<span class="string">r&quot;$f(x) = x^&#123;2/3&#125;+e/3*(\pi-x^2)^&#123;1/2&#125;*sin(a*\pi*x)$&quot;</span>)</span><br><span class="line">    plt.axis([-<span class="number">2</span>, <span class="number">2</span>, -<span class="number">1.5</span>, <span class="number">2.5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> loop:</span><br><span class="line">        y = love_line(x, i, <span class="number">1.0</span>)</span><br><span class="line">        im = plt.plot(x, y, color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">        ims.append(im)</span><br><span class="line"></span><br><span class="line">    ani = animation.ArtistAnimation(fig, ims, interval=<span class="number">200</span>)</span><br><span class="line">    ani.save(<span class="string">&quot;love.gif&quot;</span>, writer=<span class="string">&#x27;pillow&#x27;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># draw single picture</span></span><br><span class="line">    x = np.arange(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">0.01</span>)</span><br><span class="line">    y = love_line(x, <span class="number">10</span>, <span class="number">1.0</span>)</span><br><span class="line">    plt.clf</span><br><span class="line">    plt.plot(x, y, color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">    plt.axis([-<span class="number">2</span>, <span class="number">2</span>, -<span class="number">1.5</span>, <span class="number">2.5</span>])</span><br><span class="line">    plt.title(<span class="string">r&quot;$f(x) = x^&#123;2/3&#125;+e/3*(\pi-x^2)^&#123;1/2&#125;*sin(a*\pi*x),\ a = 10$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&#x27;./love.jpg&#x27;</span>, dpi=<span class="number">300</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    plt.close()</span><br></pre></td></tr></table></figure>
<p><strong>GIF版：</strong></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183202.gif" alt="love">
<figcaption aria-hidden="true">love</figcaption>
</figure>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一个博客</title>
    <url>/2018/01/13/my-first-blog/</url>
    <content><![CDATA[<p>期末考终于结束了，终于可以愉快地学习了，很久之前就想搭建一个博客，记录自己的学习过程，对比了几种方案，Hexo+GitHub最简单（最重要是免费），于是试了一下。</p>
<span id="more"></span>
<p>参考了如下几个网站：</p>
<h2 id="建站">1. 建站</h2>
<blockquote>
<p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa">好记的博客</a>
<a href="http://www.lovebxm.com/2017/05/30/buildBlog/">可能是最详细的
Hexo + GitHub Pages 搭建博客的教程</a> <a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo
搭建个人网站详细教程</a></p>
</blockquote>
<h2 id="优化">2. 优化</h2>
<blockquote>
<p><a href="http://blog.junyu.io/posts/0005-next-theme-settings.html#sociallinksandicons">浚宇的博客</a></p>
<p><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html">reuixiy</a></p>
<p><a href="https://www.jianshu.com/p/30bf702f533c">Next主题个性化之自动更换背景图片</a></p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>n2n 安装及使用</title>
    <url>/2022/07/16/n2n/</url>
    <content><![CDATA[<h1 id="n2n-介绍">N2N 介绍</h1>
<h2 id="n2n-的一些相关概念">N2N 的一些相关概念</h2>
<p>N2N
官方对里面的角色有一些定义，在开始部署前，了解这些定义，能够帮助你快速理解这个软件的使用。</p>
<ol type="1">
<li><p>SuperNode 超级节点</p>
<p>SuperNode 相当与注册中心,
它会记录边缘节点的连接信息，告诉各个边缘节点如何去找到其它的边缘节点。如果超级节点发生故障，那么边缘节点之间将不能正常的进行通信。在整个N2N网络中必须至少拥有一个SuperNode。</p></li>
<li><p>Edge 边缘节点</p>
<p>边缘节点是指所有通过 SuperNode
组网而成的节点，无论你处于哪个位置哪种网络环境下，edge节点之间都能进行通信。
一台计算机可以拥有多个edge,
局域网根据子网掩码来决定两台机器是否处于同一个网段，而edge需要添加一组账号密码，在N2N
里面称作 GroupName 和 password ，Group0 和 Group 1 里面的 10.0.0.1
是不一样的。</p></li>
</ol>
<h2 id="项目地址">项目地址</h2>
<p><strong>目前最常用的版本</strong>，也是官方N2N项目重启后，在各路大神的贡献下，一直在维护并不断完善的版本</p>
<p>项目：https://github.com/ntop/n2n</p>
<h1 id="安装-3.0-stable">安装 (3.0-stable)</h1>
<h2 id="ubuntu">Ubuntu</h2>
<ol type="1">
<li><p>安装编译工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install cmake libssl-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install build-essential</span><br></pre></td></tr></table></figure></li>
<li><p>编译、安装 N2N</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ntop/n2n.git</span><br><span class="line"><span class="built_in">cd</span> n2n</span><br><span class="line">git checkout 3.0-stable</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="openwrt">OpenWrt</h2>
<p>在github找到一个别人编译好的</p>
<p>https://github.com/csrutil/n2n</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/csrutil/n2n/releases/download/3.0.0/n2n-edge_3.0.0-1_aarch64_generic.ipk</span><br><span class="line">opkg install ./n2n-edge_3.0.0-1_aarch64_generic.ipk</span><br></pre></td></tr></table></figure>
<h2 id="mac-macos-big-sur-11.6.6">Mac (macOS Big Sur 11.6.6)</h2>
<p>安装必要的软件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/cask</span><br><span class="line">brew install tuntap --cask</span><br><span class="line">brew install openssl</span><br><span class="line">brew install cmake</span><br></pre></td></tr></table></figure>
<p>下载 n2n 的源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ntop/n2n.git</span><br><span class="line">git checkout 3.0-stable</span><br></pre></td></tr></table></figure>
<p>编译&amp;安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> n2n</span><br><span class="line"><span class="built_in">mkdir</span> -p build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 <code>make install</code> 的过程中遇到如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CMake Error at cmake_install.cmake:79 (file):</span><br><span class="line">  file INSTALL cannot copy file</span><br><span class="line">  <span class="string">&quot;/Users/zhouyuqian/MyDocuments/my_scripts/n2n/build/doc/edge.8.gz&quot;</span> to</span><br><span class="line">  <span class="string">&quot;/usr/share/man/man8/edge.8.gz&quot;</span>: Read-only file system.</span><br></pre></td></tr></table></figure>
<p>需要手动将 <code>cmake_install.cmake</code> 文件中的
<code>/usr/share/</code>替换为 <code>/usr/local/share/</code></p>
</blockquote>
<h1 id="使用网对网">使用（网对网）</h1>
<h2 id="supernode">SuperNode</h2>
<ol type="1">
<li><p>编辑配置文件 <code>/etc/n2n/supernode.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-p=1234</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-p=1234 是supernode的服务端口，防火墙中要放行该端口的tcp和upd</p>
</blockquote></li>
<li><p>编辑systemctl的启动文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /lib/systemd/system/edge.service</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=n2n supernode process</span><br><span class="line">After=network-online.target syslog.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/sbin/supernode /etc/n2n/supernode.conf -f</span><br><span class="line">Restart=on-abnormal</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=</span><br></pre></td></tr></table></figure></li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> supernode</span><br><span class="line"><span class="built_in">sudo</span> systemctl start supernode</span><br></pre></td></tr></table></figure>
<p>or（测试时使用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> supernode /etc/n2n/supernode.conf -v -f</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="edge">Edge</h2>
<ol type="1">
<li><p>n2n的虚拟网卡必须指定IP</p></li>
<li><p>路由器的局域网网段必须不一样，比如A路由器192.168.31.0/24，B路由器192.168.12.0/24</p></li>
<li><p>必须把n2n的虚拟网卡添加进防火墙n2n（网络&gt;&gt;&gt;接口，添加新接口，不配置协议，防火墙区域指定n2n）</p></li>
<li><p>新建防火墙规则：</p></li>
</ol>
<h3 id="openwrt路由器a-所在局域网192.168.31.024">openwrt路由器A
(所在局域网192.168.31.0/24)</h3>
<p>Edit <code>/etc/n2n/edge.conf</code> and add the following</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-d=n2n0</span><br><span class="line">-c=n2n_net0</span><br><span class="line">-k=&lt;encryption key&gt;</span><br><span class="line">-a=10.10.10.3/24</span><br><span class="line">-p=53001</span><br><span class="line">-l=&lt;super node ip&gt;:&lt;port&gt;</span><br><span class="line">-r</span><br><span class="line">-n=192.168.12.0/24:10.10.10.2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-d: TAP device name (网卡名)</p>
<p>-c: n2n community name the edge belongs to</p>
<p>-k: encryption key (ASCII)</p>
<p>-a: 设置此N2N网络中，本机的IP地址</p>
<p>-p: fixed local UDP port and optionally bind to the</p>
<p>-l: supernode ip address or name, and port</p>
</blockquote>
<p>启动n2n</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">edge /etc/n2n/edge.conf -f</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/edge <span class="built_in">enable</span></span><br><span class="line">/etc/init.d/edge start</span><br></pre></td></tr></table></figure>
<h3 id="openwrt路由器b-所在局域网192.168.12.024">openwrt路由器B
(所在局域网192.168.12.0/24)</h3>
<p>Edit <code>/etc/n2n/supernode.conf</code> and add the following</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-d=n2n0</span><br><span class="line">-c=n2n_net0</span><br><span class="line">-k=&lt;encryption key&gt;</span><br><span class="line">-a=10.10.10.2/24</span><br><span class="line">-p=53001</span><br><span class="line">-l=&lt;super node ip&gt;:&lt;port&gt;</span><br><span class="line">-r</span><br><span class="line">-n=192.168.31.0/24:10.10.10.3</span><br></pre></td></tr></table></figure>
<h3 id="mac">Mac</h3>
<p>创建conf文件 <code>/etc/n2n/edge.conf</code>，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-c=n2n_net0</span><br><span class="line">-k=&lt;encryption key&gt;</span><br><span class="line">-a=10.10.10.4/24</span><br><span class="line">-p=53001</span><br><span class="line">-l=&lt;super node ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure>
<p>启动 n2n</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> edge /etc/n2n/edge.conf</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">sudo</span> edge /etc/n2n/edge.conf -f </span><br></pre></td></tr></table></figure>
<p>创建启动脚本 <code>n2nup.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">DelRoute</span></span>()&#123;</span><br><span class="line">    <span class="built_in">sudo</span> route delete 10.10.10.0/24</span><br><span class="line">    <span class="built_in">sudo</span> route delete 192.168.12.0/24</span><br><span class="line">    <span class="built_in">sudo</span> route delete 192.168.31.0/24</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">SetRoute</span></span>()&#123;</span><br><span class="line">    <span class="built_in">sudo</span> route -n add -net 192.168.12.0 -netmask 255.255.255.0 10.10.10.2</span><br><span class="line">    <span class="comment"># sudo route -n add -net 192.168.31.0 -netmask 255.255.255.0 10.10.10.3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">CheckStatus</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [ `grep -c <span class="string">&quot;OK&quot;</span> <span class="string">&quot;/var/log/n2n/edge.log&quot;</span>` -ne <span class="string">&#x27;0&#x27;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;wait for connection&quot;</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DelRoute</span><br><span class="line"><span class="built_in">sudo</span> edge /etc/n2n/edge.conf -f &gt; /var/log/n2n/edge.log  2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    CheckStatus</span><br><span class="line">    <span class="keyword">if</span> [ $? == <span class="string">&#x27;0&#x27;</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">sleep</span> 2</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">SetRoute</span><br></pre></td></tr></table></figure>
<p>创建停止脚本 <code>n2ndown.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sudo</span> route delete 10.10.10.0/24</span><br><span class="line"><span class="built_in">sudo</span> route -v delete -net 192.168.12.0 -gateway 10.10.10.2</span><br><span class="line"><span class="built_in">sudo</span> route -v delete -net 192.168.31.0 -gateway 10.10.10.3</span><br><span class="line">ps -A | grep n2n | grep -v grep | grep -v n2ndown | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -n 1 <span class="built_in">sudo</span> <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure>
<h3 id="ubuntu-1">Ubuntu</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /lib/systemd/system/edge.service.</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=n2n edge process</span><br><span class="line">After=network-online.target syslog.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/sbin/edge /etc/n2n/edge.conf -f</span><br><span class="line">Restart=on-abnormal</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=edge.service</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>Geek</tag>
        <tag>n2n</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 反向代理</title>
    <url>/2021/07/24/nginx/</url>
    <content><![CDATA[<h1 id="nginx-配置文件位置">Nginx 配置文件位置</h1>
<p>Nginx 的配置文件默认在
<code>/usr/local/nginx/conf/nginx.conf</code>，打开这个文件，可以看到：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Virtual Host Configs</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /usr/local/nginx/conf/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">include</span> /usr/local/nginx/conf/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这表明默认情况下 nginx 会自动包含
<code>/usr/local/nginx/conf/conf.d/*.conf</code> 和
<code>/usr/local/nginx/conf/sites-enabled/*</code>。</p>
<p>默认情况下，在 <code>/usr/local/nginx/conf/sites-enabled/</code>
下有一个默认站点，这个站点也就是 nginx 安装之后的默认站点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/nginx/conf/sites-enabled/sites-enabled</span><br><span class="line">$ <span class="built_in">ls</span> -l</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 34 Oct  6 02:19 default -&gt; /usr/local/nginx/conf/sites-enabled/sites-available/default</span><br></pre></td></tr></table></figure>
<p>打开 <code>/usr/local/nginx/conf/sites-enabled/default</code>
可以看到如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name _;</span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>按照这个文档的建议：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">In most cases, administrators will remove this <span class="built_in">file</span> <span class="keyword">from</span> sites-enabled/ <span class="keyword">and</span> leave <span class="keyword">it</span> <span class="keyword">as</span> <span class="keyword">reference</span> inside <span class="keyword">of</span> sites-available <span class="keyword">where</span> <span class="keyword">it</span> will <span class="keyword">continue</span> <span class="keyword">to</span> be updated <span class="keyword">by</span> <span class="keyword">the</span> nginx packaging team.</span><br></pre></td></tr></table></figure>
<p>最好是在
<code>/usr/local/nginx/conf/sites-enabled/sites-available/</code>
下建立站点的配置文件，这些站点就是所谓的"可用站点"。然后在 link 到
<code>/usr/local/nginx/conf/sites-enabled/sites-enabled</code>
下开启站点，这些开启的站点就是所谓"启用站点"。</p>
<p>通过建立链接来控制可用站点的启用。</p>
<h1 id="虚拟主机">虚拟主机</h1>
<h1 id="反向代理">反向代理</h1>
<p>在实际使用中，由于web服务器启动于不同进程，因此需要指定不同的端口，也就意味着必然有web应用要使用80之外的端口，这样在地址栏中就必须出现端口号，非常影响用户体验。</p>
<p>比较好的方式，通过使用不同的域名或者二级域名，然后通过nginx反向代理的方式转发请求给到实际负责处理的服务器。</p>
<h2 id="创建虚拟主机-frp.zhouyuqian.com">创建虚拟主机
frp.zhouyuqian.com</h2>
<p>目标：<a href="http://frp.zhouyuqian.com/">http://frp.zhouyuqian.com</a>
应该指向当前机器上运行于 7500 端口的 frps 服务。</p>
<p>在 <code>/usr/local/nginx/conf/sites-enabled/sites-available/</code>
下新建 <code>frp.zhouyuqian.com</code> 文件，内容如下：</p>
<blockquote>
<p>http</p>
</blockquote>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    server_name frp.zhouyuqian.com;</span><br><span class="line"></span><br><span class="line">    location /</span><br><span class="line">    &#123;</span><br><span class="line">        proxy_pass <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7500</span><span class="comment">; # 转发规则</span></span><br><span class="line">        proxy_set_header Host <span class="variable">$proxy_host</span><span class="comment">; # 修改转发请求头，让8080端口的应用可以受到真实的请求</span></span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_pass_header Server;</span><br><span class="line">        proxy_connect_timeout <span class="number">3</span>s;</span><br><span class="line">        proxy_read_timeout <span class="number">10</span>s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>https</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> frp.zhouyuqian.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /usr/local/nginx/conf/cert/1_frp.zhouyuqian.com_bundle.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /usr/local/nginx/conf/cert/2_frp.zhouyuqian.com.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># ssl_dhparam /etc/ssl/certs/dhparam.pem;</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">&#x27;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&#x27;</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">50m</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security max-age=<span class="number">15768000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:7500/; <span class="comment"># 转发规则</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$proxy_host</span>; <span class="comment"># 修改转发请求头，让8080端口的应用可以受到真实的请求</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass_header</span> Server;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">3s</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">10s</span>;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> *:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> frp.zhouyuqian.com;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://frp.zhouyuqian.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将 <code>frp.zhouyuqian.com</code> 站点文件链接到
<code>/usr/local/nginx/conf/sites-enabled/sites-enabled/</code>
目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/local/nginx/conf/sites-enabled/sites-available/frp.zhouyuqian.com /usr/local/nginx/conf/sites-enabled/sites-enabled/frp.zhouyuqian.com</span><br></pre></td></tr></table></figure>
<p>修改完成之后，使用命令检测配置修改结果并重新装载配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nginx -t</span><br><span class="line"><span class="built_in">sudo</span> nginx -s reload</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="加-与不加">加 <code>/</code> 与不加 <code>/</code></h2>
<p>在配置proxy_pass代理转发时，如果后面的url加
<code>/</code>，表示绝对根路径；如果没有
<code>/</code>，表示相对路径</p>
<p>例如</p>
<ol type="1">
<li>加 <code>/</code></li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">server_name shaochenfeng.com</span><br><span class="line">location /data/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问 <a href="https://link.zhihu.com/?target=http%3A//shaochenfeng.com/data/index.html">http://shaochenfeng.com/data/index.html</a>
会转发到 http://127.0.0.1/index.html</p>
<ol start="2" type="1">
<li>不加 <code>/</code></li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">server_name shaochenfeng.com</span><br><span class="line">location /data/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问 <a href="https://link.zhihu.com/?target=http%3A//shaochenfeng.com/data/index.html">http://shaochenfeng.com/data/index.html</a>
会转发到 <a href="https://link.zhihu.com/?target=http%3A//127.0.0.1/data/index.html">http://127.0.0.1/data/index.html</a></p>
</blockquote>
<h2 id="wss">WSS</h2>
<p>在 nodered 的服务中用到了 wss 服务，如果 nginx 代理没有启用
wss，就会一直出现
“<strong>丢失与服务器的连接，重新连接...</strong>”。</p>
<p>WSS表示WebSocket + Https，通俗点说，就是安全的WebSocket。</p>
<p>支持WSS请求核心 (加在 <code>server</code> - <code>location</code>
中)</p>
<pre><code>proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection &quot;Upgrade&quot;;
proxy_set_header Remote_addr $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code></pre>
<h1 id="reference">Reference</h1>
<p>[1]
https://skyao.gitbooks.io/learning-nginx/content/configure/reverse/action_no_port.html</p>
<p>[2] https://www.bioinfo-scrounger.com/archives/Nginx_configure/</p>
<p>[3] https://www.cnblogs.com/binghe001/p/14752404.html</p>
<p>[4] https://blog.csdn.net/qq_40650378/article/details/119676781</p>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
        <tag>hexo</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>FPGA 实现任意奇数分频</title>
    <url>/2020/10/06/odd-divider/</url>
    <content><![CDATA[<p>在做 FPGA 设计时，需要不同频率的时钟，通常会使用 Xilinx 提供 MMCM/PLL
时钟 IP 分频或者倍频得到。偶数分频很简单，只需要用一个以 分频数/2
为最大值的计数器控制输出时钟翻转即可。但奇数分频不能用这种方法来实现，以
3 分频为例，其每个周期的高电平时间占原始时钟的 1.5
个周期，计数器无法计数 0.5 个时钟周期。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183456.svg" alt="wavedrom">
<figcaption aria-hidden="true">wavedrom</figcaption>
</figure>
<span id="more"></span>
<p>但是换个角度来看，3 分频的波形其高电平占了 3 个 <span class="math inline">\(\frac{1}{2}\)</span>
的时钟周期，是否可以设计一种触发器，让其在时钟的上升沿和下降沿都触发，这样的计数器就可以计数半个时钟周期了。不过在
FPGA
中，这种触发器是不存在的，不过可以用一个上升沿触发的触发器和一个下降沿触发的触发器组合来达到这样的效果。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183457.svg" alt="div3">
<figcaption aria-hidden="true">div3</figcaption>
</figure>
<p>如上图所示，两个脉冲 <code>clk_div_p</code> 和 <code>clk_div_n</code>
分别在时钟的上升沿和下降沿变化，都是高电平占两个时钟周期，低电平占一个时钟周期，将两者做<strong>与</strong>运算，就得到了
3 分频时钟信号。</p>
<p>同样的，可以推断出 5 分频的时序图：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183458.svg" alt="div5">
<figcaption aria-hidden="true">div5</figcaption>
</figure>
<p>高电平时间占 3 个时钟周期，低电平时间占 2 个时钟周期。</p>
<p>为此，可以推断出，在这种结构下，任意奇数分频数 <span class="math inline">\(N(N \geq 3)\)</span>，则
<code>clk_div_[p/n]</code> 高电平时间为 <span class="math inline">\(N/2
+ 0.5\)</span>，低电平时间为 <span class="math inline">\(N/2-0.5\)</span>。</p>
<hr>
<p>代码如下：</p>
<p><strong>divider.v</strong></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> divider #(</span><br><span class="line">    <span class="keyword">parameter</span> DIV_P = <span class="number">2</span></span><br><span class="line">    )(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">output</span> clk_div);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parameter</span> DIV_N = DIV_P-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">parameter</span> DIV_W = <span class="built_in">$clog2</span>(DIV_P);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [DIV_W-<span class="number">1</span>:<span class="number">0</span>] counter_p;</span><br><span class="line">    <span class="keyword">reg</span> [DIV_W-<span class="number">1</span>:<span class="number">0</span>] counter_n;</span><br><span class="line">    <span class="keyword">reg</span> clk_div_p;</span><br><span class="line">    <span class="keyword">reg</span> clk_div_n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">            counter_p &lt;= <span class="number">&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (clk_div_p) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (counter_p == DIV_P-<span class="number">1</span>) <span class="keyword">begin</span>  </span><br><span class="line">                counter_p &lt;= <span class="number">&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                counter_p &lt;= counter_p + <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (counter_p == DIV_N-<span class="number">1</span>) <span class="keyword">begin</span>  </span><br><span class="line">                counter_p &lt;= <span class="number">&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                counter_p &lt;= counter_p + <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">negedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">            counter_n &lt;= <span class="number">&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (clk_div_n) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (counter_n == DIV_P-<span class="number">1</span>) <span class="keyword">begin</span>  </span><br><span class="line">                counter_n &lt;= <span class="number">&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                counter_n &lt;= counter_n + <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (counter_n == DIV_N-<span class="number">1</span>) <span class="keyword">begin</span>  </span><br><span class="line">                counter_n &lt;= <span class="number">&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                counter_n &lt;= counter_n + <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">            clk_div_p &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (clk_div_p) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (counter_p == DIV_P-<span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">                clk_div_p &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (counter_p == DIV_N-<span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">                clk_div_p &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">negedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">            clk_div_n &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (clk_div_n) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (counter_n == DIV_P-<span class="number">1</span>) <span class="keyword">begin</span>  </span><br><span class="line">                clk_div_n &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (counter_n == DIV_N-<span class="number">1</span>) <span class="keyword">begin</span>  </span><br><span class="line">                clk_div_n &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> clk_div = clk_div_p &amp;&amp; clk_div_n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p><strong>tb_divider.sv</strong></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ps</span></span><br><span class="line"><span class="meta">`<span class="keyword">include</span> &quot;divider.v&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_divider ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">logic</span> rst_n;</span><br><span class="line">    <span class="keyword">logic</span> srst;</span><br><span class="line">    <span class="keyword">logic</span> clk;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clock</span></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        clk = &#x27;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">forever</span> <span class="variable">#(0.5)</span> clk = ~clk;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// reset</span></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        rst_n &lt;= &#x27;<span class="number">0</span>;</span><br><span class="line">        srst &lt;= &#x27;<span class="number">0</span>;</span><br><span class="line">        #<span class="number">20</span></span><br><span class="line">        rst_n &lt;= &#x27;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">repeat</span> (<span class="number">5</span>) @(<span class="keyword">posedge</span> clk);</span><br><span class="line">        srst &lt;= &#x27;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">repeat</span> (<span class="number">1</span>) @(<span class="keyword">posedge</span> clk);</span><br><span class="line">        srst &lt;= &#x27;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// (*NOTE*) replace reset, clock, others</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">parameter</span> DIV_P   = <span class="number">3</span>; <span class="comment">// (奇数分频数)/2 + 0.5, 5 分频则 3, (&gt;= 2)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">logic</span>  clk_div;</span><br><span class="line"></span><br><span class="line">    divider #(</span><br><span class="line">        <span class="variable">.DIV_P</span>(DIV_P)</span><br><span class="line">    )</span><br><span class="line">    inst_divider (</span><br><span class="line">        <span class="variable">.clk</span>(clk), </span><br><span class="line">        <span class="variable">.rst_n</span>(rst_n), </span><br><span class="line">        <span class="variable">.clk_div</span>(clk_div));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">repeat</span>(<span class="number">100</span>)@(<span class="keyword">posedge</span> clk);</span><br><span class="line">        <span class="built_in">$finish</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// dump wave</span></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="built_in">$dumpfile</span>(<span class="string">&quot;tb_divider.vcd&quot;</span>);</span><br><span class="line">        <span class="built_in">$dumpvars</span>(<span class="number">0</span>, tb_divider);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p><strong>5 分频仿真结果</strong></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727183459.png" alt="tb_div5">
<figcaption aria-hidden="true">tb_div5</figcaption>
</figure>
<blockquote>
<p>Reference:</p>
<p><a href="https://blog.csdn.net/lt66ds/article/details/10035187">FPGA三分频,五分频,奇数分频</a></p>
<p><a href="https://www.cnblogs.com/xiaoxie2014/p/4135078.html">基于Verilog的偶数、奇数、半整数分频以及任意分频器设计</a></p>
</blockquote>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>DSP</tag>
      </tags>
  </entry>
  <entry>
    <title>用Wireshark对整个局域网进行抓包</title>
    <url>/2024/12/19/openwrt-wrieshark/</url>
    <content><![CDATA[<h1 id="背景">背景</h1>
<p>如果需要对局域网中两个设备之间的通讯进行抓包调试，一种比较方便的方式就是在路由器上通过
tcpdump 抓包，然后传回电脑上，利用 Wireshark 查看抓包内容。</p>
<pre class="mermaid">block-beta
columns 1
  dp("tcpdump")
  space
  D["bar-lan"]
  space
  block
    A
    B
    C["Wireshark"]
  end
  A --> D
  C --> D
  B --> D
  D --> dp
  dp --> C
  style C fill:#969,stroke:#333,stroke-width:4px</pre>
<h1 id="准备">准备</h1>
<ol type="1">
<li><p>PC上安装 Wireshark</p>
<p>安装的时候需要勾选 “Sshdump and Ciscodump”</p></li>
<li><p>路由器上安装 tcpdump</p></li>
</ol>
<h1 id="抓包">抓包</h1>
<ol type="1">
<li>打开 Wireshark，选择捕获——选项；</li>
<li>选择 SSH remote capture，点击开始；</li>
<li>输入路由器的ip地址和ssh端口号（默认22）；</li>
<li>输入路由器用户名和密码/密钥；</li>
</ol>
<h1 id="reference">Reference</h1>
<ul>
<li><a href="https://jayant-tang.github.io/jayant97.github.io/2022/12/dad29a5a49fd/index.html">利用Wireshark和tcpdump对整个局域网进行实时抓包</a></li>
</ul>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
        <tag>Wireshark</tag>
        <tag>Ethernet</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxmox VE 安装</title>
    <url>/2021/08/28/pve/</url>
    <content><![CDATA[<h1 id="whats-proxmox-ve">What's Proxmox VE</h1>
<p><strong>Proxmox Virtual Environment</strong> is an open source server
virtualization management solution based on QEMU/KVM and LXC. You can
manage virtual machines, containers, highly available clusters, storage
and networks with an integrated, easy-to-use web interface or via CLI.
Proxmox VE code is licensed under the GNU Affero General Public License,
version 3. The project is developed and maintained by <a href="https://www.proxmox.com/">Proxmox Server Solutions GmbH</a>.</p>
<span id="more"></span>
<h1 id="安装">安装</h1>
<blockquote>
<p>Ref:</p>
<p>https://zhuanlan.zhihu.com/p/62084071</p>
<p>https://einverne.github.io/post/2020/03/proxmox-install-and-setup.html</p>
</blockquote>
<h1 id="安装-win10">安装 win10</h1>
<blockquote>
<p>Ref:</p>
<p>https://zhuanlan.zhihu.com/p/62492187</p>
</blockquote>
<h2 id="显卡直通">显卡直通</h2>
<blockquote>
<p>Ref：<a href="https://www.simaek.com/archives/69/">PVE下安装Windows10并直通核显、键盘鼠标、声卡等设备详细步骤</a></p>
</blockquote>
<h1 id="安装-linux">安装 linux</h1>
<blockquote>
<p>Ref:</p>
<p>https://post.smzdm.com/p/a78egn7o/</p>
<p><a href="p3terx.com/archives/docker-aria2-pro.html">server</a></p>
</blockquote>
<h2 id="ubuntu--vg-ubuntu--lv-磁盘扩容">ubuntu--vg-ubuntu--lv
磁盘扩容</h2>
<blockquote>
<p>Ref:
https://serverfault.com/questions/953174/how-do-i-expand-the-roots-volume-size</p>
</blockquote>
<p>First, you can use <code>lvextend</code> to extend the size of the
logical volume, to fill up the remaining space:</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">sudo lvextend</span> <span class="literal">--</span><span class="comment">extents</span> <span class="literal">+</span><span class="comment">100%FREE /dev/mapper/ubuntu</span><span class="literal">--</span><span class="comment">vg</span><span class="literal">-</span><span class="comment">ubuntu</span><span class="literal">--</span><span class="comment">lv</span></span><br></pre></td></tr></table></figure>
<p>Now, you can resize the filesystem in that logical volume.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv</span><br></pre></td></tr></table></figure>
<p>Finally, you can see the end result:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">df</span> -h /</span><br></pre></td></tr></table></figure>
<h2 id="安装qemu-guest-agent">安装qemu-guest-agent</h2>
<ul>
<li>参考https://pve.proxmox.com/wiki/Qemu-guest-agent</li>
<li>https://foxi.buduanwang.vip/virtualization/pve/530.html/</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install qemu-guest-agent</span><br><span class="line">apt-get install spice-vdagent</span><br></pre></td></tr></table></figure>
<p>然后打开 “数据中心-&gt;pve-&gt;VMname-&gt;选项-&gt;QEMU Guest
Agent”</p>
<h1 id="安装-openmediavault">安装 openmediavault</h1>
<blockquote>
<p>Ref:</p>
<p>https://www.d3tt.com/view/239</p>
</blockquote>
<h2 id="omv-磁盘丢失">omv 磁盘丢失</h2>
<p>OMV 断电后，没有卸载文档，直接将磁盘从omv硬盘接口取下，重启后提示
磁盘丢失。</p>
<blockquote>
<p>Ref: https://www.jianshu.com/p/5a78668b0670</p>
</blockquote>
<h2 id="omv-extras"><strong>omv-extras</strong></h2>
<blockquote>
<p>Ref: https://zhuanlan.zhihu.com/p/357495418</p>
</blockquote>
<h2 id="omv-decker">omv decker</h2>
<blockquote>
<p>Ref: https://zhuanlan.zhihu.com/p/360126067</p>
</blockquote>
<h1 id="pve删除lvm扩容步骤">pve删除lvm扩容步骤</h1>
<blockquote>
<p>Ref:</p>
<p>https://www.jianshu.com/p/bdb83531c56d</p>
<p>https://wp.gxnas.com/10402.html</p>
</blockquote>
<h1 id="防火墙">防火墙</h1>
<blockquote>
<p>Ref:</p>
<p>https://www.pianshen.com/article/72122018797/</p>
<p>https://foxi.buduanwang.vip/virtualization/pve/508.html/</p>
</blockquote>
<h1 id="spice远程连接">SPICE远程连接</h1>
<blockquote>
<p>Ref:</p>
<p>https://i.opat.vip/738.html</p>
</blockquote>
<h1 id="proxmox-ve直通硬盘全盘映射方式">Proxmox
VE直通硬盘（全盘映射方式）</h1>
<blockquote>
<p>Ref:</p>
<p>https://wangxingcs.com/2020/0227/1411/</p>
</blockquote>
<h1 id="proxmox-ve-web-界面添加硬件温度显示cpu温度和硬盘温度都显示">Proxmox
VE web 界面添加硬件温度显示(CPU温度和硬盘温度都显示)</h1>
<blockquote>
<p>Ref:</p>
<p>https://www.sjrkhb.com/article/3.html</p>
<p>https://oswu.cc/?p=99</p>
</blockquote>
<h2 id="安装温度检测软件">安装温度检测软件</h2>
<h3 id="cpu-及主板温度检测lm-sensors">CPU
及主板温度检测：lm-sensors</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install lm-sensors</span><br></pre></td></tr></table></figure>
<p>安装完成后执行 <code>sensors-detect</code>
进行传感器探测，<strong>通常情况下</strong>全部默认选择 yes 即可</p>
<p>探测完成后执行 <code>sensors</code> 测试传感器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fitz @ pve in ~ [11:09:27]</span></span><br><span class="line">$ sensors</span><br><span class="line">coretemp-isa-0000</span><br><span class="line">Adapter: ISA adapter</span><br><span class="line">Package <span class="built_in">id</span> 0:  +25.0°C  (high = +86.0°C, crit = +100.0°C)</span><br><span class="line">Core 0:        +22.0°C  (high = +86.0°C, crit = +100.0°C)</span><br><span class="line">Core 1:        +21.0°C  (high = +86.0°C, crit = +100.0°C)</span><br><span class="line">Core 2:        +23.0°C  (high = +86.0°C, crit = +100.0°C)</span><br><span class="line">Core 3:        +25.0°C  (high = +86.0°C, crit = +100.0°C)</span><br><span class="line">Core 4:        +22.0°C  (high = +86.0°C, crit = +100.0°C)</span><br><span class="line">Core 5:        +21.0°C  (high = +86.0°C, crit = +100.0°C)</span><br><span class="line">Core 6:        +24.0°C  (high = +86.0°C, crit = +100.0°C)</span><br><span class="line">Core 7:        +22.0°C  (high = +86.0°C, crit = +100.0°C)</span><br><span class="line"></span><br><span class="line">nvme-pci-0400</span><br><span class="line">Adapter: PCI adapter</span><br><span class="line">Composite:    +30.9°C  (low  = -273.1°C, high = +83.8°C)</span><br><span class="line">                       (crit = +84.8°C)</span><br><span class="line">Sensor 1:     +30.9°C  (low  = -273.1°C, high = +65261.8°C)</span><br><span class="line">Sensor 2:     +29.9°C  (low  = -273.1°C, high = +65261.8°C)</span><br><span class="line"></span><br><span class="line">acpitz-acpi-0</span><br><span class="line">Adapter: ACPI interface</span><br><span class="line">temp1:        +27.8°C  (crit = +119.0°C)</span><br><span class="line"></span><br><span class="line">iwlwifi_1-virtual-0</span><br><span class="line">Adapter: Virtual device</span><br><span class="line">temp1:            N/A</span><br><span class="line"></span><br><span class="line">nvme-pci-0200</span><br><span class="line">Adapter: PCI adapter</span><br><span class="line">Composite:    +26.9°C  (low  = -273.1°C, high = +84.8°C)</span><br><span class="line">                       (crit = +84.8°C)</span><br><span class="line">Sensor 1:     +26.9°C  (low  = -273.1°C, high = +65261.8°C)</span><br><span class="line">Sensor 2:     +24.9°C  (low  = -273.1°C, high = +65261.8°C)</span><br></pre></td></tr></table></figure>
<p>在如上输出中，“acpitz-acpi-0” 是主板温度，“coretemp-isa-0000” 是 CPU
温度。</p>
<h3 id="硬盘温度检测hddtemp">硬盘温度检测：hddtemp</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@pve:~$ <span class="built_in">sudo</span> apt install hddtemp</span><br></pre></td></tr></table></figure>
<p>安装完成后执行 <code>hddtemp /dev/sd?</code> 测试传感器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@pve:~$ <span class="built_in">sudo</span> hddtemp /dev/sd?/dev/sda: WDC WD40EZRZ-00WN9B0: 29°C</span><br><span class="line">/dev/sdb: ADATA SP600: 26°C</span><br><span class="line">/dev/sdc: WD2500: 29°C</span><br><span class="line">/dev/sdd: ADATA SP900: 38°C</span><br></pre></td></tr></table></figure>
<p>由于 PVE 的 web 服务以用户 www-data 身份运行，需要修改 hddtemp
的权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@pve:~$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> +s /usr/sbin/hddtemp</span><br></pre></td></tr></table></figure>
<h2 id="编辑-pve-web-服务文件">编辑 PVE web 服务文件</h2>
<h3 id="nodes.pm">Nodes.pm</h3>
<p>编辑文件 <code>/usr/share/perl5/PVE/API2/Nodes.pm</code>，跳转到
<code>my $dinfo = df('/', 1);</code> 位置，编辑成如下所示</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...[OMITTED]...</span></span><br><span class="line">        <span class="variable">$res</span>-&gt;&#123;pveversion&#125; = PVE::pvecfg::<span class="keyword">package</span>() . <span class="string">&quot;/&quot;</span> .</span><br><span class="line">            PVE::pvecfg::version_text();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$res</span>-&gt;&#123;temperatures&#125; = <span class="string">`sensors`</span>;  <span class="comment"># 添加此行以获取 CPU 与主板温度</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$res</span>-&gt;&#123;hdd_temperatures&#125; = <span class="string">`hddtemp /dev/sd?`</span>;  <span class="comment"># 添加此行以获取硬盘温度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">my</span> <span class="variable">$dinfo</span> = df(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>);     <span class="comment"># output is bytes# ...[OMITTED]...</span></span><br></pre></td></tr></table></figure>
<h3 id="pvemanagerlib.js">pvemanagerlib.js</h3>
<h3 id="修改页面样式以完整显示数据">修改页面样式以完整显示数据</h3>
<p>编辑文件
<code>/usr/share/pve-manager/js/pvemanagerlib.js</code>，跳转到
<code>gettext('Status') + ': ' + zpool,</code> 位置，编辑成如下所示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...[OMITTED]...</span></span><br><span class="line"> <span class="keyword">var</span> win = <span class="title class_">Ext</span>.<span class="title function_">create</span>(<span class="string">&#x27;Ext.window.Window&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">modal</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">500</span>,  <span class="comment">// 原始值为 400</span></span><br><span class="line">            <span class="attr">resizable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">layout</span>: <span class="string">&#x27;fit&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="title function_">gettext</span>(<span class="string">&#x27;Status&#x27;</span>) + <span class="string">&#x27;: &#x27;</span> + zpool,</span><br><span class="line">            <span class="attr">items</span>:[&#123;<span class="comment">// ...[OMITTED]...</span></span><br></pre></td></tr></table></figure>
<p>跳转到 <code>widget.pveNodeStatus</code> 位置，编辑成如下所示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...[OMITTED]...Ext.define(&#x27;PVE.node.StatusView&#x27;, &#123;</span></span><br><span class="line">    <span class="attr">extend</span>: <span class="string">&#x27;PVE.panel.StatusView&#x27;</span>,</span><br><span class="line">    <span class="attr">alias</span>: <span class="string">&#x27;widget.pveNodeStatus&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">height</span>: <span class="number">400</span>,  <span class="comment">// 原始值为 300</span></span><br><span class="line">    <span class="attr">bodyPadding</span>: <span class="string">&#x27;20 15 20 15&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">layout</span>: &#123;<span class="comment">// ...[OMITTED]...</span></span><br></pre></td></tr></table></figure>
<p><strong>两处 <code>height</code> 的值需按情况修改，每多一行数据增加
20</strong></p>
<p>例如有 1 行 CPU 与主板温度数据、3 行硬盘温度数据（3 块硬盘），即为
480 与 380</p>
<h3 id="添加显示内容">添加显示内容</h3>
<p>跳转到 <code>PVE Manager Version</code> 位置，编辑成如下所示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...[OMITTED]...</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">itemId</span>: <span class="string">&#x27;version&#x27;</span>,</span><br><span class="line">            <span class="attr">colspan</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">printBar</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="title function_">gettext</span>(<span class="string">&#x27;PVE Manager Version&#x27;</span>),</span><br><span class="line">            <span class="attr">textField</span>: <span class="string">&#x27;pveversion&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;,  <span class="comment">// 注意添加逗号</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">itemId</span>: <span class="string">&#x27;temperatures&#x27;</span>,</span><br><span class="line">            <span class="attr">colspan</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">printBar</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="title function_">gettext</span>(<span class="string">&#x27;Temperatures&#x27;</span>),</span><br><span class="line">            <span class="attr">textField</span>: <span class="string">&#x27;temperatures&#x27;</span>,</span><br><span class="line">            <span class="attr">renderer</span>: <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                value = value.<span class="title function_">replace</span>(<span class="regexp">/Â/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                <span class="keyword">let</span> data = [];</span><br><span class="line">                <span class="keyword">let</span> cpus = value.<span class="title function_">matchAll</span>(<span class="regexp">/^coretemp-isa-(\d&#123;4&#125;)$\n.*?\n((?:Package|Core)[\s\S]*?^\n)+/gm</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> cpu <span class="keyword">of</span> cpus) &#123;</span><br><span class="line">                    <span class="keyword">let</span> cpuNumber = <span class="built_in">parseInt</span>(cpu[<span class="number">1</span>], <span class="number">10</span>);</span><br><span class="line">                    data[cpuNumber] = &#123;</span><br><span class="line">                        <span class="attr">packages</span>: [],</span><br><span class="line">                        <span class="attr">cores</span>: []</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">let</span> packages = cpu[<span class="number">2</span>].<span class="title function_">matchAll</span>(<span class="regexp">/^Package id \d+:\s*([^°]+).*$/gm</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">const</span> package <span class="keyword">of</span> packages) &#123;</span><br><span class="line">                        data[cpuNumber][<span class="string">&#x27;packages&#x27;</span>].<span class="title function_">push</span>(package[<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">let</span> cores = cpu[<span class="number">2</span>].<span class="title function_">matchAll</span>(<span class="regexp">/^Core \d+:\s*([^°]+).*$/gm</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">const</span> core <span class="keyword">of</span> cores) &#123;</span><br><span class="line">                        data[cpuNumber][<span class="string">&#x27;cores&#x27;</span>].<span class="title function_">push</span>(core[<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> [i, cpu] <span class="keyword">of</span> data.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">                    output += <span class="string">`CPU <span class="subst">$&#123;i&#125;</span>: `</span>;</span><br><span class="line">                    <span class="keyword">if</span> (cpu.<span class="property">packages</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">const</span> packageTemp <span class="keyword">of</span> cpu.<span class="property">packages</span>) &#123;</span><br><span class="line">                            output += <span class="string">`<span class="subst">$&#123;packageTemp&#125;</span>°C `</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (cpu.<span class="property">cores</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        output += <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">const</span> coreTemp <span class="keyword">of</span> cpu.<span class="property">cores</span>) &#123;</span><br><span class="line">                            output += <span class="string">`<span class="subst">$&#123;coreTemp&#125;</span>, `</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        output = output.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">2</span>);</span><br><span class="line">                        output += <span class="string">&#x27;)°C&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    output += <span class="string">&#x27; | &#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> boardTemp = value.<span class="title function_">match</span>(<span class="regexp">/^acpitz-acpi-\d+$\n.*?\n^temp1:\s*([^°]+).*$/m</span>);</span><br><span class="line">                <span class="keyword">if</span> (boardTemp.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    output += <span class="string">`Board: <span class="subst">$&#123;boardTemp[<span class="number">1</span>]&#125;</span>°C | `</span></span><br><span class="line">                &#125;</span><br><span class="line">                output = output.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> output;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">itemId</span>: <span class="string">&#x27;hdd-temperatures&#x27;</span>,</span><br><span class="line">            <span class="attr">colspan</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">printBar</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="title function_">gettext</span>(<span class="string">&#x27;HDD Temperatures&#x27;</span>),</span><br><span class="line">            <span class="attr">textField</span>: <span class="string">&#x27;hdd_temperatures&#x27;</span>,</span><br><span class="line">            <span class="attr">renderer</span>: <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                value = value.<span class="title function_">replace</span>(<span class="regexp">/Â/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> value.<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],<span class="comment">// ...[OMITTED]...</span></span><br></pre></td></tr></table></figure>
<p>其中处理数据的正则式与返回值可能需按实际情况进行修改</p>
<h2 id="完成">完成</h2>
<p>执行 <code>systemctl restart pveproxy</code> 重启 PVE web 服务</p>
<p><strong>在浏览器中清除 PVE
控制台的缓存</strong>，重新加载即可在节点概要显示温度信息</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/202202141121253.png" alt="pve-temperatures">
<figcaption aria-hidden="true">pve-temperatures</figcaption>
</figure>
]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>Geek</tag>
        <tag>PVE</tag>
      </tags>
  </entry>
  <entry>
    <title>SCS in LINC PA</title>
    <url>/2021/04/03/scs/</url>
    <content><![CDATA[<p>LINC (Linear amplification with nonlinear components)
是一种使用非线性元件进行线性放大的功率放大器系统，可以在获得高线性度的同时获得高效率。其结构如下图所示：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194755.png" alt="LINC">
<figcaption aria-hidden="true">LINC</figcaption>
</figure>
<p>LINC 的基本思想是使用 SCS (signal component separator)
将相位幅度调制的信号转为两路相位调制信号，然后再通过两个高效率的非线性功率放大器放大，最后通过组合两路信号获得原始信号的放大后的信号。</p>
<p>在 LINC 系统中，需要使用到
SCS，其实现可以使用模拟的方案，也可以使用全数字的方案。</p>
<p>本文记录了全数字 SCS 的实现方法。</p>
<span id="more"></span>
<h1 id="基于-cordic-算法的-scs-原理">基于 CORDIC 算法的 SCS 原理</h1>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194756.png" alt="image-20210411155141497">
<figcaption aria-hidden="true">image-20210411155141497</figcaption>
</figure>
<p>基于 CORDIC 算法的 SCS 原理图如上图所示，基带信号 I Q 经过
<em>CORDIC-V</em> 模块，从笛卡尔转换到极坐标，得到振幅 <span class="math inline">\(A\)</span> 和相位 <span class="math inline">\(\theta\)</span>，振幅 <span class="math inline">\(A\)</span> 经过 <em>DOUBLE CORDIC</em> 模块，进行
<span class="math inline">\(\rm{cos}^{-1}(A/A_{MAX})\)</span>
的运算，得到 <span class="math inline">\(\varphi\)</span>，相当于把振幅信号转为相位信号。然后通过两个
<em>CORDIC-R</em> 模块，分别对 <span class="math inline">\(\theta +
\varphi\)</span> 和 <span class="math inline">\(\theta -
\varphi\)</span> 做相位到笛卡尔坐标的转换，得到四路调相信号：<span class="math inline">\(S_{1I},S_{1Q},S_{2I},S_{2Q}\)</span>。</p>
<p>具体计算过程如下：</p>
<p>假设基带信号 (baseband signal) 为： <span class="math display">\[
S_b(t)=S_i(t)+jS_q(t)
\]</span> 则频带信号 (transmitted signal) 可以表示为： <span class="math display">\[
S(t)=Re\left\{ (S_i(t)+jS_q(t))e^{j\omega _ct}
\right\}=A(t)\cos\left(w_{c}t+\theta(t)\right)
\]</span> <em>DOUBLE CORDIC</em>： <span class="math display">\[
\phi(t)=\cos^{-1}\left(A(t)/A_{\max}\right)
\]</span> <em>CORDIC-R</em>： <span class="math display">\[
S_{1I}(t) = 0.5 A_{max} \rm{cos}[\theta(t)+\phi(t)]
\]</span></p>
<p><span class="math display">\[
S_{1Q}(t) = 0.5 A_{max} \rm{sin}[\theta(t)+\phi(t)]
\]</span></p>
<p><span class="math display">\[
S_{2I}(t) = 0.5 A_{max} \rm{cos}[\theta(t)-\phi(t)]
\]</span></p>
<p><span class="math display">\[
S_{2Q}(t) = 0.5 A_{max} \rm{sin}[\theta(t)-\phi(t)]
\]</span></p>
<p>混频： <span class="math display">\[
S_1(t)=S_{1I}(t)\rm{cos}(\omega _c t)-S_{1Q}(t)\rm{sin}(\omega _c t)
\]</span></p>
<p><span class="math display">\[
S_2(t)=S_{2I}(t)\rm{cos}(\omega _c t)-S_{2Q}(t)\rm{sin}(\omega _c t)
\]</span></p>
<p><span class="math display">\[
S(t) = S_1(t)+S_2(t)=A(t)\rm{cos}[\omega _c t+\phi(t)]
\]</span></p>
<h1 id="scs-的原理图">SCS 的原理图</h1>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194757.png" alt="image-20210411161107543">
<figcaption aria-hidden="true">image-20210411161107543</figcaption>
</figure>
<p>SCS 原理图如上图所示。其中基带 I Q 信号为 64QAM
信号。为了简化算法实现的复杂度，首先将 I Q 信号变换到第一象限，并记录下
I Q 信号原本的象限，最后在输出的时候做符号调整就可以了。上图红框中将
<span class="math inline">\(\varphi -
\pi/2\)</span>，原因是因为在实际的设计过程中发现 <span class="math inline">\(\theta + \varphi\)</span> 会大于 <span class="math inline">\(\pi /2\)</span>，为了避免溢出而将其减了 <span class="math inline">\(\pi /2\)</span>，因此在进行符号调整之前： <span class="math display">\[
S_{1I}(t) = 0.5 A_{max} \rm{cos}[\theta(t)+\phi(t) - \pi/2]
\]</span></p>
<p><span class="math display">\[
S_{1Q}(t) = 0.5 A_{max} \rm{sin}[\theta(t)+\phi(t)-\pi/2]
\]</span></p>
<h1 id="matlab-行为级仿真">Matlab 行为级仿真</h1>
<p>在进行 MATLAB
仿真时，为了让仿真结果和真实结果更加接近，进行了每一步计算过程都进行了浮点转定点数的操作。</p>
<h2 id="仿真结果">仿真结果</h2>
<ol type="1">
<li><p>64QAM 基带信号：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194758.svg" alt="64QAM基带信号">
<figcaption aria-hidden="true">64QAM基带信号</figcaption>
</figure></li>
<li><p>64QAM 频带信号：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194759.svg" alt="QAM信号波形">
<figcaption aria-hidden="true">QAM信号波形</figcaption>
</figure></li>
<li><p>64QAM 星座图：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194800.svg" alt="QAM信号星座图">
<figcaption aria-hidden="true">QAM信号星座图</figcaption>
</figure></li>
<li><p>对基带信号进行 SCS 运算得到的 <span class="math inline">\(S_{1I},S_{1Q},S_{2I},S_{2Q}\)</span> 信号：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194801.svg" alt="QAM基带信号信号SCS">
<figcaption aria-hidden="true">QAM基带信号信号SCS</figcaption>
</figure></li>
<li><p>将 SCS 后的基带信号与载波相乘：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194802.svg" alt="QAM信号SCS">
<figcaption aria-hidden="true">QAM信号SCS</figcaption>
</figure>
<p>可以看到两路信号 S1 和 S2 是两路恒包络的调相信号，说明 SCS
模块实现了将原来的调幅调相信号转为两路恒包络的调相信号。</p></li>
<li><p>两路信号 S1 和 S2 合成：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727194803.svg" alt="QAM信号SCS合成">
<figcaption aria-hidden="true">QAM信号SCS合成</figcaption>
</figure>
<p>可以看到合成后的信号与原始信号一致，说明在 SCS
的过程中信号的信息没有丢失。</p></li>
</ol>
<h2 id="matlab-代码">Matlab 代码</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% main.m</span></span><br><span class="line">clc</span><br><span class="line">clear all</span><br><span class="line">mkdir image</span><br><span class="line"></span><br><span class="line"><span class="comment">% fixed word length and fraction length bits</span></span><br><span class="line">wl = <span class="number">16</span>;</span><br><span class="line">fl_1 = <span class="number">15</span>;</span><br><span class="line">fl_pi = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">M=<span class="number">64</span>;</span><br><span class="line">xmax = <span class="number">8</span>;</span><br><span class="line">ymax = <span class="number">8</span>;</span><br><span class="line">Amax = <span class="built_in">sqrt</span>(xmax^<span class="number">2</span> + ymax^<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">msg = <span class="number">0</span>:<span class="number">1</span>:<span class="number">63</span>; <span class="comment">%消息信号</span></span><br><span class="line"><span class="comment">% msg = random_msg([0 M-1], M);</span></span><br><span class="line"></span><br><span class="line">ts = <span class="number">0.01</span>; <span class="comment">%抽样时间间隔</span></span><br><span class="line">T = <span class="number">1</span>; <span class="comment">%符号周期</span></span><br><span class="line">t = <span class="number">0</span>:ts:T; <span class="comment">%符号持续时间向量</span></span><br><span class="line">x = <span class="number">0</span>:ts:<span class="built_in">length</span>(msg); <span class="comment">%所有符号的传输时间</span></span><br><span class="line">fc = <span class="number">1</span>; <span class="comment">%载波频率</span></span><br><span class="line">c = <span class="built_in">sqrt</span>(<span class="number">2</span>/T)*<span class="built_in">exp</span>(<span class="number">1</span><span class="built_in">j</span>*<span class="number">2</span>*<span class="built_in">pi</span>*fc*t); <span class="comment">%载波信号</span></span><br><span class="line">msg_qam = qammod(msg,M).&#x27;; <span class="comment">%基带8-QAM调制</span></span><br><span class="line">tx_i_qam = <span class="built_in">real</span>(msg_qam*c); <span class="comment">%载波调制</span></span><br><span class="line">tx_q_qam = <span class="built_in">imag</span>(msg_qam*c); <span class="comment">%载波调制</span></span><br><span class="line">tx_i_qam= <span class="built_in">reshape</span>(tx_i_qam.&#x27;,<span class="number">1</span>,<span class="built_in">length</span>(msg)*<span class="built_in">length</span>(t));</span><br><span class="line">tx_q_qam= <span class="built_in">reshape</span>(tx_q_qam.&#x27;,<span class="number">1</span>,<span class="built_in">length</span>(msg)*<span class="built_in">length</span>(t));</span><br><span class="line"><span class="comment">% plot(x,tx_i_qam(1:length(x)),x,tx_q_qam(1:length(x)));</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,tx_i_qam(<span class="number">1</span>:<span class="built_in">length</span>(x)));</span><br><span class="line">title([num2str(M) <span class="string">&#x27;QAM信号波形&#x27;</span>]) </span><br><span class="line">xlabel(<span class="string">&quot;时间t&quot;</span>);ylabel(<span class="string">&quot;载波振幅&quot;</span>);</span><br><span class="line">saveas(gcf, <span class="string">&#x27;image/QAM信号波形.svg&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(<span class="number">1</span>:<span class="built_in">length</span>(msg_qam),<span class="built_in">real</span>(msg_qam),<span class="number">1</span>:<span class="built_in">length</span>(msg_qam),<span class="built_in">imag</span>(msg_qam))</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&quot;时间t&quot;</span>);ylabel(<span class="string">&quot;基带振幅&quot;</span>);</span><br><span class="line">tit = [num2str(M) <span class="string">&#x27;QAM基带信号&#x27;</span>];</span><br><span class="line">title(tit); </span><br><span class="line">saveas(gcf, [<span class="string">&#x27;image/&#x27;</span> tit], <span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line"><span class="comment">% figure(2);</span></span><br><span class="line"><span class="comment">% scatterplot(msg_qam)</span></span><br><span class="line"><span class="comment">% title([num2str(M) &#x27;QAM信号星座图&#x27;])</span></span><br><span class="line"><span class="comment">% xlabel(&quot;同相分量&quot;);ylabel(&quot;正交分量&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% CORDIC-V Cartesian to Polar</span></span><br><span class="line"><span class="comment">% 将 QAM 信号变换到第一象限，并记录下符号</span></span><br><span class="line">[msg_qam_tarns, msg_qam_symbol] = transform(msg_qam);</span><br><span class="line">x_qam = <span class="built_in">real</span>(msg_qam_tarns);</span><br><span class="line">y_qam = <span class="built_in">imag</span>(msg_qam_tarns);</span><br><span class="line"><span class="comment">% Construct signed fixed-point numeric object</span></span><br><span class="line"><span class="comment">% 将 x y 归一化到 [0, 1]</span></span><br><span class="line">x_fixed = sfi(x_qam/xmax, wl, fl_1);</span><br><span class="line">y_fixed = sfi(y_qam/ymax, wl, fl_1);</span><br><span class="line"><span class="comment">% Theta (0, pi/2), r (0, sqrt(2))</span></span><br><span class="line">[Theta,r] = cordiccart2pol(x_fixed, y_fixed);</span><br><span class="line"><span class="comment">% % 将 r 归一化到 (0, 1)</span></span><br><span class="line">r_fixed = sfi(r/<span class="built_in">sqrt</span>(<span class="number">2</span>), wl, fl_1);</span><br><span class="line">Theta_fixed = sfi(Theta, wl, fl_pi); <span class="comment">% fixed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% DOUBLE CORDIC</span></span><br><span class="line"><span class="comment">% r_fixed (0, 1), Varphi [0, pi/2]</span></span><br><span class="line">Varphi = cordicacos(r_fixed);</span><br><span class="line">Varphi_fixed = sfi(Varphi, wl, fl_pi); <span class="comment">% fixed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% CORDIC-R Phase to Cartesian</span></span><br><span class="line">Phase_S1 = Theta_fixed + Varphi_fixed - <span class="built_in">pi</span>/<span class="number">2</span>; <span class="comment">% 将 Phase_S1 限制在 (-pi/2, pi/2)</span></span><br><span class="line">Phase_S2 = Theta_fixed - Varphi_fixed; <span class="comment">% Phase_S2 在 (-pi/2, pi/2)</span></span><br><span class="line">Phase_S1_fixed = sfi(Phase_S1, wl, fl_pi);</span><br><span class="line">Phase_S2_fixed = sfi(Phase_S2, wl, fl_pi);</span><br><span class="line"></span><br><span class="line">S1_I_tmp = <span class="number">0.5</span>*Amax*cordiccos(Phase_S1_fixed);</span><br><span class="line">S1_Q_tmp = <span class="number">0.5</span>*Amax*cordicsin(Phase_S1_fixed);</span><br><span class="line">S2_I_tmp = <span class="number">0.5</span>*Amax*cordiccos(Phase_S2_fixed);</span><br><span class="line">S2_Q_tmp = <span class="number">0.5</span>*Amax*cordicsin(Phase_S2_fixed);</span><br><span class="line"></span><br><span class="line"># Signal Adjusment</span><br><span class="line">[S1_I, S1_Q, S2_I ,S2_Q] = Signal_Adjusment_quad(S1_I_tmp, S1_Q_tmp, S2_I_tmp, S2_Q_tmp, msg_qam_symbol);</span><br><span class="line"></span><br><span class="line">tt = <span class="number">1</span>:<span class="number">1</span>:<span class="number">64</span>;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>);</span><br><span class="line">tiledlayout(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">ax1 = nexttile;</span><br><span class="line"><span class="built_in">plot</span>(ax1, tt,S1_I, tt,S1_Q);</span><br><span class="line"><span class="built_in">legend</span>(ax1, <span class="string">&#x27;S_&#123;1I&#125;&#x27;</span>, <span class="string">&#x27;S_&#123;1Q&#125;&#x27;</span>)</span><br><span class="line">title(ax1, <span class="string">&quot;QAM基带信号信号SCS S1&quot;</span>)</span><br><span class="line">xlabel(ax1, <span class="string">&quot;时间t&quot;</span>);ylabel(ax1, <span class="string">&quot;振幅&quot;</span>);</span><br><span class="line">ax2 = nexttile;</span><br><span class="line"><span class="built_in">plot</span>(ax2, tt,S2_I, tt,S2_Q);</span><br><span class="line"><span class="built_in">legend</span>(ax2, <span class="string">&#x27;S_&#123;2I&#125;&#x27;</span>, <span class="string">&#x27;S_&#123;2Q&#125;&#x27;</span>)</span><br><span class="line">title(ax2, <span class="string">&quot;QAM基带信号信号SCS S2&quot;</span>)</span><br><span class="line">xlabel(ax2, <span class="string">&quot;时间t&quot;</span>);ylabel(ax2, <span class="string">&quot;振幅&quot;</span>);</span><br><span class="line">saveas(gcf, <span class="string">&#x27;image/QAM基带信号信号SCS&#x27;</span>, <span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 调制</span></span><br><span class="line">S1 = <span class="built_in">real</span>(((S1_I+<span class="number">1</span><span class="built_in">j</span>*S1_Q)&#x27;)*c); <span class="comment">%载波调制</span></span><br><span class="line">S2 = <span class="built_in">real</span>(((S2_I+<span class="number">1</span><span class="built_in">j</span>*S2_Q)&#x27;)*c); <span class="comment">%载波调制</span></span><br><span class="line">S1= <span class="built_in">reshape</span>(S1.&#x27;,<span class="number">1</span>,<span class="built_in">length</span>(S1_I)*<span class="built_in">length</span>(t));</span><br><span class="line">S2= <span class="built_in">reshape</span>(S2.&#x27;,<span class="number">1</span>,<span class="built_in">length</span>(S2_I)*<span class="built_in">length</span>(t));</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>);</span><br><span class="line">tiledlayout(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">ax1 = nexttile;</span><br><span class="line"><span class="built_in">plot</span>(ax1, x,S1(<span class="number">1</span>:<span class="built_in">length</span>(x)))</span><br><span class="line"><span class="built_in">legend</span>(ax1, <span class="string">&#x27;S1&#x27;</span>)</span><br><span class="line">title(ax1, [num2str(M) <span class="string">&#x27;QAM信号SCS S1&#x27;</span>]);</span><br><span class="line">xlabel(ax1, <span class="string">&quot;时间t&quot;</span>);ylabel(ax1, <span class="string">&quot;振幅&quot;</span>);</span><br><span class="line">ax2 = nexttile;</span><br><span class="line"><span class="built_in">plot</span>(ax2, x,S2(<span class="number">1</span>:<span class="built_in">length</span>(x)))</span><br><span class="line"><span class="built_in">legend</span>(ax2, <span class="string">&#x27;S2&#x27;</span>)</span><br><span class="line">title(ax2, [num2str(M) <span class="string">&#x27;QAM信号SCS S2&#x27;</span>]);</span><br><span class="line">xlabel(ax2, <span class="string">&quot;时间t&quot;</span>);ylabel(ax2, <span class="string">&quot;振幅&quot;</span>);</span><br><span class="line">saveas(gcf, <span class="string">&#x27;image/QAM信号SCS&#x27;</span>, <span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line"></span><br><span class="line">S = S1 + S2;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,S(<span class="number">1</span>:<span class="built_in">length</span>(x)));</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">title([num2str(M) <span class="string">&#x27;QAM信号SCS合成&#x27;</span>]);</span><br><span class="line">xlabel(<span class="string">&quot;时间t&quot;</span>);ylabel(<span class="string">&quot;振幅&quot;</span>);</span><br><span class="line">saveas(gcf, <span class="string">&#x27;image/QAM信号SCS合成&#x27;</span>, <span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 星座图</span></span><br><span class="line"><span class="comment">% figure(6)</span></span><br><span class="line">scatterplot(msg_qam);</span><br><span class="line">title([num2str(M) <span class="string">&#x27;QAM信号星座图&#x27;</span>]);</span><br><span class="line">xlabel(<span class="string">&quot;同相分量&quot;</span>);ylabel(<span class="string">&quot;正交分量&quot;</span>);</span><br><span class="line">saveas(gcf, <span class="string">&#x27;image/QAM信号星座图&#x27;</span>, <span class="string">&#x27;svg&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% random_msg.m</span></span><br><span class="line"><span class="comment">% 生成随机序列</span></span><br><span class="line"><span class="comment">% </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">msg</span> = <span class="title">random_msg</span><span class="params">(range, lenght)</span></span></span><br><span class="line">    <span class="comment">% 首先，初始化随机数生成器，以使本示例中的结果具备可重复性。</span></span><br><span class="line">    rng(<span class="number">0</span>,<span class="string">&#x27;twister&#x27;</span>);</span><br><span class="line">    <span class="comment">% 创建一个 M 个随机值的向量。使用 rand 函数从开区间 (0,M-1) 抽取均匀分布的值。</span></span><br><span class="line">    a = range(<span class="number">1</span>);</span><br><span class="line">    b = range(<span class="number">2</span>);</span><br><span class="line">    r = (b-a).*<span class="built_in">rand</span>(<span class="number">1</span>,lenght) + a;</span><br><span class="line">    msg = <span class="built_in">round</span>(r);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Signal_Adjusment_quad.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[S1_I, S1_Q, S2_I ,S2_Q]</span> = <span class="title">Signal_Adjusment_quad</span><span class="params">(S1_I_tmp, S1_Q_tmp, S2_I_tmp, S2_Q_tmp, symbol)</span></span></span><br><span class="line">    len = <span class="built_in">length</span>(S1_I_tmp);</span><br><span class="line">    S1_I = <span class="built_in">zeros</span>(<span class="number">1</span>, len);</span><br><span class="line">    S1_Q = <span class="built_in">zeros</span>(<span class="number">1</span>, len);</span><br><span class="line">    S2_I = <span class="built_in">zeros</span>(<span class="number">1</span>, len);</span><br><span class="line">    S2_Q = <span class="built_in">zeros</span>(<span class="number">1</span>, len);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">1</span>:len</span><br><span class="line">        <span class="keyword">if</span> symbol(<span class="built_in">i</span>,:) == [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">            <span class="comment">% 第一象限</span></span><br><span class="line">            S1_I(<span class="built_in">i</span>) = -S1_Q_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S1_Q(<span class="built_in">i</span>) = S1_I_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S2_I(<span class="built_in">i</span>) = S2_I_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S2_Q(<span class="built_in">i</span>) = S2_Q_tmp(<span class="built_in">i</span>);</span><br><span class="line">        <span class="keyword">elseif</span> symbol(<span class="built_in">i</span>,:) == [<span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line">            <span class="comment">% 第二象限</span></span><br><span class="line">            S1_I(<span class="built_in">i</span>) = -S2_I_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S1_Q(<span class="built_in">i</span>) = S2_Q_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S2_I(<span class="built_in">i</span>) = S1_Q_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S2_Q(<span class="built_in">i</span>) = S1_I_tmp(<span class="built_in">i</span>);</span><br><span class="line">        <span class="keyword">elseif</span> symbol(<span class="built_in">i</span>,:) == [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">            <span class="comment">% 第三象限</span></span><br><span class="line">            S1_I(<span class="built_in">i</span>) = S1_Q_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S1_Q(<span class="built_in">i</span>) = -S1_I_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S2_I(<span class="built_in">i</span>) = -S2_I_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S2_Q(<span class="built_in">i</span>) = -S2_Q_tmp(<span class="built_in">i</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">% 第四象限</span></span><br><span class="line">            S1_I(<span class="built_in">i</span>) = S2_I_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S1_Q(<span class="built_in">i</span>) = -S2_Q_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S2_I(<span class="built_in">i</span>) = -S1_Q_tmp(<span class="built_in">i</span>);</span><br><span class="line">            S2_Q(<span class="built_in">i</span>) = -S1_I_tmp(<span class="built_in">i</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h1 id="reference">Reference</h1>
<p>[1] CORDIC-Based Multi-Gb:s Digital Outphasing Modulator for Highly
Efficient Millimeter-Wave Transmitters</p>
<p>[2] A Sub-mW All-Digital Signal Component Separator With Branch
Mismatch Compensation for OFDM LINC Transmitters</p>
<p>[3] A Low Power All-Digital Signal Component Separator for Uneven
Multi-Level LINC Systems</p>
]]></content>
      <categories>
        <category>PA</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PA</tag>
      </tags>
  </entry>
  <entry>
    <title>svn 切换分支后合并一段时间内的 commit</title>
    <url>/2025/09/29/svn_merge/</url>
    <content><![CDATA[<h1 id="前提">前提</h1>
<p>从 trunk 创建一个 branch，然后在 branch
上进行开发，开发一段时间后，再切换回 trunk，这时需要把 branch
上自己提交的 commit 合并到 trunk 中。</p>
<h1 id="方法">方法</h1>
<ol type="1">
<li><p>获取 branch 上自己提交的 commit 的 id；</p>
<p>可以通过 <code>svn log --stop-on-copy</code> 获取这个 branch 上所有的
commit log。</p>
<p>在 branch 目录下执行如下命令，将获得的版本号记录下来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svn <span class="built_in">log</span> --stop-on-copy | grep -A 2 <span class="string">&quot;^r&quot;</span>  | grep -A 2 &lt;your name&gt;</span><br></pre></td></tr></table></figure>
<p>命令说明：</p>
<ul>
<li><code>svn log --stop-on-copy</code> 获取这个 branch 上所有的 commit
log；</li>
<li><code>grep -A 2 "^r"</code> 获取所有以 "r" 开头的行，即所有 commit
的 id 所在行， <code>-A 2</code> 表示获取该行之后的 2 行，即 commit
log；</li>
<li><code>grep -A 2 &lt;your name&gt;</code> 获取所有包含 "&lt;your
name&gt;" 的行，即所有自己提交的 commit 的 id 所在行， <code>-A 2</code>
表示获取该行之后的 2 行，即 commit log；</li>
</ul></li>
<li><p>通过 commit id 将 branch 上自己提交的 commit merge到 trunk
中；</p>
<p><strong>情况A: branch 上自己提交的 commit-id 不是连续的</strong></p>
<p>可以通过
<code>svn merge -c &lt;commit id&gt; &lt;branch url&gt; &lt;trunk url&gt;</code>
将 branch 上指定的 commit merge到 trunk 中。</p>
<p>如果在第1步中获取到的 commit id 为 1234、1256、1289，在 trunk
目录下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svn merge -c 1234 -c 1256 -c 1289 &lt;branch-url&gt;</span><br></pre></td></tr></table></figure>
<p>命令说明：</p>
<ul>
<li><code>-c &lt;commit id&gt;</code> 表示指定要 merge 的 commit
id；</li>
<li><code>&lt;branch-url&gt;</code> 表示 branch 的 url，可以通过在
branch 目录下执行 <code>svn info</code> 命令获取；</li>
</ul>
<p><strong>情况B: 如果branch 上自己提交的 commit-id
是连续的</strong></p>
<p>可以直接用
<code>svn merge -r &lt;start-id&gt;:&lt;end-id&gt; &lt;branch-url&gt;</code>。</p>
<p>示例：合并 <code>r1234</code> 到 <code>r1238</code>，在trunk
目录下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svn merge -r 1234:1238 &lt;branch-url&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>svn</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>单级放大器</title>
    <url>/2020/11/07/single-stage-amplify/</url>
    <content><![CDATA[<p>单级放大器可以分为四种基本类型：</p>
<ul>
<li>共源结构；</li>
<li>共栅结构；</li>
<li>源级跟随器；</li>
<li>共源共栅结构；</li>
</ul>
<span id="more"></span>
<h1 id="电阻负载的共源级">1. 电阻负载的共源级</h1>
<p>借助 MOS
管的跨导，可以将栅源电压转化为小信号漏极电流，再通过电阻将电流转为电压。</p>
<center>
<img style="zoom:67%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727194850.svg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图1.1 采用电阻负载的共源极
</div>
</center>
<p>图1.1(a)是一个采用电阻负载的共源极放大器，首先分析其大信号特性：</p>
<p>如果输入电压从零开始增大，则 M1 工作状态会有这样的变化：截止区 -&gt;
饱和区 -&gt; 线性区。</p>
<p>当 <span class="math inline">\(V_{in} &lt; V_{TH} 时，\)</span> M1
工作在截止区： <span class="math display">\[
V_{out} = V_{DD}
\]</span> 当 <span class="math inline">\(V_{in}\)</span> 接近 <span class="math inline">\(V_{TH}\)</span> 时，M1 开始导通，电流流过 <span class="math inline">\(R_D\)</span>，使 <span class="math inline">\(V_{out}\)</span> 减小，如果 <span class="math inline">\(V_{DD}\)</span> 不是特别小，则 M1 饱和导通： <span class="math display">\[
V_{out} = V_{DD} - R_D \frac{1}{2} \mu _n C_{ox} \frac{W}{L} (V_{in} -
V_{TH}) ^2
\]</span> 当 <span class="math inline">\(V_{in}\)</span> 继续增大，<span class="math inline">\(V_{out}\)</span> 继续下降，直到 <span class="math inline">\(V_{out} = V_{in} - V_{TH}\)</span> 时，M1
到达饱和区与线性区的临界状态： <span class="math display">\[
V_{in1} - V_{TH} = V_{out} = V_{DD} - R_D \frac{1}{2} \mu _n C_{ox}
\frac{W}{L} (V_{in1} - V_{TH}) ^2
\]</span> 当 <span class="math inline">\(V_{in} &gt; V_{in1}\)</span>
时，M1 工作在线性区： <span class="math display">\[
V_{out}= V_{DD} - R_D \frac{1}{2} \mu _n C_{ox} \frac{W}{L} [ 2(V_{in1}
- V_{TH}) V_{out} - V_{out} ^2 ]
\]</span> 当 <span class="math inline">\(V_{in}\)</span> 继续增大，<span class="math inline">\(V_{out} &lt;&lt; 2(V_{in} - V_{TH})\)</span>
时，M1 工作在深线性区，等效电路如图1.1(c)所示： <span class="math display">\[
V_{out} = V_{DD} \frac{R_{on}}{R_{on} + R_D} = \frac{V_{DD}}{1+\mu _n
C_{ox} \frac{W}{L} R_D (V_{in} - V_{TH})}
\]</span> 因此其输入输出特性曲线如图1.2所示。</p>
<center>
<img style="zoom:133%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727194906.svg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图1.2 采用电阻负载的共源极
</div>
</center>
<p>分析其小信号特性，当 <span class="math inline">\(V_{out} &gt; V_{in}
- V_{TH}\)</span> 时，即在图1.2 A
点左侧时，曲线的斜率可以看做小信号增益： <span class="math display">\[
\begin{split}
A_v = {}&amp; \frac{\partial V_{out}}{\partial V_{in}} \\
= {}&amp; - R_D \mu _n C_{ox} \frac{W}{L} (V_{in} - V_{TH}) \\
= {}&amp; -g_m R_D
\end{split}
\]</span> 由于 <span class="math inline">\(g_m\)</span> 会随输入 <span class="math inline">\(V_{in}\)</span>
变化，因此在大信号时，增益会发生较大的变化，该结构的增益线性度不好。</p>
<h1 id="二极管负载的共源极">2. 二极管负载的共源极</h1>
<h2 id="电路分析">电路分析</h2>
<p>如图2.1(a)所示，将 MOS 管的删漏短接，该 MOS
管可以起一个小信号电阻的作用。</p>
<center>
<img style="zoom:67%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727194925.svg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.1 Diode MOS
</div>
</center>
<p>由于 <span class="math inline">\(V_G = V_D\)</span>，因此该 MOS
管工作在饱和区，图2.1(b)为小信号等效电路，<span class="math inline">\(V_1 = V_X\)</span>，<span class="math inline">\(I_X = V_X/r_o + g_m
V_X\)</span>，所以二极管的阻抗等于： <span class="math display">\[
r_{equ} = (1/g_m) || r_o \approx 1/g_m
\]</span> 如果存在体效应，则如图2.1(c)和图2.1(d)的小信号等效电路，<span class="math inline">\(V_1 = -V_X\)</span>，<span class="math inline">\(V_{bs} = -V_X\)</span>，则： <span class="math display">\[
(g_m + g_{mb})V_X + \frac{V_X}{r_o} = I_X
\]</span> —&gt; <span class="math display">\[
r_{eq} = \frac{V_X}{I_X} = \frac{1}{g_m+g_{mb}} || r_o \approx
\frac{1}{g_m+g_{mb}}
\]</span></p>
<center>
<img style="zoom:67%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727194943.svg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.2 采用二极管负载的共源极
</div>
</center>
<p>分析二极管负载的共源极，如图2.2所示，忽略沟道长度调制效应，则： <span class="math display">\[
\begin{split}
A_v = {}&amp; -g_{m1}\frac{1}{g_{m2}+g_{mb}} \\
={}&amp; -\frac{g_{m1}}{g_{m2}} \frac{1}{1+\eta} \\
\\
\eta = {}&amp; \frac{g_{mb2}}{g_{m2}}
\end{split}
\]</span></p>
<p><span class="math display">\[
A_v = -\frac{\sqrt{2\mu _n C_{ox} (W/L)_1 I_{D1}}}{\sqrt{2\mu _n C_{ox}
(W/L)_2 I_{D2}}} \frac{1}{1+\eta}
\]</span></p>
<p>因为 <span class="math inline">\(I_{D1} = I_{D2}\)</span>，则： <span class="math display">\[
A_v = -\frac{\sqrt{(W/L)_1}}{\sqrt{(W/L)_2}} \frac{1}{1+\eta}
\]</span> 由等式可以看出，如果忽略 <span class="math inline">\(1/{1+\eta}\)</span> 随输出电压的变化，则只要 MOS
管工作在饱和区，增益和偏置电压电流没有关系。这表明输入输出特性呈线性。</p>
<h2 id="仿真">仿真</h2>
<center>
<img style="zoom:100%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727195002.png"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.3 二极管负载的共源极schematic
</div>
</center>
<ul>
<li>DC</li>
</ul>
<table>
<thead>
<tr>
<th>器件</th>
<th>参数</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>M0</td>
<td>L</td>
<td>1u</td>
</tr>
<tr>
<td>M0</td>
<td>W</td>
<td>10u</td>
</tr>
<tr>
<td>M1</td>
<td>L</td>
<td>1u</td>
</tr>
<tr>
<td>M2</td>
<td>W</td>
<td>10u</td>
</tr>
</tbody>
</table>
<center>
<img style="zoom:100%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727195016.jpg"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
      display: inline-block;
      color: #999;
      padding: 2px;">
图2.6 DC
</div>
</center>
<ul>
<li><p>M0 L sweep</p>
<p>M1 参数不变，M0 W 不变，L 从 0.1u - 10u</p>
<center>
<p><img style="zoom:100%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727195029.jpg"> <br></p>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.7 L0 sweep
</div>
</center></li>
<li><p>M0 W sweep</p>
<p>M1 参数不变，M0 L 不变，W 从 1u - 100u</p>
<center>
<p><img style="zoom:100%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727195039.jpg"> <br></p>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.8 W0 sweep
</div>
</center></li>
<li><p>AC</p>
<ul>
<li><p>Frequency-Gain</p>
<center>
<p><img style="zoom:100%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727195100.jpg"> <br></p>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.9 频率-增益曲线
</div>
</center></li>
<li><p>Frequency-Phase</p>
<center>
<p><img style="zoom:100%; border-radius: 0.3125em; margin: auto;" src="https://pic.zhouyuqian.com/img/20210727195114.jpg"> <br></p>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
图2.10 频率-相位曲线
</div>
</center></li>
</ul></li>
</ul>
<h1 id="共栅极">3. 共栅极</h1>
<blockquote>
<p>TODO</p>
</blockquote>
<h1 id="共源共栅">4. 共源共栅</h1>
<blockquote>
<p>TODO</p>
</blockquote>
]]></content>
      <categories>
        <category>Analog</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
      </tags>
  </entry>
  <entry>
    <title>tinc 安装</title>
    <url>/2021/08/29/tinc/</url>
    <content><![CDATA[<h1 id="what-is-tinc">What is tinc?</h1>
<p>tinc is a Virtual Private Network (VPN) daemon that uses tunnelling
and encryption to create a secure private network between hosts on the
Internet. tinc is Free Software and licensed under the <a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.html">GNU
General Public License</a> version 2 or later. Because the VPN appears
to the IP level network code as a normal network device, there is no
need to adapt any existing software. This allows VPN sites to share
information with each other over the Internet without exposing any
information to others.</p>
<span id="more"></span>
<h1 id="install">Install</h1>
<blockquote>
<p>Ref:</p>
<p><a href="https://github.com/Starrynightzyq/tinc-config">Starrynightzyq/tinc-config</a></p>
<p>https://blog.lvaohui.top/article/202101251558/</p>
<p>Mac:
https://chanix.github.io/TincCookbook/examples/4-HowToInstallTincOnMacOSMojave.html</p>
<p>Ansible 部署(快速部署大规模的 tinc 网络): <a href="https://wener.me/notes/howto/network/tinc-multi-path-failover/#ansible-%E9%83%A8%E7%BD%B2">https://wener.me/notes/howto/network/tinc-multi-path-failover</a></p>
</blockquote>
<h1 id="use">Use</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debug: tincd -n netname -d5 -D</span><br><span class="line">start <span class="built_in">command</span>: <span class="built_in">sudo</span> tincd -n netname</span><br><span class="line">stop <span class="built_in">command</span>: <span class="built_in">sudo</span> tincd -n netname -k</span><br><span class="line">use systemctl <span class="built_in">enable</span> tinc@netname to <span class="built_in">enable</span> individual networks</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>Geek</tag>
        <tag>tinc</tag>
      </tags>
  </entry>
  <entry>
    <title>QNAP NAS 添加 ups 后推送关机通知到其他设备</title>
    <url>/2022/02/25/ups/</url>
    <content><![CDATA[<h1 id="qnap-设置">QNAP 设置</h1>
<p>将 UPS 通过 USB 线连接到 QNAP，设置如图所示：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/202202251256160.png" alt="qnap-ups">
<figcaption aria-hidden="true">qnap-ups</figcaption>
</figure>
<h1 id="pve-设置">PVE 设置</h1>
<ol type="1">
<li><p>打开 PVE 的 shell，安装 NUT 客户端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nut -y</span><br></pre></td></tr></table></figure></li>
<li><p>配置 NUT 客户端：</p>
<p>配置 <code>nut.conf</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nut/nut.conf</span><br></pre></td></tr></table></figure>
<p>移动光标找到 <code>MODE</code> 参数项，将 <code>MODE=</code>
后面修改成如下参数：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">MODE=netclient</span><br></pre></td></tr></table></figure>
<p>配置 <code>upsmon.conf</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nut/upsmon.conf</span><br></pre></td></tr></table></figure>
<p>找到 <code>MONITOR</code> 在下方增加一行：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">MONITOR qnapups@&lt;NAS IP&gt; <span class="number">1</span> admin <span class="number">123456</span> slave</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里坑出现了，大部分 ups 的服务器以 ups 开头（包括群晖），然而 qnap
不是，他是以 <strong>qnapups</strong> 开头。。。。😑</p>
<p>用户名为 <code>admin</code>，密码默认为 <code>123456</code></p>
</blockquote></li>
<li><p>启动nut-client服务，并设置自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart nut-client &amp;&amp; systemctl <span class="built_in">enable</span> nut-client</span><br></pre></td></tr></table></figure></li>
<li><p>测试是否成功连接UPS服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ upsc qnapups@192.168.12.10</span><br><span class="line">Init SSL without certificate database</span><br><span class="line">battery.charge: 79</span><br><span class="line">battery.charge.low: 20</span><br><span class="line">battery.runtime: 1801</span><br><span class="line">battery.type: PbAc</span><br><span class="line">device.mfr: EATON</span><br><span class="line">device.model: SANTAK TG-BOX 850</span><br><span class="line">device.serial: Blank</span><br><span class="line">device.type: ups</span><br><span class="line">driver.name: usbhid-ups</span><br><span class="line">driver.parameter.pollfreq: 30</span><br><span class="line">driver.parameter.pollinterval: 2</span><br><span class="line">driver.parameter.port: /dev/ttyS1</span><br><span class="line">driver.parameter.synchronous: no</span><br><span class="line">driver.version: 2.7.4</span><br><span class="line">driver.version.data: MGE HID 1.39</span><br><span class="line">driver.version.internal: 0.41</span><br><span class="line">input.transfer.high: 264</span><br><span class="line">input.transfer.low: 184</span><br><span class="line">outlet.1.desc: PowerShare Outlet 1</span><br><span class="line">outlet.1.id: 1</span><br><span class="line">outlet.1.status: on</span><br><span class="line">outlet.1.switchable: no</span><br><span class="line">outlet.desc: Main Outlet</span><br><span class="line">outlet.id: 0</span><br><span class="line">outlet.switchable: <span class="built_in">yes</span></span><br><span class="line">output.frequency.nominal: 50</span><br><span class="line">output.voltage: 230.0</span><br><span class="line">output.voltage.nominal: 220</span><br><span class="line">ups.beeper.status: enabled</span><br><span class="line">ups.delay.shutdown: 20</span><br><span class="line">ups.delay.start: 30</span><br><span class="line">ups.firmware: 02.08.0010</span><br><span class="line">ups.load: 13</span><br><span class="line">ups.mfr: EATON</span><br><span class="line">ups.model: SANTAK TG-BOX 850</span><br><span class="line">ups.power.nominal: 850</span><br><span class="line">ups.productid: ffff</span><br><span class="line">ups.serial: Blank</span><br><span class="line">ups.status: OL</span><br><span class="line">ups.timer.shutdown: 0</span><br><span class="line">ups.timer.start: 0</span><br><span class="line">ups.type: offline / line interactive</span><br><span class="line">ups.vendorid: 0463</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status nut-client</span><br><span class="line">...</span><br><span class="line">... Started Network UPS Tools - power device monitor and shutdown controller.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="reference">Reference</h1>
<ol type="1">
<li>https://www.purefish.cc/pve-synology-ups.html</li>
<li>https://blog.cyida.com/posts/ZEK5W9/</li>
<li>https://www.lxg2016.com/54516.html</li>
<li><strong>https://post.smzdm.com/p/av7o5r9n/</strong></li>
<li><strong><a href="https://blog.pengandfan.com/2021/09/10/qnap-nas%E6%B7%BB%E5%8A%A0ups%E5%90%8E%E6%8E%A8%E9%80%81%E5%85%B3%E6%9C%BA%E9%80%9A%E7%9F%A5%E5%88%B0%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87/">https://blog.pengandfan.com/2021/09/10/qnap-nas添加ups后推送关机通知到其他设备</a></strong></li>
</ol>
]]></content>
      <categories>
        <category>NAS</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
        <tag>NAS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVM+VCS+Verdi 基本平台搭建</title>
    <url>/2022/05/05/uvm-1/</url>
    <content><![CDATA[<p>这几天在学习
UVM，一般公司里都有一个完整的验证环境，但是对于个人而言，环境可能就是一道屏障，下文将一步一步的举例子说明
UVM+VCS+Verdi 的 liunx 平台搭建过程（假设你已经安装好 VCS 和
Verdi，安装可以参考我的这篇文章 <a href="https://zhouyuqian.com/2021/03/07/VirtuosoOnUbuntu/#synopsys-vcsverdi">6.
Synopsys VCS+Verdi</a> ）。</p>
<span id="more"></span>
<blockquote>
<p>PS: 我用的版本是：VCS 2016.06, Verdi 2016.06</p>
</blockquote>
<h2 id="准备-uvm-库">准备 UVM 库</h2>
<p>我是从这里下载的：<a href="https://bbs.eetop.cn/thread-481243-1-1.html?_dsign=325ad204">uvm-1.1d.tar.gz
uvm-1.1a.tar.gz</a>.</p>
<p>把 <em>uvm-1.1a.tar.gz</em> 放在linux系统中，放入后在进行解压。得到
<em>uvm-1.1a</em> 文件夹，该路径是库所在路径，放在什么地方无所谓。</p>
<p>在 <em>~/.bashrc</em> 文件中添加 <code>UVM_HOME</code> 变量：</p>
<blockquote>
<p>PS: <strong>注意</strong> bash 和 csh 的写法是不同的，根据自己的
shell 添加对应的环境变量</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash or zsh</span></span><br><span class="line"><span class="built_in">export</span> UVM_HOME=/usr/synopsys/uvm_lib/uvm-1.1a</span><br><span class="line"><span class="comment"># csh or tcsh</span></span><br><span class="line">setenv UVM_HOME /usr/synopsys/uvm_lib/uvm-1.1</span><br></pre></td></tr></table></figure>
<p>在 <code>$(UVM_HOME)/examples</code> 目录下有一个
<em>Makefile.vcs</em> 文件，该文件对于所有验证平台公用，里面主要是对 UVM
库进行编译，自己写的 make 文件里面需要 include 这个文件。</p>
<h2 id="the-first-example">The first example</h2>
<p>将 <code>$(UVM_HOME)/examples/integrated/ubus/examples</code>
文件夹复制到别的地方，然后进入这个新复制的文件夹，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -f Makefile.vcs</span><br></pre></td></tr></table></figure>
<p>因为我 VCS 的环境需要在 make 脚本里配置，所以我对
<em>Makefile.vcs</em> 做了一些修改，修改后的脚本如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> LD_LIBRARY_PATH=$&#123;VERDI_HOME&#125;/share/PLI/VCS/LINUX64</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(UVM_HOME)</span>/examples/Makefile.vcs</span><br><span class="line"></span><br><span class="line">VCS += -full64 \</span><br><span class="line">       -cpp /usr/local/gcc-4.8.5/bin/g++-4.8.5 \</span><br><span class="line">       -cc /usr/local/gcc-4.8.5/bin/gcc-4.8.5</span><br><span class="line"></span><br><span class="line"><span class="section">all: comp run</span></span><br><span class="line"></span><br><span class="line"><span class="section">comp:</span></span><br><span class="line">    <span class="variable">$(VCS)</span> +incdir+../sv \</span><br><span class="line">        ubus_tb_top.sv</span><br><span class="line"></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">    <span class="variable">$(SIMV)</span> +UVM_TESTNAME=test_2m_4s</span><br><span class="line">    <span class="variable">$(CHECK)</span></span><br></pre></td></tr></table></figure>
<p>如果出现如下图的结果，则说明平台已经搭建成功了。</p>
<p><img src="https://pic.zhouyuqian.com/img/202205051904944.png"></p>
<h2 id="more-examples">More examples</h2>
<p>下一篇介绍 axi-uvm 环境的搭建，基于 <a href="https://github.com/marcoz001/axi-uvm">marcoz001/axi-uvm</a>.</p>
<h2 id="reference">Reference</h2>
<p>[1] <a href="https://bbs.eetop.cn/thread-481243-1-1.html">UVM+VCS+Verdi基本平台搭建</a></p>
<p>[2] <a href="https://zhuanlan.zhihu.com/p/138405443">UVM学习-仿真环境的搭建</a></p>
]]></content>
      <categories>
        <category>UVM</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>UVM</tag>
      </tags>
  </entry>
  <entry>
    <title>uvm-2</title>
    <url>/2022/05/15/uvm-2/</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>VCO 中变容二极管的 C-V 曲线仿真</title>
    <url>/2021/04/25/varactor/</url>
    <content><![CDATA[<p><img src="https://pic.zhouyuqian.com/img/20210727233152.png" alt="cross" style="zoom:50%;"></p>
<span id="more"></span>
<h1 id="c-v-曲线仿真">C-V 曲线仿真</h1>
<p>通过 <strong>S 参数仿真</strong>的方法来得到变容二极管的 C-V
曲线。变容二极管使用的是 tsmc65 工艺中的
moscap_rf_nw，其横切面的示意图如上图所示。其中 Ground
端作为控制电压的接入端，Bulk 接地，Gate 端接在电路中，最后的电容是 Gate
和 Bulk 之间的电容。该种接线方法为累积型 MOS 可变电容 (Accumulation NMOS
Varactor)。</p>
<p>其等效电路模型如下图所示：（下图的 Gnode 端应该就是上图的 Ground
端）</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727233204.png" alt="电路模型" style="zoom:50%;"></p>
<p>为了后续说明的方便，将模型简化为下图：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727233217.png" alt="image-20210427212534544" style="zoom:50%;"></p>
<p>在 G 端接入一个 Port，DC 设置为 0，在 S 接入第二个 Port，DC 设置为
vctrl（此时 vctrl 相当于 <span class="math inline">\(V_{SG}\)</span>），然后在 S 参数仿真时，扫描
vctrl，就可以获得变容二极管的 C-V 曲线。</p>
<p>仿真使用的原理图如下：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727233225.png" alt="schematic" style="zoom:33%;"></p>
<p>Port0 和 Port1 的设置如下：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727233235.png" alt="port0" style="zoom:33%;"></p>
<p><img src="https://pic.zhouyuqian.com/img/20210727233245.png" alt="port1" style="zoom:33%;"></p>
<p>Varactor 的参数暂时设置为：WR/LR/GR/BR :
1.6μm/1.6μm/4/2，可以在元件参数设置的窗口里看到电容的 C
为：284fF(VDD)/192(0)/45(-VDD)</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727233253.png" alt="var" style="zoom:33%;"></p>
<p>在 AED 中选择 <strong>sp</strong>，设置如下：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727233301.png" alt="sp" style="zoom:40%;"></p>
<p>求电容的公式为：$imag(Y_{11})/(2f)
$，因此在输出结果中填入如下公式：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name">imag</span>(<span class="name">yp</span>(<span class="number">1</span> <span class="number">1</span> ?result <span class="string">&quot;sp&quot;</span>)) /(<span class="number">2</span>*pi) / <span class="number">2.4e+09</span>)</span><br></pre></td></tr></table></figure>
<p>然后运行仿真，就可以得到 C-V 曲线啦：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233126.svg" alt="cv_br2_gr4">
<figcaption aria-hidden="true">cv_br2_gr4</figcaption>
</figure>
<p>可以看到基本上和之前预测的电容值差不多。</p>
<h1 id="线性度补偿">线性度补偿</h1>
<p>在上图的曲线中，可以观察到电容和控制电压的关系不是线性的，这将直接恶化
VCO 调谐增益的稳定性。为了提高 A-MOS
可变电容的线性度，把可变电容偏置在不同的偏置电压 Vb1、Vb2 和 Vb3
下，然后将它们并联在一起形成可变电容阵列，通过可变电容在不同偏置电压下不同的
C-V 特性的相互补偿，从而获得线性的可变电容 C-V
曲线。结构如下图所示，电阻 R 为偏置电阻，为了减小偏置电阻的热噪声对 VCO
输出相位噪声的影响，一般设置偏置电阻 R 是 LC 谐振腔并联寄生电阻的 10
倍以上。同样，电容 C 用于隔直，避免不同偏置电压对 VCO
输出偏置电压的影响，一般大小设置为可变电容的 10 倍左右。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727233312.png" alt="image-20210427214916852" style="zoom:50%;"></p>
<p>仿真使用的原理图如下：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727233320.png" alt="schematic2" style="zoom:50%;"></p>
<p><strong>偏置0</strong>：当 <span class="math inline">\(V_{b1},V_{b2},V_{b3}\)</span> 都设置为 0 时，C-V
曲线如下（Kc 是 C 的变化率，公式
<code>deriv(C)</code>）。此时相当于直接将 3 个电容并在一起。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233127.svg" alt="cv_nofixed">
<figcaption aria-hidden="true">cv_nofixed</figcaption>
</figure>
<p><strong>偏置1</strong>：当 <span class="math inline">\(V_{b1},V_{b2},V_{b3}\)</span> 分别设置为 0.3, 0.7,
1.1 时，C-V
曲线如下。相较于偏置0的设置，可以看到电容值中心值的控制电压向右移动了，同时变化率变小了，但变化范围没变。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233128.svg" alt="cv_fixed">
<figcaption aria-hidden="true">cv_fixed</figcaption>
</figure>
<p><strong>偏置2</strong>：当 <span class="math inline">\(V_{b1},V_{b2},V_{b3}\)</span> 分别设置为 0.5, 0.8,
1.1 时，C-V
曲线如下。相较于偏置0的设置，可以看到电容值中心值的控制电压继续向右移动，但变化率（1.5）相较于偏置0的变化率（1.2）变大了。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233129.svg" alt="cv_fixed2">
<figcaption aria-hidden="true">cv_fixed2</figcaption>
</figure>
<p><strong>偏置3</strong>：当 <span class="math inline">\(V_{b1},V_{b2},V_{b3}\)</span> 分别设置为 0.1, 0.6,
1.1 时，C-V
曲线如下。可以看到电容值中心值的控制电压想左移动，其变化率（1.0）相较于偏置0的变化率（1.2）变小了。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233130.svg" alt="cv_fixed3">
<figcaption aria-hidden="true">cv_fixed3</figcaption>
</figure>
<p>因此可以得到一个大概的<strong>规律</strong>：</p>
<ul>
<li><p>偏置电压越分散，变化得越平坦，即线性度越高；</p></li>
<li><p>偏置电压的平均值越大，电容值中心值的控制电压越大。</p></li>
</ul>
<p>其实可以想象三条相同变化趋势的 C-V
曲线平移后叠加，在一定范围内，平移越多，叠加后的曲线越平坦。</p>
<h1 id="reference">Reference</h1>
<p>[1] CMOS多模多频小数频率综合器的关键技术研究与实现_廖一龙</p>
<p>[2] <a href="https://comp.cad.cadence.narkive.com/NqQk3p8T/about-varactor-simulation">https://comp.cad.cadence.narkive.com/NqQk3p8T/about-varactor-simulation</a></p>
<p>[3] <a href="https://community.cadence.com/cadence_blogs_8/b/rf/posts/tip-of-the-week-when-to-use-harmonic-balance-engine-vs-shooting-newton-engine">Tip
of the Week: When should I use the pss/qpss Harmonic Balance vs.
Shooting Newton Engine?</a></p>
<p>[4] <a href="https://community.cadence.com/cadence_blogs_8/b/rf/posts/guidelines-for-simulating-oscillators-phase-noise-simulations">Tip
of the Week: Guidelines for simulating oscillators - phase noise
simulations</a></p>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>VCO 参数选取及仿真</title>
    <url>/2021/05/08/vco-param/</url>
    <content><![CDATA[<h1 id="参数计算与选取">参数计算与选取</h1>
<h2 id="电感的等效并联电阻-r_p">电感的等效并联电阻 <span class="math inline">\(R_P\)</span></h2>
<blockquote>
<p><LC 振荡回路等效电路图></LC></p>
</blockquote>
<p>可以使用 DC 仿真及计算一个大概的 <span class="math inline">\(R_S\)</span>，然后通过公式计算出等效并联电阻 <span class="math inline">\(R_P\)</span>： <span class="math display">\[
R_P  \approx \frac{Q_L^2}{R_S} \\
\approx \frac{L^2\omega^2}{R_S}
\]</span> 根据 DC 仿真，得到 <span class="math inline">\(R_S=
1.98\Omega\)</span>，设定 <span class="math inline">\(f=2.4G\)</span>，电感 <span class="math inline">\(L = 4nH\)</span>，得到 <span class="math inline">\(R_P = 122\Omega\)</span>。</p>
<h2 id="负阻管-g_m">负阻管 <span class="math inline">\(g_m\)</span></h2>
<p><span class="math inline">\(g_m\)</span> 的选取需要保证满足： <span class="math display">\[
R_P&gt;1/g_m
\]</span> 为了更容易起振，选择 <span class="math inline">\(g_m &gt;
2/R_P\)</span>，因此需要 <span class="math inline">\(g_m &gt;
16mS\)</span>。</p>
<h2 id="电容">电容</h2>
<p>LC 振荡器的频率为： <span class="math display">\[
f=\frac{1}{2\pi\sqrt{LC}}
\]</span> 电感 <span class="math inline">\(L = 4nH\)</span>，<span class="math inline">\(f=2.4G\)</span>，则电容 <span class="math inline">\(C\approx 1.1p\)</span>。</p>
<p>假设 <span class="math inline">\(K_{VCO} =
10MHz/V\)</span>，则可变电容的变化范围： <span class="math display">\[
\Delta C = \frac{1}{L(2\pi f_1)^2} -\frac{1}{L(2\pi f_2)^2} \approx
\frac{1}{L(2\pi)^2}\frac{2\Delta f}{f^3} \approx 1fF
\]</span></p>
<h1 id="output-frequency-output-power-phase-noise-仿真">Output
Frequency, Output Power, Phase Noise 仿真</h1>
<blockquote>
<p>仿真过程参考了
<code>SpectreRF Workshop VCO Design Using SpectreRF</code>，该文件位于
<em><SPECTRE install dir>/tools.lnx86/spectre/examples/SpectreRF_workshop/rfworkshop.tar.Z</SPECTRE></em></p>
</blockquote>
<h2 id="电路原理图">电路原理图</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727172519.png" alt="vco-schematic">
<figcaption aria-hidden="true">vco-schematic</figcaption>
</figure>
<p>电路原理图如上图所示，可变电容部分使用了三个可变电容并联并给不同的偏置的方法，用来提高可变电容的线性度，其结构如下图所示。</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727172647.png" alt="image-20210509152604001" style="zoom:33%;"></p>
<blockquote>
<p>开关电容阵列结构还没有做好</p>
</blockquote>
<h2 id="psspnoise-仿真设置">pss+pnoise 仿真设置</h2>
<p>pss 仿真设置如下图所示：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727172740.png" alt="pss1" style="zoom:33%;"></p>
<p><img src="https://pic.zhouyuqian.com/img/20210727172754.png" alt="pss2" style="zoom:33%;"></p>
<p><strong>Beat Frequency:</strong> 设置 VCO 的工作频率；</p>
<p><strong>Number of harmonics : </strong> 设置为 10；</p>
<p><strong>stop time (stab) :</strong> 设置为 120n；</p>
<p><strong>Oscillator : </strong> 勾选 Oscillator，分别设置 node+ 和
node- 为 VCO 的正负输出端口；</p>
<p><strong>Sweep : </strong> 可以设置变容二极管的控制电压扫描范围；</p>
<p>pnoise 仿真设置如下：</p>
<p><img src="https://pic.zhouyuqian.com/img/20210727172815.png" alt="pnoise" style="zoom:33%;"></p>
<p><strong>Sweeptype : </strong>设置为 relative；</p>
<p><strong>Output Frequency Sweep Range : </strong> 设置为 1K -
10M；</p>
<p><strong>Noise Type : </strong>选择 time average - ALL</p>
<h2 id="仿真结果查看">仿真结果查看</h2>
<h3 id="瞬态输出">瞬态输出</h3>
<p>选择 <strong>Results — Direct Plot — Main Form — tstab</strong></p>
<p><img src="https://pic.zhouyuqian.com/img/20210727172835.png" alt="tstab" style="zoom:33%;"></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727172520.svg" alt="tstab">
<figcaption aria-hidden="true">tstab</figcaption>
</figure>
<h3 id="输出功率">输出功率</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727172851.png" alt="power_tb" style="zoom:33%;"></p>
<p>选择 <strong>Different Nets (specify R)</strong>
并设置好负载，输出选择 <strong>dBm</strong>。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727172521.svg" alt="power">
<figcaption aria-hidden="true">power</figcaption>
</figure>
<h3 id="phase-noise">Phase Noise</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727172927.png" style="zoom:33%;"></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727172522.svg" alt="phasenoise">
<figcaption aria-hidden="true">phasenoise</figcaption>
</figure>
<h3 id="am-noise-pm-noise">AM noise / PM noise</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727172956.png" alt="AM" style="zoom:33%;"></p>
<p><img src="https://pic.zhouyuqian.com/img/20210727173012.png" alt="PM" style="zoom:33%;"></p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727172523.svg" alt="AMPMnoise">
<figcaption aria-hidden="true">AMPMnoise</figcaption>
</figure>
<h3 id="频率随-vctrl-变化及-kvco">频率随 Vctrl 变化及 KVCO</h3>
<p><img src="https://pic.zhouyuqian.com/img/20210727173031.png" alt="vrtrl" style="zoom:33%;"></p>
<p>KVCO 使用 <code>deriv</code> 函数计算得到。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727172524.svg" alt="vctrl">
<figcaption aria-hidden="true">vctrl</figcaption>
</figure>
<h1 id="电路优化">电路优化</h1>
<blockquote>
<ol type="1">
<li>调节电流，让振荡器工作在电压受限区和电流受限区之间；</li>
<li>相位噪声优化；</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>PLL</category>
      </categories>
      <tags>
        <tag>IC_design</tag>
        <tag>Analog</tag>
        <tag>PLL</tag>
      </tags>
  </entry>
  <entry>
    <title>Verilog Vim 配置</title>
    <url>/2025/04/10/vim-verilog/</url>
    <content><![CDATA[<h1 id="格式化-verilog-的信号声明">格式化 Verilog 的信号声明</h1>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">command! -<span class="built_in">range</span> -nargs=<span class="number">0</span> Vdfmt <span class="keyword">call</span> FormatVerilogSignalDeclaration()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function!</span> <span class="title">FormatVerilogSignalDeclaration</span><span class="params">()</span></span><br><span class="line">    <span class="comment">&quot; 获取 visual 选区</span></span><br><span class="line">    <span class="keyword">let</span> start_pos = <span class="built_in">getpos</span>(<span class="string">&quot;&#x27;&lt;&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> end_pos = <span class="built_in">getpos</span>(<span class="string">&quot;&#x27;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">&quot; 获取选中的所有行</span></span><br><span class="line">    <span class="keyword">let</span> lines = <span class="built_in">getline</span>(start_pos[<span class="number">1</span>], end_pos[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">&quot; 步骤1：将每一行行首的第一个 wire 或 reg 前面的空格替换为 3 个空格</span></span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(lines))</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">line</span> = lines[i]</span><br><span class="line">        <span class="keyword">let</span> new_line = <span class="keyword">substitute</span>(<span class="built_in">line</span>, <span class="string">&#x27;^\s*\(wire\|reg\)&#x27;</span>, <span class="string">&#x27;   \1&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> lines[i] = new_line</span><br><span class="line">    <span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&quot; 步骤2：将每一行行首的第一个 input 或 output 或 inout 前面的空格替换为 3 个空格</span></span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(lines))</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">line</span> = lines[i]</span><br><span class="line">        <span class="keyword">let</span> new_line = <span class="keyword">substitute</span>(<span class="built_in">line</span>, <span class="string">&#x27;^\s*\(input\|output\|inout\)&#x27;</span>, <span class="string">&#x27;   \1&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> lines[i] = new_line</span><br><span class="line">    <span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&quot; 步骤3：对齐 &#x27;wire&#x27; 或 &#x27;reg&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(lines))</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">line</span> = lines[i]</span><br><span class="line">        <span class="keyword">let</span> new_line1 = <span class="keyword">substitute</span>(<span class="built_in">line</span>, <span class="string">&#x27;input\s\+wire&#x27;</span>, <span class="string">&#x27;input  wire&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> new_line2 = <span class="keyword">substitute</span>(new_line1, <span class="string">&#x27;output\s\+wire&#x27;</span>, <span class="string">&#x27;output wire&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> new_line3 = <span class="keyword">substitute</span>(new_line2, <span class="string">&#x27;output\s\+reg&#x27;</span>, <span class="string">&#x27;output reg&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> lines[i] = new_line3</span><br><span class="line">    <span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&quot; 步骤4：对齐 &#x27;[&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(lines))</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">line</span> = lines[i]</span><br><span class="line">        <span class="keyword">let</span> new_line1 = <span class="keyword">substitute</span>(<span class="built_in">line</span>, <span class="string">&#x27;wire\s\+\[&#x27;</span>, <span class="string">&#x27;wire [&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> new_line2 = <span class="keyword">substitute</span>(new_line1, <span class="string">&#x27;reg\s\+\[&#x27;</span>, <span class="string">&#x27;reg  [&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> lines[i] = new_line2</span><br><span class="line">    <span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&quot; 步骤5：删除 &#x27;[&#x27; 与 &#x27;]&#x27; 之间的空格</span></span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(lines))</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">line</span> = lines[i]</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">line</span> = <span class="keyword">substitute</span>(<span class="built_in">line</span>, <span class="string">&#x27;\[\(\%(\]\@!.\)*\)\]&#x27;</span>, </span><br><span class="line">                    \ <span class="string">&#x27;\=printf(&quot;[%s]&quot;, substitute(submatch(1), &quot; &quot;, &quot;&quot;, &quot;g&quot;))&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> lines[i] = <span class="built_in">line</span></span><br><span class="line">    <span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&quot; 更新选区中的行</span></span><br><span class="line">    <span class="keyword">call</span> <span class="built_in">setline</span>(start_pos[<span class="number">1</span>], lines)</span><br><span class="line"></span><br><span class="line">    <span class="comment">&quot; 步骤6：使用 :Tabularize 按照 wire 或 reg 之后的第一个单词对齐</span></span><br><span class="line">    <span class="keyword">execute</span> <span class="string">&quot;normal! gv&quot;</span></span><br><span class="line">    <span class="keyword">execute</span> <span class="string">&quot;:&#x27;&lt;,&#x27;&gt;Tabularize /\\(wire\\|reg\\)\\s*\\(\\[.*\\]\\)\\?\\s*\\zs\\w\\+/&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&quot; 步骤7：使用 :Tabularize 对齐 &#x27;;&#x27; 或 &#x27;,&#x27;</span></span><br><span class="line">    <span class="keyword">execute</span> <span class="string">&quot;normal! gv&quot;</span></span><br><span class="line">    <span class="keyword">execute</span> <span class="string">&quot;:&#x27;&lt;,&#x27;&gt;Tabularize /\\(;\\|,\\)/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endfunction</span></span><br></pre></td></tr></table></figure>
<p>在 visual 模式下，选中需要格式化的信号声明，然后执行
<code>:Vdfmt</code> 命令即可。</p>
]]></content>
      <categories>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim， Verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 命令记录</title>
    <url>/2021/09/27/vim/</url>
    <content><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9f/Vimlogo.svg/1024px-Vimlogo.svg.png" alt="Vim" style="zoom:33%;"></p>
<span id="more"></span>
<h1 id="键盘操作">键盘操作</h1>
<h2 id="移动光标">移动光标</h2>
<h3 id="简单的移动">简单的移动</h3>
<p><code>h</code>, <code>j</code>, <code>k</code>, <code>l</code></p>
<p>配合数字：</p>
<p><code>2j</code> 表示向下移动2行</p>
<h3 id="利用查找">利用查找</h3>
<p><code>/hello</code></p>
<p>向后查找关键词 hello，回车就到了后面第一个 hello 处。</p>
<p><code>?hello</code></p>
<p>向前查找关键词 hello。</p>
<h3 id="以word为单位进行移动">以word为单位进行移动</h3>
<p><code>w</code>, <code>b</code></p>
<p>同理，配合数字:</p>
<p><code>2w</code> 表示向后移动2个word；</p>
<p><code>2b</code> 表示向前移动2个word；</p>
<p><code>2e</code> 表示向后移动2个word，但是会移动到word字符之后。</p>
<p>如果想忽略标点符号的word，就用大写</p>
<p><code>W</code>, <code>B</code>, <code>E</code></p>
<h3 id="移动到行首行尾适合行内移动">移动到行首行尾（适合行内移动）</h3>
<p><code>^</code>
表示移动到行首第一个word，即行首有空格的情况，不会移动到空格之前，而是移动到空格之后，第一个word之前；</p>
<p><code>0</code>
表示移动到行首；即行首有空格的情况，会移动到空格之前；</p>
<p><code>$</code>
表示移动到行末；即行末有空格的情况，会移动到空格之后；</p>
<p>如果想移动到行末最后一个非空白的字符处，就输入命令
<code>$b</code>。一般来说，写代码，行末不会有空格存在的。这条应用没多大意义。</p>
<h3 id="移动到文本开头和文本结尾适合大范围移动">移动到文本开头和文本结尾（适合大范围移动）</h3>
<p><code>gg</code> 表示移动到文本开头；</p>
<p><code>G</code> 表示移动到文本结尾；</p>
<h3 id="利用行号移动到某一行适合大范围移动">利用行号移动到某一行（适合大范围移动）</h3>
<p><code>:123</code> 表示移动到第123行；</p>
<h2 id="翻页">翻页</h2>
<h3 id="整页翻页">整页翻页</h3>
<p><code>ctrl-f</code> f 就是 forword</p>
<p><code>ctrl-b</code> b 就是 backward</p>
<h3 id="翻半页">翻半页</h3>
<p><code>ctrl-d</code> d 就是 down</p>
<p><code>ctrl-u</code> u 就是 up</p>
<h2 id="插入">插入</h2>
<p><code>i</code> 实现的是在光标之前的插入；</p>
<p><code>I</code> 大写的i实现在光标所在行的最前面插入；</p>
<p><code>a</code> 实现在光标后插入；</p>
<p><code>A</code> 实现在光标所在行的行尾插入；</p>
<p><code>o</code> 实现在光标所在行的上方插入新行；</p>
<p><code>O</code> 是现在光标坐在行的下方插入新行；</p>
<h2 id="窗口分割">窗口分割</h2>
<h3 id="分屏启动-vim">分屏启动 vim</h3>
<ol type="1">
<li><p>使用大写的 O 参数来垂直分屏。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim -On file1 file2 ...</span><br></pre></td></tr></table></figure></li>
<li><p>使用小写的 o 参数来水平分屏。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim -on file1 file2 ...</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="关闭分屏">关闭分屏</h3>
<ol type="1">
<li><p>关闭当前窗口。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">Ctrl+W <span class="keyword">c</span></span><br></pre></td></tr></table></figure></li>
<li><p>关闭当前窗口，如果只剩最后一个了，则退出Vim。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">Ctrl+W <span class="selector-tag">q</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="分屏">分屏</h3>
<ol type="1">
<li><p>上下分割当前打开的文件。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> s</span><br></pre></td></tr></table></figure></li>
<li><p>上下分割，并打开一个新的文件。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">sp</span> filename</span><br></pre></td></tr></table></figure></li>
<li><p>左右分割当前打开的文件。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> v</span><br></pre></td></tr></table></figure></li>
<li><p>左右分割，并打开一个新的文件。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:vsp</span> filename</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="移动光标-1">移动光标</h3>
<p>Vim 中的光标键是 <code>h</code>, <code>j</code>, <code>k</code>,
<code>l</code> (左，上，下，右)，要在各个屏间切换，只需要先按一下
<code>Ctrl+W</code></p>
<ol type="1">
<li><p>把光标移到</p>
<p>右边的屏。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> l</span><br></pre></td></tr></table></figure></li>
<li><p>把光标移到</p>
<p>左边的屏中。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Ctrl+W <span class="built_in">h</span></span><br></pre></td></tr></table></figure></li>
<li><p>把光标移到</p>
<p>上边的屏中。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> k</span><br></pre></td></tr></table></figure></li>
<li><p>把光标移到</p>
<p>下边的屏中。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> j</span><br></pre></td></tr></table></figure></li>
<li><p>把光标移到</p>
<p>下一个的屏中。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> w</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="移动分屏">移动分屏</h3>
<p>这个功能还是使用了Vim的光标键，只不过都是大写。当然了，如果你的分屏很乱很复杂的话，这个功能可能会出现一些非常奇怪的症状。</p>
<ol type="1">
<li><p>向右移动。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> L</span><br></pre></td></tr></table></figure></li>
<li><p>向左移动</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Ctrl+W <span class="built_in">H</span></span><br></pre></td></tr></table></figure></li>
<li><p>向上移动</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">Ctrl</span><span class="operator">+</span><span class="variable">W</span> <span class="built_in">K</span></span><br></pre></td></tr></table></figure></li>
<li><p>向下移动</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> J</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="屏幕尺寸">屏幕尺寸</h3>
<p>下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用
<code>Ctrl+W &lt;</code> 或是
<code>Ctrl+W &gt;</code>，但这可能需要最新的版本才支持。</p>
<ol type="1">
<li><p>让所有的屏都有一样的高度。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> =</span><br></pre></td></tr></table></figure></li>
<li><p>增加高度。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> +</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:reszie -5</span><br></pre></td></tr></table></figure></li>
<li><p>减少高度。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">W</span> -</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:reszie +5</span><br></pre></td></tr></table></figure></li>
<li><p>改变宽度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:vertical reszie +5</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="全局替换">全局替换</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:%s/old/new/g</span><br></pre></td></tr></table></figure>
<h2 id="多行注释">多行注释</h2>
<h3 id="插入注释">插入注释</h3>
<p>用 <code>v</code> 进入virtual模式；</p>
<p>用上下键选中需要注释的行数；</p>
<p>按 <code>Control+v</code>（win下面
<code>ctrl+q</code>）进入列模式；</p>
<p>按大写 <code>I</code> 进入插入模式，输入注释符 "#" 或者是
"//"，然后立刻按下 <code>ESC</code>（两下）。</p>
<h3 id="取消注释">取消注释</h3>
<p><code>Ctrl + v</code>
进入块选择模式，选中你要删除的行首的注释符号，注意 "//"
要选中两个，选好之后按 <code>d</code> 即可删除注释。</p>
<h2 id="撤销-反撤销">撤销 &amp; 反撤销</h2>
<p><code>u</code> 撤销；</p>
<p><code>Ctrl + r</code> 反撤销；</p>
<h2 id="快速删除">快速删除</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>删除光标所在后面的字符</td>
</tr>
<tr>
<td>X</td>
<td>删除光标所在前面的字符</td>
</tr>
<tr>
<td>d+e</td>
<td>删除光标所在位置到本单词末尾</td>
</tr>
<tr>
<td>d+E</td>
<td>删除光标所在位置到本单词末尾包括标点符号</td>
</tr>
<tr>
<td>d+b</td>
<td>删除光标所在位置到前面单词</td>
</tr>
<tr>
<td>d+B</td>
<td>删除光标所在位置到前面单词包括标点符号</td>
</tr>
<tr>
<td>d+d</td>
<td>删除一整行</td>
</tr>
<tr>
<td>d+0</td>
<td>删除光标所在位置到本行开头</td>
</tr>
<tr>
<td>d+$</td>
<td>删除光标所在位置到本行末尾</td>
</tr>
</tbody>
</table>
<h2 id="复制">复制</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>yy</td>
<td>复制当前行</td>
</tr>
<tr>
<td>nyy</td>
<td>从当前行开始复制n行</td>
</tr>
<tr>
<td>dd</td>
<td>剪切当前行</td>
</tr>
</tbody>
</table>
<h2 id="移动行">移动行</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>:m +1</td>
<td>下移 1 行</td>
</tr>
<tr>
<td>:m -2</td>
<td>向上移动 1 行</td>
</tr>
<tr>
<td>:m 3</td>
<td>将行移动到第 3 行之后</td>
</tr>
</tbody>
</table>
<blockquote>
<p>PS：</p>
<p>可以用 <code>v</code> 选中多行后再移动</p>
</blockquote>
<h2 id="查看保存的版本和已编辑的相同文件的差异">查看保存的版本和已编辑的相同文件的差异</h2>
<p><code>:w !diff % -</code></p>
<h2 id="重新载入文件刷新文件">重新载入文件/刷新文件</h2>
<blockquote>
<p>在 git 提交后，可以用这个命令刷新文件，刷新 gitdiff 的高亮</p>
</blockquote>
<ol type="1">
<li><p>重新载入当前文件：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:e</span><br><span class="line">:e! <span class="comment"># 放弃当前修改，强制重新载入</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>重新载入所有打开的文件：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:bufdo e</span><br><span class="line">:bufdo !e <span class="comment"># 放弃当前修改，强制重新载入</span></span><br></pre></td></tr></table></figure></p></li>
</ol>
<h1 id="配置">配置</h1>
<h2 id="关闭-gvim-的声音闪烁">关闭 gVim 的声音、闪烁</h2>
<p>在 <code>~/.vimrc</code> 中添加如下配置：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> vb t_vb=</span><br><span class="line"><span class="keyword">au</span> GuiEnter * <span class="keyword">set</span> t_vb=</span><br></pre></td></tr></table></figure>
<p>就要在 vim 中使用命令 <code>:help vb</code> 查看 visual bell
的帮助。</p>
<blockquote>
<p>ref: <a href="https://blog.csdn.net/zcube/article/details/44131925">windows下关闭gvim叮叮叮和闪屏</a></p>
</blockquote>
<h1 id="插件">插件</h1>
<h2 id="插件管理-vim-plug">插件管理 <a href="https://github.com/junegunn/vim-plug">vim-plug</a></h2>
<blockquote>
<p>Reference:</p>
<p>https://vimjc.com/vim-plug.html</p>
</blockquote>
<h3 id="install">Install</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>
<h3 id="安装插件">安装插件</h3>
<p>安装插件，只需要将插件写在 <em>.vimrc</em> 内，然后在 vim 中使用
<code>:PlugInstall</code> 命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source ~/.vim/vim-init/init.vim</span></span><br><span class="line">call plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line">Plug <span class="string">&#x27;HonkW93/automatic-verilog&#x27;</span></span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure>
<h3 id="离线安装插件">离线安装插件</h3>
<ol type="1">
<li>先将插件下载后放在 <code>~/.vim/bundles</code> 目录下，注意要用
<code>git clone</code>
命令下载，而不是直接下载，否则下一步安装会失败；</li>
<li>在vim里运行 <code>:PlugInstall</code>
命令，即可完成插件的安装。</li>
</ol>
<h3 id="删除插件">删除插件</h3>
<p>删除插件，只需要将写在 <em>.vimrc</em> 配置文件内的插件删除，重启 vim
并执行命令 <code>:PlugClean</code> 即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call plug#begin(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure>
<p>保存在 vim 中使用 <code>:PlugClean</code>:</p>
<h2 id="一个好用的vim配置模板-vim-init">一个好用的vim配置模板 <a href="https://github.com/Starrynightzyq/vim-init">vim-init</a></h2>
<p>轻量级 Vim 配置框架，来自 <a href="https://github.com/skywind3000/vim-init">skywind3000</a>，添加了
<a href="https://github.com/Starrynightzyq/automatic-verilog">automatic-verilog</a>。</p>
<h2 id="快速注释-preservimnerdcommenter">快速注释 <a href="https://github.com/preservim/nerdcommenter">preservim/nerdcommenter</a></h2>
<p>常用快捷键：</p>
<ul>
<li>注释/取消注释：<code>&lt;leader&gt;c&lt;space&gt;</code></li>
<li>左对齐注释：<code>&lt;leader&gt;cl</code></li>
<li>取消注释：<code>&lt;leader&gt;cu</code></li>
</ul>
]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>Geek</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>xrdp</title>
    <url>/2021/04/02/xrdp/</url>
    <content><![CDATA[<blockquote>
<p>reference：</p>
<p>https://www.myfreax.com/how-to-install-xrdp-on-ubuntu-18-04/</p>
<p>https://blog.csdn.net/weixin_45579994/article/details/112381567</p>
</blockquote>
<h1 id="安装-xrdp">安装 Xrdp</h1>
<p>安装 xfce 桌面环境：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sudo</span> apt-<span class="meta">get</span> install xfce4 xfce4-goodies xorg dbus-<span class="built_in">x11</span> <span class="built_in">x11</span>-xserver-utils</span><br></pre></td></tr></table></figure>
<p>或者安装 xubuntu 环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install xubuntu-desktop</span><br></pre></td></tr></table></figure>
<p>再安装 xrdp：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install xrdp</span><br><span class="line"><span class="built_in">sudo</span> systemctl status xrdp</span><br></pre></td></tr></table></figure>
<p>默认情况下，Xrdp
使用<code>/etc/ssl/private/ssl-cert-snakeoil.key</code>,它仅仅对“ssl-cert”
用户组成语可读。运行下面的命令，将<code>xrdp</code>用户添加到这个用户组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo adduser xrdp ssl-cert</span><br></pre></td></tr></table></figure>
<p>重启 Xrdp 服务，使得修改生效：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart xrdp</span><br></pre></td></tr></table></figure>
<h1 id="配置xrdp"><del>配置Xrdp</del></h1>
<p>Xrdp配置文件位于 <code>/etc/xrdp</code> 目录中。对于基本的 Xrdp
连接，我们只需要配置 Xrdp 即可使用 Xfce。为此，打开以下文件：</p>
<p><code>/etc/xrdp/xrdp.ini</code></p>
<p>在文件末尾添加以下行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> startxfce4</span><br></pre></td></tr></table></figure>
<p>保存文件并重新启动Xrdp服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart xrdp</span><br></pre></td></tr></table></figure>
<h1 id="配置-xrdpnew">配置 Xrdp（new）</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo xfce4-session &gt; ~/.xsession</span><br></pre></td></tr></table></figure>
<h1 id="配置防火墙">配置防火墙</h1>
<p>默认情况下，Xrdp侦听所有接口上的端口<code>3389</code>。如果您在Ubuntu服务器上运行<a href="https://www.myfreax.com/how-to-setup-a-firewall-with-ufw-on-ubuntu-18-04/">防火墙</a>（应始终这样做），则需要添加一条规则，以启用Xrdp端口上的流量。</p>
<p>要允许从特定的IP地址或IP范围访问Xrdp服务器，在此示例<code>192.168.1.0/24</code>中，请运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ufw allow from 192.168.1.0/24 to any port 3389</span><br></pre></td></tr></table></figure>
<p>如果您想允许从任何地方访问（出于安全原因强烈建议），请运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ufw allow 3389</span><br></pre></td></tr></table></figure>
<p>为了提高安全性，您可以考虑将Xrdp设置为仅在本地主机上侦听，并创建一个<a href="https://www.myfreax.com/how-to-setup-ssh-tunneling/">SSH隧道</a>，该隧道将安全地将流量从端口<code>3389</code>上的本地计算机转发到同一端口上的服务器。另一个安全选项是<a href="https://www.myfreax.com/how-to-set-up-an-openvpn-server-on-ubuntu-18-04/">安装OpenVPN</a>并通过专用网络连接到Xrdp服务器。</p>
<h1 id="提高安全性ssh-tunnel">提高安全性：SSH Tunnel</h1>
<p>在 client 上运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L 3380:localhost:3389 xrdp-server</span><br></pre></td></tr></table></figure>
<p>表示通过 ssh tunnel 将本地的 3380 端口转发到远程服务器的 3389
端口。此时服务器上可以配置防火墙，关闭 3389 端口，只留下 ssh 端口。</p>
<p>在 client 上连接的时候服务器地址填写：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">localhost</span>:<span class="number">3380</span></span><br></pre></td></tr></table></figure>
<h1 id="问题-远程桌面黑屏">问题： 远程桌面黑屏</h1>
<p>解决方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">touch .<span class="property">xsession</span></span><br><span class="line">echo xfce4-session &gt; ~/.<span class="property">xsession</span></span><br><span class="line">sudo chown <span class="attr">username</span>:username .<span class="property">xsession</span></span><br></pre></td></tr></table></figure>
<p>如果还是黑屏，重启一下试试。</p>
<h1 id="问题2键盘鼠标没反应">问题2：键盘鼠标没反应</h1>
<blockquote>
<p>https://github.com/neutrinolabs/xorgxrdp/issues/164</p>
</blockquote>
<p>The fix for me was to add Option "CoreKeyboard" and Option
"CorePointer" to the inputdevices in /etc/X11/xrdp/xorg.conf since the
inputdevices in the serverlayout section are apparently ignored so no
core pointer and keyboard exists, which leads to forced default devices.
No idea why this is suddenly the case, it worked fine on ubuntu 18.04,
but broke for me in 20.04.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Section <span class="string">&quot;InputDevice&quot;</span></span><br><span class="line">    Identifier <span class="string">&quot;xrdpKeyboard&quot;</span></span><br><span class="line">    Driver <span class="string">&quot;xrdpkeyb&quot;</span></span><br><span class="line">    Option <span class="string">&quot;CoreKeyboard&quot;</span></span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section <span class="string">&quot;InputDevice&quot;</span></span><br><span class="line">    Identifier <span class="string">&quot;xrdpMouse&quot;</span></span><br><span class="line">    Driver <span class="string">&quot;xrdpmouse&quot;</span></span><br><span class="line">    Option <span class="string">&quot;CorePointer&quot;</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>
<h1 id="问题3色彩管理设备-color-managed-device-弹窗">问题3：“色彩管理设备” /
“color managed device” 弹窗</h1>
<blockquote>
<p>https://blog.csdn.net/wu_weijie/article/details/108481456</p>
</blockquote>
<p>创建文件
<em>/etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla</em>
并写入内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Allow Colord all Users]</span><br><span class="line">Identity=unix-user:*</span><br><span class="line">Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile</span><br><span class="line">ResultAny=no</span><br><span class="line">ResultInactive=no</span><br><span class="line">ResultActive=yes</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>ZFS on Ubuntu</title>
    <url>/2021/04/02/zfs/</url>
    <content><![CDATA[<h1 id="安装">安装</h1>
<blockquote>
<p>https://openzfs.github.io/openzfs-docs/Getting%20Started/Ubuntu/index.html#installation</p>
<p>https://manpages.debian.org/unstable/zfsutils-linux/zfs-mount-generator.8.en.html</p>
</blockquote>
<h1 id="创建-zpool">创建 zpool</h1>
<p>先查看硬盘的 id</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al /dev/disk/by-id</span><br></pre></td></tr></table></figure>
<p>创建了一个名为 tank 的新池，mirror格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> zpool create tank mirror /dev/disk/by-id/xxxxxxx1 /dev/disk/by-id/xxxxxxx2</span><br></pre></td></tr></table></figure>
<p>查看存储池列表</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">zfs list</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233648.png" alt="截屏2021-04-02 上午10.24.51">
<figcaption aria-hidden="true">截屏2021-04-02 上午10.24.51</figcaption>
</figure>
<p>查看存储池的状态信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zpool status tank</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233649.png" alt="截屏2021-04-02 上午10.26.21">
<figcaption aria-hidden="true">截屏2021-04-02 上午10.26.21</figcaption>
</figure>
<h2 id="其他命令">其他命令：</h2>
<p>显示 ZFS 存储池命令历史记录 <code>zpool history</code></p>
<p>查看 ZFS 存储池的 I/O 统计信息 <code>zpool iostat</code></p>
<p>销毁存储池 <code>zpool destroy zpoolname</code></p>
<p>向存储池添加设备
<code>zpool add tank c2t1d0 #向存储池tank中添加设备</code></p>
<h2 id="数据压缩">数据压缩</h2>
<p>数据压缩默认是关闭的，使用如下命令打开：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs <span class="built_in">set</span> compression=lz4 tank</span><br></pre></td></tr></table></figure>
<h1 id="zfs-文件系统">ZFS 文件系统</h1>
<h2 id="创建文件系统">创建文件系统</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs create tank/home</span><br><span class="line"><span class="built_in">sudo</span> zfs create -o mountpoint=/home/EDA tank/EDA</span><br></pre></td></tr></table></figure>
<p>在 tank 中创建了一个名为 home 的文件系统，如果新文件系统创建成功，则
ZFS 会自动挂载该文件系统。</p>
<h2 id="销毁文件系统">销毁文件系统</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs destroy tank/home <span class="comment"># 销毁tank/home 文件系统</span></span><br></pre></td></tr></table></figure>
<p>如果要销毁的文件系统处于繁忙状态而无法取消挂载，则 zfs destroy
命令将失败。要销毁活动文件系统，请使用 -f
选项。由于此选项可取消挂载、取消共享和销毁活动文件系统，从而导致意外的应用程序行为，因此请谨慎使用此选项。</p>
<h2 id="重命名文件系统">重命名文件系统</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs rename tank/test2 tank/testrename <span class="comment"># 将文件系统 tank/test2 重命名为 /tankrename</span></span><br></pre></td></tr></table></figure>
<h2 id="将-zfs-文件系统挂载到-home"><sub></sub>~将 ZFS 文件系统挂载到
/home<sub></sub>~</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rsync -avh /home/* /tank/home</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /home</span><br><span class="line"><span class="built_in">sudo</span> zfs <span class="built_in">set</span> mountpoint=/home tank/home</span><br></pre></td></tr></table></figure>
<p>使用 zfs-mount-generator 工具</p>
<blockquote>
<p>https://manpages.ubuntu.com/manpages/focal/man8/zfs-mount-generator.8.html</p>
</blockquote>
<h2 id="迁移用户目录">迁移用户目录</h2>
<p>用 <code>zfs list</code> 命令可以看到用户目录是在
<code>rpool/USERDATA</code> 下的：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233650.png" alt="截屏2021-04-02 下午3.19.58">
<figcaption aria-hidden="true">截屏2021-04-02 下午3.19.58</figcaption>
</figure>
<p>我想把他们迁移到 HDD 硬盘的存储池 <code>tank</code>
里，直接修改挂载点的方法是不行的，新建一个用户后挂载点还会在原来的
<code>rpool/USERDATA</code> 下，在<a href="https://github.com/ubuntu/zsys/issues/132">此处</a>找到了方法。</p>
<ul>
<li>create your pool2/USERDATA/ with the same dataset name than on the
first pool</li>
<li>ensure you have the same properties and <strong>user
properties</strong> set on that dataset</li>
<li>do a zfs send/recv between the 2 datasets Then, once ready, remove
the second dataset.</li>
<li>If you delete rpool/USERDATA, then the new users will be created
under secondarypool/USERDATA!</li>
</ul>
<ol type="1">
<li><p>创建快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> zfs snapshot -r rpool/USERDATA@now</span><br></pre></td></tr></table></figure></li>
<li><p>send/recv</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> zfs send -R rpool/USERDATA@now | <span class="built_in">sudo</span> zfs receive -F tank/USERDATA</span><br></pre></td></tr></table></figure>
<p>这时可以看到 <code>tank/USERDATA</code> 和
<code>rpool/USERDATA</code> 的结构是相同的：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727233651.png" alt="截屏2021-04-02 下午3.32.16">
<figcaption aria-hidden="true">截屏2021-04-02 下午3.32.16</figcaption>
</figure></li>
<li><p>删除原来的 <code>rpool/USERDATA</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> zfs destroy -r -f rpool/USERDATA</span><br></pre></td></tr></table></figure>
<p>这个时候可以会提示
<code>umount: /home/fitz: target is busy.</code>，因为我想在就是在这个用户下操作的，所以删不掉这个目录，不过
<code>rpool/USERDATA/root_*</code> 已经删掉了，因此此时退出当前用户，换
root 登录，再次执行上面的命令，就可以把 <code>rpool/USERDATA</code>
全删掉了。</p>
<p>现在再新建一个用户，可以看到新用户的目录是在
<code>tank/USERDATA</code> 下的。</p></li>
</ol>
<h1 id="快照和克隆">快照和克隆</h1>
<blockquote>
<p>https://www.howtoing.com/how-to-use-snapshots-clones-and-replication-in-zfs-on-linux</p>
<p>https://docs.oracle.com/cd/E26926_01/html/E25826/gbchp.html</p>
</blockquote>
<ul>
<li><p>创建快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs snapshot tank/home/matt@friday</span><br></pre></td></tr></table></figure>
<p>创建一个 <code>tank/home/matt</code> 的快照，其名称为
<code>friday</code>。</p>
<p><code>-r</code> 选项可为所有后代文件系统创建快照。</p></li>
<li><p>列出快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs list -t snapshot</span><br></pre></td></tr></table></figure></li>
<li><p>回滚快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs rollback tank/home/matt@tuesday</span><br></pre></td></tr></table></figure>
<p>将 <code>tank/home/matt</code> 文件系统回滚到 <code>tuesday</code>
快照</p>
<p><strong>要回滚到早期快照，必须销毁所有的中间快照。可以通过指定
<code>-r</code> 选项销毁早期的快照。</strong></p></li>
<li><p>确定 ZFS 快照的差异 (<code>zfs diff</code>)</p>
<p>可以使用 <code>zfs diff</code> 命令确定 ZFS 快照的差异。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs diff tank/home/tim@snap1 tank/home/tim@snap2</span><br></pre></td></tr></table></figure></li>
<li><p>删除快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs destory &lt;-r&gt; &lt;snapshot name&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>删除多个快照 <a href="https://qastack.cn/server/340837/how-to-delete-all-but-last-n-zfs-snapshots">ref</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs list -t snapshot -o name | grep ^tank@Auto | <span class="built_in">tac</span> | <span class="built_in">tail</span> -n +16 | xargs -n 1 zfs destroy -r </span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>zfs list -t snaphot -o name</code>输出快照列表（仅限<code>zfs list -t snaphot -o name</code></li>
<li>通过<code>grep ^tank@Auto</code>只保留那些与<code>tank@Auto</code>匹配的文件</li>
<li>用<code>tac</code>反转列表（先前从最旧到最新）</li>
<li>将输出限制为第16个最早的结果，并跟随<code>tail -n +16</code></li>
<li>然后用<code>xargs -n 1 zfs destroy -vr</code></li>
</ul>
<p>按照相反的顺序删除快照据说更有效率。</p>
<p>或按照与创build相反的顺序进行sorting</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">zfs list -t snapshot -o name -S creation | <span class="type">grep</span> ^tank@Auto | <span class="type">tail</span> -n +<span class="number">16</span> | <span class="type">xargs</span> -n <span class="number">1</span> zfs destroy -vr </span><br></pre></td></tr></table></figure>
<p>使用<code>...|xargs -n 1 echo</code>testing它</p></li>
</ul>
<h1 id="自动快照">自动快照</h1>
<p>https://blog.vgot.net/archives/zfsnap.html</p>
<p>https://serverfault.com/questions/855895/how-to-set-the-number-of-snapshots-zfs-auto-snapshot-should-retain</p>
<p>http://knowledgebase.45drives.com/kb/setting-up-zfs-auto-snapshots-in-linux/</p>
<p>https://www.yafa.moe/post/use-zfs-backup-system/#%E5%AE%9A%E6%9C%9F%E5%A4%87%E4%BB%BD</p>
<ol type="1">
<li><p>安装 <a href="https://github.com/zfsonlinux/zfs-auto-snapshot">zfs-auto-snapshot</a></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install zfs-auto-snapshot</span><br></pre></td></tr></table></figure></p></li>
<li><p>默认情况下，它每15分钟为每个数据集创建一个快照，并保存长达1年的快照。但是，您可以通过将
<code>com.sun:auto-snapshot</code> 数据集属性设置为 <code>false</code>
来禁用特定数据集的快照：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> zfs <span class="built_in">set</span> com.sun:auto-snapshot=<span class="literal">false</span> tank/tmp</span><br></pre></td></tr></table></figure></li>
<li><p>您还可以使用 <code>com.sun:auto-snapshot:...</code>
属性来调整自动快照行为。例如，每天为 <code>tank/backup</code>
数据集保存快照31天：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> zfs <span class="built_in">set</span> com.sun:auto-snapshot=<span class="literal">true</span> tank/backup</span><br><span class="line"><span class="built_in">sudo</span> zfs <span class="built_in">set</span> com.sun:auto-snapshot:monthly=<span class="literal">false</span> tank/backup</span><br><span class="line"><span class="built_in">sudo</span> zfs <span class="built_in">set</span> com.sun:auto-snapshot:weekly=<span class="literal">false</span> tank/backup</span><br><span class="line"><span class="built_in">sudo</span> zfs <span class="built_in">set</span> com.sun:auto-snapshot:daily=<span class="literal">true</span> tank/backup</span><br><span class="line"><span class="built_in">sudo</span> zfs <span class="built_in">set</span> com.sun:auto-snapshot:hourly=<span class="literal">false</span> tank/backup</span><br><span class="line"><span class="built_in">sudo</span> zfs <span class="built_in">set</span> com.sun:auto-snapshot:frequent=<span class="literal">false</span> tank/backup</span><br></pre></td></tr></table></figure>
<p>获取 <code>com.sun:auto-snapshot:...</code> 属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zfs get com.sun:auto-snapshot &lt;name&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>默认情况下，脚本保存：</p>
<ul>
<li>每15分钟快照一次，保留4个快照</li>
<li>每小时每小时快照，保留24个快照</li>
<li>每天的快照，保留31个快照</li>
<li>每周每周快照，保留7个快照</li>
<li>每月每月快照，保留12个快照</li>
</ul></li>
</ol>
<h1 id="备份整个系统恢复"><del>备份整个系统&amp;恢复</del></h1>
<blockquote>
<p>https://www.thegeekdiary.com/how-to-backup-and-restore-zfs-root-pool-in-solaris-10/</p>
</blockquote>
<blockquote>
<p>Reference:</p>
<p>https://wiki2.xbits.net:4430/storage:zfs:zfs%E6%89%8B%E5%86%8C#zfs_send_receive</p>
<p>https://aws.amazon.com/cn/blogs/china/architecture-and-practice-of-shared-storage-system-based-on-zfs-for-eda-scenario/</p>
</blockquote>
<h1 id="迁移">迁移</h1>
<blockquote>
<p>Ref:
https://docs.oracle.com/cd/E24847_01/html/819-7065/gbchy.html</p>
</blockquote>
<ul>
<li><p>弹出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zpool <span class="built_in">export</span> tank</span><br></pre></td></tr></table></figure></li>
<li><p>导入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zpool import <span class="comment"># 查看可导入的 pool，实际上不会执行任何操作</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zpool import &lt;pool_name&gt; <span class="comment"># 导入 pool</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>基于FPGA的机器博弈五子棋游戏</title>
    <url>/2018/12/19/%E5%9F%BA%E4%BA%8EFPGA%E7%9A%84%E6%9C%BA%E5%99%A8%E5%8D%9A%E5%BC%88%E4%BA%94%E5%AD%90%E6%A3%8B%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<span id="more"></span>
<p><a href="https://github.com/Starrynightzyq/ZYNQ-PYNQ-Z2-Gobang">GitHub项目地址</a></p>
<p>项目介绍：<a href="http://www.openhw.org/newsinfo/276533.html?templateId=80809">openhw</a></p>
<p><del>挖坑，待写。</del></p>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
        <tag>项目</tag>
        <tag>游戏</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器上的折腾</title>
    <url>/2020/01/30/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E6%8A%98%E8%85%BE/</url>
    <content><![CDATA[<h1 id="购买域名">购买域名</h1>
<p>域名购买于https://www.namesilo.com，可以用支付宝，比较方便。</p>
<h1 id="内网穿透frp">内网穿透：frp</h1>
<blockquote>
<p>Ref: https://www.jianshu.com/p/3ed3f985f35b</p>
</blockquote>
<p>项目地址：https://github.com/fatedier/frp</p>
<p>之前用的是zerotier，优点是使用起来比较方便啦，不过就是有时会莫名其妙断连。</p>
<blockquote>
<p>PS: zerotier
安装是如果按照官网的说明来会比较慢，可能会出现404，可以使用国内源：<a href="https://github.com/SUSTech-CRA/ccse-mirrors-web/blob/master/site/help/zerotier.md">Zerotier
Mirror</a></p>
</blockquote>
<p>买了一个翻车讯的k3路由器，刷了openwrt后，可以用aria2下电影看啦。在VPS和k3上分别配好frp后，就可以远程连上k3，下载电影，回到家再看。</p>
<p>参考：<a href="https://moe.best/tutorial/frp.html#frp">[frp]
内网穿透神器搭建 萌新也看得懂的教程系列</a></p>
<p><em>/etc/systemd/system/frps.service</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=FRP Server Daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">AmbientCapabilities=CAP_NET_BIND_SERVICE</span><br><span class="line">ExecStart=/usr/bin/frps -c /etc/frps/frps.ini</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=2s</span><br><span class="line">User=nobody</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p><em>/lib/systemd/system/frpc@.service</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=FRP Client Daemon</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/bin/frpc -c /opt/etc/frpc%i.ini</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=20s</span><br><span class="line">User=nobody</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h1 id="服务器监测netdata">服务器监测：netdata</h1>
<p>项目地址：https://github.com/netdata/netdata</p>
<p>之前用Ubuntu搭建NAS就想要一个web端的性能监测工具，终于找到了netdata这个工具。</p>
<p>默认暗黑主题，嘿嘿，太炫酷了。程序使用C编写，占用资源极低。并且安装方便，可以零配置使用。</p>
<p>顺手给我的Mac上也安装了一个。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173654.png" alt="截屏2020-01-30下午4.05.07">
<figcaption aria-hidden="true">截屏2020-01-30下午4.05.07</figcaption>
</figure>
<h1 id="宝塔面板">宝塔面板</h1>
<p>项目地址：https://github.com/aaPanel/BaoTa</p>
<p>安装很简单啦，一行命令搞定。具体的还是要看官方文档咯。</p>
<h1 id="薅微软的羊毛用onedrive做共享云盘olaindex">薅微软的羊毛，用OneDrive做共享云盘：OLAINDEX</h1>
<p>项目地址：https://github.com/WangNingkai/OLAINDEX</p>
<blockquote>
<p>占坑，还没装好</p>
</blockquote>
<p>使用宝塔面板安装比较方便一些，参考<a href="https://imwnk.cn/archives/bt-olaindex">BT 面板安装 OLAINDEX
全方位指南</a>。</p>
<h1 id="下载神器aria2">下载神器：aria2</h1>
<p>个人感觉用逗比的脚本比较方便哈，主要是更新BT-Tracker比较方便。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/aria2.sh &amp;&amp; <span class="built_in">chmod</span> +x aria2.sh &amp;&amp; bash aria2.sh</span><br><span class="line"><span class="comment">#备用地址</span></span><br><span class="line">wget -N --no-check-certificate https://www.moerats.com/usr/shell/Aria2/aria2.sh &amp;&amp; <span class="built_in">chmod</span> +x aria2.sh &amp;&amp; bash aria2.sh</span><br></pre></td></tr></table></figure>
<p>安装完成后，如果想修改密码、下载文件位置、端口的话，可以使用命令<code>bash aria2.sh</code>，再选择修改配置即可，这里建议使用该脚本配置自动更新<code>BT-Tracker</code>服务器，对下载<code>BT</code>有加成。</p>
<h1 id="aria2下载自动上传到olaindex">Aria2下载自动上传到Olaindex</h1>
<p>参考：<a href="https://www.moerats.com/archives/700/">使用Aria2+Aria2Ng+OneIndex+OneDrive建立不限流量/离线BT下载/在线观看网盘</a></p>
<p><a href="https://www.moerats.com/archives/1006/">一个好用的OneDrive网盘上传工具，支持文件和文件夹上传</a></p>
<p>https://www.moerats.com/archives/1006/</p>
<p>自动上传脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">downloadpath=<span class="string">&#x27;/home/fitz_ali/aria2c/Download&#x27;</span>   <span class="comment">#修改成Aria2下载文件夹</span></span><br><span class="line">folder=<span class="string">&#x27;/Aria2&#x27;</span>   <span class="comment">#上传至网盘里的文件夹(自动创建)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$2</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">path=<span class="variable">$3</span>   <span class="comment">#取原始路径</span></span><br><span class="line">olaindex=`find /www/wwwroot -name artisan`   <span class="comment">#OLAINDEX的artisan文件的绝对路径</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>);<span class="keyword">do</span>   <span class="comment">#path被赋值为Aria2下载目录，filepath被赋值为下载文件的绝对路径或第一层目录</span></span><br><span class="line">    filepath=<span class="string">&quot;<span class="variable">$path</span>&quot;</span></span><br><span class="line">    path=<span class="string">&quot;<span class="variable">$&#123;path%/*&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$path</span>&quot;</span> = <span class="string">&quot;<span class="variable">$downloadpath</span>&quot;</span> ] &amp;&amp; [ <span class="variable">$2</span> -eq 1 ];<span class="keyword">then</span>   <span class="comment">#单文件</span></span><br><span class="line">        php <span class="variable">$olaindex</span> <span class="built_in">od</span>:upload <span class="string">&quot;<span class="variable">$filepath</span>&quot;</span> <span class="string">&quot;<span class="variable">$folder</span>/&quot;</span>   <span class="comment">#上传</span></span><br><span class="line">        <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$filepath</span>&quot;</span> <span class="string">&quot;<span class="variable">$filepath</span>.aria2&quot;</span> <span class="string">&quot;<span class="variable">$path</span>/*.torrent&quot;</span>   <span class="comment">#删除</span></span><br><span class="line">        php <span class="variable">$olaindex</span> <span class="built_in">od</span>:cache   <span class="comment">#刷新</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$path</span>&quot;</span> = <span class="string">&quot;<span class="variable">$downloadpath</span>&quot;</span> ];<span class="keyword">then</span>   <span class="comment">#文件夹</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$filepath</span>&quot;</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> *;<span class="keyword">do</span>   <span class="comment">#第一层目录</span></span><br><span class="line">            php <span class="variable">$olaindex</span> <span class="built_in">od</span>:upload <span class="string">&quot;<span class="variable">$file</span>&quot;</span> <span class="string">&quot;<span class="variable">$folder</span>/<span class="variable">$&#123;filepath##*/&#125;</span>&quot;</span></span><br><span class="line">            <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> */* */*/*;<span class="keyword">do</span>   <span class="comment">#第二、三层目录</span></span><br><span class="line">            php <span class="variable">$olaindex</span> <span class="built_in">od</span>:upload <span class="string">&quot;<span class="variable">$file</span>&quot;</span> <span class="string">&quot;<span class="variable">$folder</span>/<span class="variable">$&#123;filepath##*/&#125;</span>/<span class="variable">$&#123;file%/*&#125;</span>&quot;</span></span><br><span class="line">            <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$filepath</span>&quot;</span> <span class="string">&quot;<span class="variable">$filepath</span>.aria2&quot;</span> <span class="string">&quot;<span class="variable">$path</span>/*.torrent&quot;</span></span><br><span class="line">        php <span class="variable">$olaindex</span> <span class="built_in">od</span>:cache</span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h1 id="个人媒体服务器jellyfin">个人媒体服务器：Jellyfin</h1>
<p>参考：<a href="https://www.moerats.com/archives/859/">一款开源免费且类似Emby的个人媒体服务器：Jellyfin安装教程</a></p>
<p>https://www.jianshu.com/p/f8ac045d8ffa</p>
<p>端口：8096</p>
<h1 id="kms服务器">KMS服务器</h1>
<h2 id="安装-kms-server">安装 KMS server</h2>
<p>秋水逸冰的一键脚本：https://teddysun.com/530.html</p>
<ol type="1">
<li><p>使用root用户登录，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/kms.sh &amp;&amp; <span class="built_in">chmod</span> +x kms.sh &amp;&amp; ./kms.sh</span><br></pre></td></tr></table></figure></li>
<li><p>安装完成后，输入以下命令查看端口号 1688 的监听情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -nxtlp | grep 1688</span><br></pre></td></tr></table></figure>
<p>返回值类似这样就OK了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:1688            0.0.0.0:*               LISTEN      25641/vlmcsd</span><br><span class="line">tcp6       0      0 :::1688                 :::*                    LISTEN      25641/vlmcsd</span><br></pre></td></tr></table></figure></li>
<li><p>本脚本安装完成后，会将 KMS 服务加入开机自启动。</p>
<p><strong>使用命令：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">启动：<span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>kms start</span><br><span class="line">停止：<span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>kms stop</span><br><span class="line">重启：<span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>kms restart</span><br><span class="line">状态：<span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>kms status</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="使用-kms-激活-windowsvolume-版">使用 kms 激活 windows（VOLUME
版）</h2>
<p>使用管理员权限运行 cmd 查看系统版本，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic os get caption</span><br></pre></td></tr></table></figure>
<p>获取 key</p>
<p>https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</p>
<p>使用管理员权限运行 cmd，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、卸载已有激活key</span></span><br><span class="line">slmgr.vbs -upk </span><br><span class="line"><span class="comment"># 2、安装新的GVLK</span></span><br><span class="line"><span class="comment"># Windows 7 专业版：FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4</span></span><br><span class="line"><span class="comment"># Windows 8 专业版：NG4HW-VH26C-733KW-K6F98-J8CK4</span></span><br><span class="line"><span class="comment"># Windows 8.1 专业版：GCRJD-8NW9H-F2CDX-CCM8D-9D6T9</span></span><br><span class="line"><span class="comment"># Windows 10 专业版：W269N-WFGWX-YVC9B-4J6C9-T83GX</span></span><br><span class="line">slmgr.vbs -ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line"><span class="comment"># 3、填写KMS服务器域名或者IP地址（会默认1688端口激活）</span></span><br><span class="line">slmgr.vbs -skms Your IP or Domain:1688</span><br><span class="line"><span class="comment"># 4、尝试连接KMS服务器在线激活（attempt online）</span></span><br><span class="line">slmgr.vbs -ato </span><br><span class="line"><span class="comment"># 5、显示激活信息</span></span><br><span class="line">slmgr.vbs -dlv</span><br></pre></td></tr></table></figure>
<h2 id="使用-kms-激活-officevolume-版">使用 kms 激活 office（VOLUME
版）</h2>
<p>下载的 ISO 文件 cn 打头的是零售版，sw 打头的是 VOL 版。</p>
<p>不过建议使用 <a href="https://otp.landian.vip/zh-cn/">Office
Tool</a>，</p>
<p>包含部署+激活，不需要自己单独下载安装包了，而且可以安装选定的软件，这样就不用安装
office 全家桶了。</p>
<h1 id="nginx文件服务器">nginx文件服务器</h1>
<p>https://www.jianshu.com/p/d9f886a9666a</p>
<h1 id="解决ssh登录后闲置时间过长而断开连接">解决ssh登录后闲置时间过长而断开连接</h1>
<h2 id="方法一">方法一</h2>
<p>修改服务器端，修改 <code>/etc/ssh/sshd_config</code>
，找到<code>ClientAliveCountMax</code>（单位为分钟）修改你想要的值：</p>
<p>然后执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service sshd reload</span><br></pre></td></tr></table></figure>
<h2 id="方法二推荐">方法二（推荐）</h2>
<p>修改客户端，找到当前用户的 <code>.ssh</code> 目录，如
<code>~/.ssh/</code> ，修改该目录下的 <code>config</code>
文件，加入：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ServerAliveInterval</span> <span class="number">60</span></span><br></pre></td></tr></table></figure>
<p>保存退出，重新开启当前用户的 shell ，则再 ssh
远程服务器的时候，不会因为长时间操作断开。应该是加入这句之后，ssh
客户端会每隔一段时间自动与 ssh
服务器通信一次，所以长时间操作不会断开。</p>
<h1 id="ssh-登录后显示-system-load-信息">ssh 登录后显示 system load
信息</h1>
<blockquote>
<p>https://www.cnblogs.com/yangxiaochu/p/9098960.html</p>
</blockquote>
<p>ssh 登录后显示类似下方的信息：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">Welcome to Ubuntu <span class="number">20.04</span>.<span class="number">2</span> LTS (GNU<span class="symbol">/Linux</span> <span class="number">5.8</span>.<span class="number">0</span><span class="operator">-</span><span class="number">5</span>9-generic x86_64)</span><br><span class="line"></span><br><span class="line"> <span class="operator">*</span> <span class="params">Documentation:</span>  https:<span class="symbol">//help.ubuntu.com</span></span><br><span class="line"> <span class="operator">*</span> <span class="params">Management:</span>     https:<span class="symbol">//landscape.canonical.com</span></span><br><span class="line"> <span class="operator">*</span> <span class="params">Support:</span>        https:<span class="symbol">//ubuntu.com/advantage</span></span><br><span class="line"></span><br><span class="line">  System information as of Mon <span class="number">05</span> Jul <span class="number">2021</span> <span class="number">05</span>:<span class="number">28</span>:<span class="number">58</span> PM CST</span><br><span class="line"></span><br><span class="line">  System <span class="params">load:</span>  <span class="number">1.12</span>               Users logged <span class="params">in:</span>             <span class="number">1</span></span><br><span class="line">  Usage of <span class="operator">/</span>:   <span class="number">2.8</span>% of <span class="number">467.96</span>GB   IPv4 address for <span class="params">docker0:</span>    <span class="number">172.17</span>.<span class="number">0.1</span></span><br><span class="line">  Memory <span class="params">usage:</span> <span class="number">26</span>%                IPv4 address for <span class="params">eno2:</span>       <span class="number">192.168</span>.<span class="number">2.11</span></span><br><span class="line">  Swap <span class="params">usage:</span>   <span class="number">0</span>%                 IPv4 address for <span class="params">vmnet1:</span>     <span class="number">192.168</span>.<span class="number">69.1</span></span><br><span class="line">  <span class="params">Temperature:</span>  <span class="number">55.0</span> C             IPv4 address for <span class="params">vmnet8:</span>     <span class="number">172.16</span>.<span class="number">19.1</span></span><br><span class="line">  <span class="params">Processes:</span>    <span class="number">391</span>                IPv4 address for <span class="params">ztuga25q2a:</span> <span class="number">192.168</span>.<span class="number">196.236</span></span><br><span class="line"></span><br><span class="line"><span class="number">32</span> updates can be applied immediately.</span><br><span class="line">To see these additional updates <span class="params">run:</span> apt list <span class="operator">-</span>-upgradable</span><br><span class="line"></span><br><span class="line">Your Hardware Enablement Stack (HWE) is supported until April <span class="number">2025</span>.</span><br><span class="line">No mail.</span><br><span class="line">Last <span class="params">login:</span> Mon Jul  <span class="number">5</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">54</span> <span class="number">2021</span> from <span class="number">192.168</span>.<span class="number">2.101</span></span><br></pre></td></tr></table></figure>
<p>只需要安装 <code>landscape-common</code> 然后重新登录就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install landscape-common</span><br></pre></td></tr></table></figure>
<h1 id="个人服务器">个人服务器</h1>
<h2 id="新建用户">新建用户</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改服务器名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 换源</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak sudo sed -i
's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
<sub></sub>~</p>
<h2 id="桌面-远程连接">桌面 &amp; 远程连接</h2>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">xubuntu-desktop</span></span><br></pre></td></tr></table></figure>
<h2 id="办公">办公</h2>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>板球系统报告</title>
    <url>/2018/12/20/%E6%9D%BF%E7%90%83%E7%B3%BB%E7%BB%9F%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<p>课设二的报告，一边做一边写吧！</p>
<span id="more"></span>
<h1 id="设计方案工作原理">1. 设计方案工作原理</h1>
<h2 id="系统总体介绍">1.1 系统总体介绍</h2>
<p>实现板球系统，在边长为65cm的正方形平板上均匀分布9个外径为3cm的圆形区域，设计一控制系统，通过控制平板的倾斜，使直
径不大于2.5cm的小球能够完成指定的动作：</p>
<ul>
<li>平板上9个圆形区域中任意区域停留不少于5秒；</li>
<li>任意选定两个区域，从一个区域运动到另一个区域，并且在第二个区域停留不小于5秒；</li>
</ul>
<h2 id="实现目标定位">1.2 实现目标定位</h2>
<p>本次课设的主要目标如下：</p>
<ul>
<li>将前期在Basys3平台上的项目移植到PYNQ-Z2平台上，为系统的进一步拓展提供便利；</li>
<li>优化系统的硬件结构；</li>
<li>在PYNQ-Z2平台上学习并使用一款rtOS（μcOS），作为系统的软件控制部分；</li>
<li>在ucOS上实现串级PID控制；</li>
</ul>
<h2 id="系统结构工作原理">1.3 系统结构工作原理</h2>
<ol type="1">
<li><p>系统框图：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173238.png" alt="系统框图">
<figcaption aria-hidden="true">系统框图</figcaption>
</figure>
<ul>
<li><p>通过摄像头获取图像并且定位小球的位置；</p></li>
<li><p>根据小球位置与目标位置之间的差值，控制舵机，使平板倾斜，从而让小球运动到目标位置；</p></li>
</ul></li>
<li><p>串级PID原理：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173239.png" alt="image-20181221001133361">
<figcaption aria-hidden="true">image-20181221001133361</figcaption>
</figure>
<ul>
<li>内环为角度环，对角度进行控制；</li>
<li>外环为位置环，对位置进行控制。</li>
</ul></li>
<li><p>ucOS介绍：</p>
<p>实时操作系统（RTOS）是指当外界事件或数据产生时，能够接受并以足够快的速度予以处理，其处理的结果又能在规定的时间之内来控制生产过程或对处理系统做出快速响应，调度一切可利用的资源完成实时任务，并控制所有实时任务协调一致运行的操作系统。</p>
<p>常用的实时操作系统有VxWorks、QNX、ucos-III、Windows
CE、FreeRTOS等。</p>
<p>μcos-III是一个可以基于ROM运行的、可裁剪的、抢占式、实时多任务内核，具有高度可移植性，特别适合于微处理器和控制器，适合很多商业操作系统性能相当的实时操作系统(RTOS)。</p>
<p>其特点是：公开源代码、可移植性、可固化、可裁剪、多任务、占先式。</p>
<p>为了便于后期将本项目的控制算法移植到不同的平台上（如TI的TM4单片机），我们基于ucOS操作系统编写算法；</p></li>
</ol>
<h2 id="团队分工">1.4 团队分工</h2>
<ul>
<li>zyq：整体系统的设计，底层IP核的驱动，三轴加速度计传感器算法；</li>
<li>zyf：串级PID算法的实现和调节；</li>
<li>ljc：与上位机的通信。</li>
</ul>
<h1 id="系统硬件设计">2. 系统硬件设计</h1>
<p>硬件部分在之前基本搭建完成，本次课设中涉及不多，因此简单叙述一下。</p>
<ul>
<li><p>整体描述</p>
<p>通过OV7725采集小球在平板上运动的图像，在FPGA处理后，控制平板下方成90度角排列的两个舵机的运动，是平板定向倾斜，进而控制小球运动到目标位置。</p></li>
<li><p>各模块介绍</p>
<ul>
<li><p>OV7725摄像头</p>
<p>OmniVision
公司生产的一款30W像素的摄像头，我们使用FPGA来驱动摄像头工作。</p></li>
<li><p>舵机</p>
<p>这里我们选用了 MG996R 舵机，工作电压 4.8V -
7.2V，在6V电压的驱动下，动力为11 kgf·cm ，运动速度为0.14
s/60º。用50Hz，高电平时间为0.5ms-2.5ms的方波作为控制信号。</p></li>
<li><p>MPU6500</p>
<p>3轴加速度计、3轴陀螺仪传感器，采用IIC配置读取数据。</p></li>
</ul></li>
</ul>
<h1 id="系统软件设计">3. 系统软件设计</h1>
<h2 id="串级pid">3.1 串级PID</h2>
<ol type="1">
<li><p>原理</p>
<p>PID控制器（比例-积分-微分控制器），由比例单元(P)、积分单元(I)和微分单元(D)组成。透过Kp，Ki和Kd三个参数的设定。PID控制器主要适用于基本上线性，且动态特性不随时间变化的系统。</p>
<p>单级PID原理图：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173240.png" alt="1545741056965">
<figcaption aria-hidden="true">1545741056965</figcaption>
</figure>
<p>PID控制的特点：</p>
<ul>
<li><p>稳定性（P和I降低系统稳定性，D提高系统稳定性）</p>
<p>在平衡状态下，系统受到某个干扰后，经过一段时间其被控量可以达到某一稳定状态；</p></li>
<li><p>准确性（P和I提高稳态精度，D无作用）</p>
<p>系统处于稳态时，其稳态误差；</p></li>
<li><p>快速性（P和D提高响应速度，I降低响应速度）</p>
<p>系统对动态响应的要求。一般由过渡时间的长短来衡量。、</p></li>
<li><p>动态特性（暂态特性，由于系统惯性引起）</p>
<p>系统突加给定量（或者负载突然变化）时，其系统输出的动态响应曲线。延迟时间、上升时间、峰值时间、调节时间、超调量和振荡次数。</p>
<p>在通常情况下,上升时间和峰值时间用来评价系统的响应速度；超调量用来评价系统的阻尼程度；调节时间同时反应响应速度和阻尼程度；</p></li>
<li><p>稳态特性</p>
<p>在参考信号输出下，经过无穷时间，其系统输出与参考信号的误差。影响因素：系统结构、参数和输入量的形式等；</p></li>
</ul>
<p>PID控制有两种形式：</p>
<ul>
<li><p>位置式PID：</p>
<p><span class="math display">\[u(k) = K_pe(k) + K_i \Sigma ^k _{j = 0}
e(j) + K_d[e(k) - e(k-1)]\]</span></p>
<ul>
<li><p>累加历史数据</p></li>
<li><p>输出最终绝对加载量</p></li>
</ul></li>
<li><p>增量式PID:</p>
<p><span class="math display">\[ \Delta u(k) = u(k) - u(k-1) = K_p
\Delta e(k) + K_i e(k) + K_d [\Delta e(k) - \Delta e(k-1)] \]</span></p>
<ul>
<li><p>不累计历史数据，仅与最近三次采样值有关</p></li>
<li><p>只输出控制增量</p></li>
</ul></li>
</ul>
<p>为了保证系统的稳定性，在该系统里我们使用增量式PID。</p></li>
<li><p>具体实现</p>
<p>串级PID的实现：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173239.png" alt="image-20181221001133361">
<figcaption aria-hidden="true">image-20181221001133361</figcaption>
</figure></li>
</ol>
<h2 id="板倾斜角度的测量">3.2 板倾斜角度的测量</h2>
<p>为了保证系统的控制效果，提高系统的稳定性，我们使用了串级PID，串级PID的内环为角度环，因此我们需要测量板子的倾斜角度，这里我们使用了MPU6500六轴（陀螺仪+加速度计）传感器进行测量。</p>
<ol type="1">
<li><p>倾角测量原理</p>
<ul>
<li><p>陀螺仪计算倾角</p>
<p>陀螺仪可以测量角速度,具有高动态特性,是一个间接测量器件,它测量的是角度的导数：角速度。我们将角速度对时间积分可以得到角度，如下公式所示：</p>
<p><span class="math display">\[ Angle(t)  = \Sigma _0 ^t (Gyro(t) * dt)
\]</span></p>
<p>由于是使用积分的方法获取角度，会存在积分误差，积分误差的来源主要有两个：</p>
<ul>
<li>积分时间，很难得到一个准确的时间，积分时间dt越小，输出角度越准；</li>
<li>器件本身的误差，积分之后会累计。</li>
</ul>
<p>因此，使用陀螺仪测量角度，动态测量性能较好，但是有累计误差。</p></li>
<li><p>加速度计计算倾角</p>
<p>加速度计测量的是物体的加速度，重力加速度是一个物体受重力作用的情况下所具有的加速度。当物体处于静止状态时，加速度计测量出来的值就等于重力加速度1g,
约等于9.8 米每平方秒。重力加速度 g
的方向总是竖直向下的，通过获得重力加速度在其X轴，Y轴上的分量，我们可以计算出物体相对于水平面的倾斜角度。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173241.png" alt="1545917528064">
<figcaption aria-hidden="true">1545917528064</figcaption>
</figure>
<p>当系统在三维空间做变速运动时，它的输出为轴向的加速度和重力加速度的分量，这就不能准确用于计算物体的姿态和运动状态。</p>
<p>静态时，加速度计计算的倾角比较准确；而动态时，倾角的误差就很大，跟随性也较差。</p></li>
<li><p>在姿态计算中我们采用陀螺仪的动态数据为主体，而加速度计起到修正陀螺仪积分误差的作用。</p></li>
</ul></li>
<li><p>姿态解算：欧拉角</p>
<p>对于在三维空间里的一个参考系，任何坐标系的取向，都可以用三个欧拉角来表现。参考系又称为实验室参考系，是静止不动的。而坐标系则固定于刚体，随着刚体的旋转而旋转。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173242.png" alt="img">
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>参考上图。图中有两组坐标：</p>
<ul>
<li><span class="math inline">\(xyz\)</span> 为全局坐标，保持不动；</li>
<li><span class="math inline">\(XYZ\)</span>
为局部坐标，随着物体一起运动；</li>
</ul>
<p>旋转步骤如下：</p>
<ul>
<li>物体绕<strong>全局坐标</strong>的 <span class="math inline">\(z\)</span> 轴旋转 <span class="math inline">\(\alpha\)</span> 角；</li>
<li>继续绕<strong>自己</strong>的 <span class="math inline">\(X\)</span>
轴(也就是图中的<span class="math inline">\(N\)</span>轴)旋转 <span class="math inline">\(\beta\)</span> 角；</li>
<li>最后绕<strong>自己</strong>的 <span class="math inline">\(Z\)</span>
轴旋转 <span class="math inline">\(\gamma\)</span> 角。</li>
</ul>
<p>这个过程中新生成的坐标系 <span class="math inline">\(\left(
\begin{array}{ccc} X \\ Y \\ Z \end{array} \right)\)</span>
可以通过运算由原坐标系 <span class="math inline">\(\left(
\begin{array}{ccc} X \\ Y \\ Z \end{array} \right)\)</span> 得到:</p>
<p><span class="math display">\[\left( \begin{matrix} X \\Y \\Z
\end{matrix} \right) = M \left( \begin{matrix} x \\y \\z \end{matrix}
\right)\]</span></p>
<p>其中，矩阵M表示了上面三次旋转的总过程。我们可以推导一下：</p>
<p><span class="math display">\[M = Rot(x,\alpha)\cdot Rot(x,\beta)\cdot
Rot(z,\gamma) = \left(
\begin{matrix}cos\gamma&amp;sin\gamma&amp;0\\-sin\gamma&amp;cos\gamma&amp;0
\\0&amp;0&amp;1\end{matrix}\right)\left(\begin{matrix}1&amp;0&amp;0\\0&amp;cos\beta&amp;sin\beta
\\0&amp;-sin\beta&amp;cos\beta\end{matrix}\right)\left(
\begin{matrix}cos\alpha&amp;sin\alpha&amp;0\\-sin\alpha&amp;cos\alpha&amp;0
\\0&amp;0&amp;1\end{matrix}\right)\]</span></p>
<p><span class="math display">\[ M = \left( \begin{matrix} cos\alpha
cos\gamma - sin\alpha cos\beta sin\gamma &amp;sin\alpha cos\gamma +
cos\alpha cos\beta sin\gamma &amp; sin\beta sin\gamma \\-cos\alpha
sin\gamma - sin\alpha cos\beta cos\gamma &amp;-sin\alpha sin\gamma +
cos\alpha cos\beta cos\gamma &amp; sin\beta cos\gamma \\ sin\alpha
sin\beta &amp; -cos\alpha sin\beta &amp; cos\beta \end{matrix} \right)
\]</span></p>
<p>记录这样一个变换，<strong>至少需要三个角的sine和cosine值，也就是一共存储6个单位数据</strong>。</p></li>
<li><p>姿态融合</p>
<p>常用的 <span class="math inline">\(mems\)</span>
传感器的陀螺仪和加速度计的噪声相对来说很大，以常见的陀螺仪为例进行积分1分钟会漂移2度左右。在这种前提下，如果没有磁场和重力来修正三轴陀螺仪的话，那么基本上3分钟以后物体的实际姿态和测量输出姿态就完全变样了。所以我们要使用数据融合的方法，来获取更加准确的倾角数据。</p>
<p>常用的惯性传感器姿态融合算法有：互补滤波、Mahony互补滤波、扩展卡尔曼滤波等。我们选择Mahony滤波。</p>
<ul>
<li><p>互补滤波的思想</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173243.jpg" alt="preview">
<figcaption aria-hidden="true">preview</figcaption>
</figure>
<p>假如我们对一个物理量有两种测量手段，一种呢容易受到高频噪声的干扰，实际的观感就是信号有很多的毛刺；另一种容易受到低频噪声的干扰，就是噪声会慢慢的变化。那么我们就可以设计互补的两个滤波器
<span class="math inline">\(F_1\)</span> 和 <span class="math inline">\(F_2\)</span> ，所谓互补就是 <span class="math inline">\(F_1 + F_2 = 1\)</span>
，它们一个是低通滤波器，可以滤除信号中的高频噪声，一个是高通滤波器，能够滤除信号中的低频变化。这样分别把相应测量中的噪声滤除，就可以得到更精确的对这个物理量的测量了。</p>
<p>那么显然，互补滤波器的好坏，就取决于噪声滤除的干不干净。不幸的是，对实际实现的滤波器来说，噪声是不可能完全被滤除的。所以，互补滤波器并不是某种特定准则上的“最优”滤波器。</p></li>
<li><p>基本的姿态互补滤波器</p>
<p>要使用互补滤波器获得对物体姿态的更准确的测量，我们要找到两个对物体姿态的测量手段，在上文中我们知道，陀螺仪可以通过积分获得一组姿态，而加速度计也能够获得一组姿态，而且加速度计容易受到振动等高频噪声的干扰，陀螺仪容易受到漂移等低频噪声的干扰，因此我们可以使用互补滤波来获取更为准确的姿态。</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173244.jpg" alt="img">
<figcaption aria-hidden="true">img</figcaption>
</figure></li>
<li><p>Mahony互补滤波的核心步骤：</p>
<ol type="1">
<li>加速度数据归一化。</li>
<li>将加速度向量(0,0,1)从地理坐标系转换到载体坐标系得到预测向量。</li>
<li>将预测加速度向量与实际加速度向量做叉积得到误差（偏差角度的余弦）。</li>
<li>将误差做PI调节，补偿叠加到原始角速度数据向量上。</li>
<li>通过四元数微分方程，将补偿过的角速度向量转换为四元数向量。</li>
<li>将四元数转换为欧拉角。</li>
<li>新的四元数重新代入方向余弦矩阵，生产新的方向余弦矩阵，用于数据从地理坐标系到载体坐标系的转换。</li>
<li>直到误差为0，方向余弦矩阵正确，姿态数据正确。</li>
</ol></li>
<li><p>姿态融合流程图：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173245.jpg" alt="img">
<figcaption aria-hidden="true">img</figcaption>
</figure>
<ol type="1">
<li>互补滤波器的整体框架是利用飞行器的旋转速度来更新飞行器的姿态，即图中的姿态传播，可以采用欧拉角、四元数、DCM等方法；</li>
<li>陀螺测量的飞行器旋转速度是不准确的，我们利用PI控制器去修正陀螺的测量，用反馈控制的思想可以理解为，加速度计和磁强计产生的是参考信号，是滤波器要去跟踪的，所以参考姿态和滤波器输出姿态之间的差异就构成了新息，我们对新息进行PI控制操作，其中P环节是为了补偿滤波器的估计误差，I环节是为了补偿陀螺仪的漂移。</li>
<li>可以这样理解这个互补滤波器，基本的框架是利用陀螺测量的旋转速度来计算姿态，但这样肯定将漂移和噪声引入到姿态中，所以我们希望陀螺更新的姿态能够向相对无偏移的加速度计姿态靠近，这样利用一个PI控制器来控制这个过程，这样一来，因为PI控制器不可能非常快速的把陀螺姿态控制到和加速度计姿态一致，所以我们能够避免加速度计姿态里面快速变化的部分，因为控制带宽不够跟踪不上。与此同时，陀螺姿态在不断试图跟踪加速度计姿态的过程中，也避免了漂移量带来的误差，实际上从控制的角度解释了“互补”的思想。</li>
<li>图中姿态传播框是滤波器的主体框架，在其之前的4个框是滤波器的“互补”的实现，图中姿态的误差框就是Mahony算法做出的贡献。</li>
</ol></li>
</ul></li>
</ol>
<h2 id="数据通信">3.3 数据通信</h2>
<ul>
<li><p>与上位机通信</p>
<p>以25Hz的频率，通过Uart1（115200波特率）发送IMU解算出来的板的姿态，小球的位置等信息。数据格式如下：</p>
<table>
<thead>
<tr>
<th>0:包头</th>
<th>1：包头</th>
<th>2：数据号</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x55</td>
<td>0xaa</td>
<td>0x__</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>3:float数据0</th>
<th>4</th>
<th>5</th>
<th>6</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>7:float数据1</th>
<th>8</th>
<th>9</th>
<th>10</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>11:float数据2</th>
<th>12</th>
<th>13</th>
<th>14</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>15：包尾</th>
</tr>
</thead>
<tbody>
<tr>
<td>$（0x24）</td>
</tr>
</tbody>
</table>
<p>每个数据包为16Byte，其中前两个为包头，第三个为数据号，后面是3个float类型的数据（1位float转换为4位u8数据），最后是包尾。</p></li>
<li><p>与摄像头板通信</p>
<p>由于摄像头与舵机之间的距离较长，用一块板子控制所有设备虽然资源足够，但需要很长的线来传输信号，容易受干扰，效果较差，因此我们用一块板子连接摄像头，来获取小球的位置信息，用另一块板子连接舵机，MPU6500等设备，控制板子的运动，两块板子之间通过uart通信。</p>
<p>由于两块板子之间的距离较远，直接使用线传输效果不理想，我们使用两个蓝牙模块在透传模式下来传输数据。</p></li>
</ul>
<h2 id="程序的整体流程">3.4 程序的整体流程</h2>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173246.png" alt="1546762358281">
<figcaption aria-hidden="true">1546762358281</figcaption>
</figure>
<p>我们将整个程序划分为3部分：</p>
<ul>
<li>系统初始化任务；</li>
<li>定时中断触发任务；</li>
<li>外部中断触发任务。</li>
</ul>
<p>定时中断触发的任务中，姿态解算与内化PID控制任务以500Hz的频率运行，外环PID的任务以40Hz的频率运行，其他一些不重要的任务以较低的频率运行；</p>
<p>外部中断触发的主要有两个任务，一个是接收小球位置信息，这个由另一块板子获取小球的位置信息，然后以30Hz的频率发送。还有一个任务是接收上位机发来的数据，主要是PID参数，用来在线调参，避免了每改一次参数都要重新下载程序，大大提高了调参效率。</p>
<h1 id="作品成效总结">4. 作品成效总结</h1>
<ol type="1">
<li><p>3-2
能够针对特定指标需求，设计并实现功能完整的硬件和软件系统，包括整体架构设计、各模块交互和数据通信等（系统设计）。</p>
<p>在本次课设中，我们将各模块功能合理划分，降低各模块之间的耦合度。由于摄像头与舵机之间的距离较长，用一块板子控制所有设备虽然资源足够，但需要很长的线来传输信号，容易受干扰，效果较差，因此我们用一块板子连接摄像头，来获取小球的位置信息，用另一块板子连接舵机，MPU6500等设备，控制板子的运动，两块板子之间通过uart通信。</p>
<p>在使用蓝牙传输数据，波特率115200的情况下，数据传输错误较少，测试过程中大概传输100个数据包会出现1-2的接收错误，错误主要是数据包接收中出现少量的丢失，并没有出现数据传输的过程中数据的值发送变化。由于以30Hz的频率发送小球的位置信息，所以这个错误率可以接受，对控制结果影响不大。</p></li>
<li><p>4-2
能够根据方案，运用实验工具、仪器，开展实验，对实验结果进行分析与解释，并通过信息综合得到合理有效的结论。</p>
<p>在PID调参部分，为了提高调参效率，我们采用上位机在线调参，上位机通过uart与板子之间进行数据交互，上位机将PID参数发给主控板，主控板将平板的姿态等数据发给上位机，通过上位机可以观测到PID调参的响应曲线，提高了PID调参的准确性。目前完成了串级PID的内环调参，外环的参数还没调好。实现的效果是板子在收到外界的干扰下，可以保持水平，响应速度较快。</p>
<p>在IMU姿态解算部分，在500Hz的运算频率下，通过MPU6500可以实时的获取板子的姿态信息，误差较小，相比于机械结构的误差，传感器测量产生的误差可以忽略。</p></li>
<li><p>10-1
能够就电子信息工程领域的复杂工程问题撰写报告，设计文稿，并具有较好的语言表达和沟通能力，能够清晰陈述观点和回答问题。</p>
<p>目前已按照课设要求，完成报告的撰写，合理地描述了本次课设中遇到的问题，并对其进行分析，给出相应的解决方案。</p></li>
</ol>
<h1 id="参考资料及文献">5. 参考资料及文献</h1>
<p>[1] da Silveira Castro R, Flores J V, Salton A T, et al. A
comparative analysis of repetitive and resonant controllers to a
servo-vision ball and plate system[J]. IFAC Proceedings Volumes, 2014,
47(3): 1120-1125.</p>
<p>[2] Mahony R, Hamel T, Pflimlin J M. Nonlinear complementary filters
on the special orthogonal group[J]. IEEE Transactions on automatic
control, 2008, 53(5): 1203-1218.</p>
<p>[3] Goldstein H. Classical mechanics[M]. Pearson Education India,
2011.</p>
<p>[4] 黄真, 李艳文, 高峰. 空间运动构件姿态的欧拉角表示[J].
燕山大学学报, 2002, 26(3): 189-192.</p>
<p>[5] 李跃军, 阎超. 飞行器姿态角解算的全角度双欧法[J].
北京航空航天大学学报, 2007, 33(5): 505-508.</p>
<p>[6] 李俊, 李运堂. 四旋翼飞行器的动力学建模及 PID 控制[J].
辽宁工程技术大学学报: 自然科学版, 2012 (1).</p>
<p>[7] 王赓, 孙政顺. 板球控制系统的 PD 型模糊控制算法研究[J]. 电气传动,
2004, 34(4): 23-25.</p>
<h1 id="附件">6. 附件</h1>
<ol type="1">
<li><p>获取小球位置信息的 vivado 工程的 Block Design 图</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173247.png" alt="1546774328266">
<figcaption aria-hidden="true">1546774328266</figcaption>
</figure></li>
<li><p>图像处理的RTL图</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173248.png" alt="1546774904592">
<figcaption aria-hidden="true">1546774904592</figcaption>
</figure></li>
<li><p>ZYNQ控制部分的 Block Design 图</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173249.png" alt="1546774768247">
<figcaption aria-hidden="true">1546774768247</figcaption>
</figure></li>
</ol>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
        <tag>课程设计</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>毕设--开题报告</title>
    <url>/2020/02/11/%E6%AF%95%E8%AE%BE-%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<blockquote>
<p>开题报告填写要求</p>
<p>1．开题报告（含“文献综述”）作为毕业设计（论文）答辩委员会对学生答辩资格审查的依据材料之一。此报告应在指导教师指导下，由学生在毕业设计（论文）工作前期内完成，经指导教师签署意见及所在专业审查后生效；</p>
<p>2．开题报告内容必须用黑墨水笔工整书写或按教务处统一设计的电子文档标准格式（可从教务处网页上下载）打印，禁止打印在其它纸上后剪贴，完成后应及时交给指导教师签署意见；</p>
<p>3．“文献综述”应按论文的格式成文，并直接书写（或打印）在本开题报告第一栏目内，学生写文献综述的参考文献应不少于15篇（不包括辞典、手册）；</p>
<p>4．有关年月日等日期的填写，应当按照国标GB/T
7408—94《数据元和交换格式、信息交换、日期和时间表示法》规定的要求，一律用阿拉伯数字书写。如“2004年4月26日”或“2004-04-26”。</p>
</blockquote>
<h1 id="文献综述">文献综述</h1>
<blockquote>
<p>结合毕业设计（论文）课题情况，根据所查阅的文献资料，每人撰写2000字左右的文献综述</p>
</blockquote>
<h2 id="研究背景及国内外研究现状">研究背景及国内外研究现状</h2>
<p>卷积神经网络(CNN)现在是许多学科研究的热点之一，被广泛用于多种领域，特别是在模式识别、图像处理、计算机视觉等方面。但是卷积神经网络的主要问题在于计算量太大，特别是其中的卷积层，以Alex-Net为例，占用了90%<span class="citation" data-cites="chenEyerissEnergyefficientReconfigurable2016">[@chenEyerissEnergyefficientReconfigurable2016]</span>以上的计算量，卷积神经网络的硬件加速逐渐成为一个热门的研究问题。由于卷积神经网络自身特点，层与层之间可以看做顺序执行，而层内则有着较高的并行性，因此提高层内计算的并行度成为加速卷积神经网络的一个重要方向。</p>
<p>在2009，Farabet等人<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>提出来一种基于FPGA的CNN，该结构使用卷积单元来处理数据，并使用一个通用CPU来控制卷积单元。但是由于FPGA资源的限制，该平台只实现了一个卷积核。如果计算需要多个卷积核，那么只能串行执行。2013年，Peemen等人<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>实现了一个以存储为中心的CNN协处理器，它利用CNN大量内存访问的特点，在存储部分使用SRAM，而PE部分使用SIMD指令。2015年，清华大学的方睿等人，提出一种多级流水线的管道加速器方案。CPU通过PCIE通道提供数据并进行控制整个逻辑单元。近年来，中科院的陈天石等人提出来DianNao系列的加速器<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>，目前是卷积神经网络硬件加速领域的较优的一种方案，可以实现多种结构的卷积网络，如MLP、CNN、DNN。存硬件实现的卷积神经网络加速器通用性不好。尽管可以通过配置来实现更多的结构，但是它的灵活性远不如通用CPU。因此可重构加速器与通用CPU相结合的模式是一种高效地解决卷积神经网络加速问题的方案。</p>
<p>但是在这种定制结构中，CPU的选择具有极大的挑战。通常商业授权的IP会限制对指令集的修改，影响卷积神经网络加速器的实现效果。并且，商业授权的IP通常需要高昂的授权费，不利于高校和个人的研究。因此需要一个开源的指令集架构来进行定制加速器的研究。</p>
<p>RISC-V是一种新的开源指令集架构（ISA）<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>，目前已经有了一个完整的硬件和硬件生态<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a><a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>，包括完整的指令集、相应的编译器、模拟器和工具链。利用开源的RISC-V处理器，研究人员可以方便地将可重构加速器整合进SOC，并拓展相应的指令集来实现加速器的软件接口。</p>
<h2 id="设计目标及平台的选择">设计目标及平台的选择</h2>
<p>本设计主要包含三个部分，RISC-V
Core和卷积神经网络加速器，以及将两部分结合起来实现完整功能的SOC部分。卷积神经网络的硬件加速通常可以采用ASIC或者FPGA来实现，两者均是采用定制的硬件电路来加速算法。通常ASIC的性能跟高，功耗更低，但是由于成本过高，因此在本设计中采用FPGA作为硬件平台。</p>
<p>由于硬件实现CNN加速器需要较多资源，因此需要一款大容量的FPGA芯片，以实现更好的硬件加速效果。考虑各方面因素，最终选取了Nexys4
DDR作为硬件平台。Nexys4 DDR上使用Xilinx XC7A100T
FPGA芯片。芯片包含了15,850个可编程逻辑单元，每个逻辑单元有4个6输入查找表和8个触发器。芯片有4,860
Kbits的块存储器，240个DSP运算单元，逻辑资源相对丰富。开发板引出数十个IO口和一个VGA接口，拥有128MB的DDR2，足够该系统使用。</p>
<h2 id="研究意义及前景">研究意义及前景</h2>
<p>卷积神经网络作为目前深度学习的一个重要手段，由于计算量巨大的问题限制了其应用于发展，通常需要在高性能的运算平台上进行模型的推演，因此主要被应用在主机场景，而非便携式应用。而利用卷积神经网络层内并行的特点，对卷积神经网络进行硬件加速，从而极大地提高了卷积网络的运行速度，使得便携设备也可以进行卷积神经网络运算，极大地拓展了深度学习的应用场合。</p>
<h2 id="参考文献">参考文献</h2>
<h1 id="研究手段">研究手段</h1>
<blockquote>
<p>本课题要研究或解决的问题和拟采用的研究手段（途径）</p>
</blockquote>
<h2 id="本课题要研究的问题">本课题要研究的问题</h2>
<p>本课题设计搭建一个RISC-V处理器的SOC，并设计卷积神经网络加速器作为协处理器与RISC-V处理器配合工作，实现在低成本的嵌入式平台上进行卷积神经网络加速运算。</p>
<p>本课题设计了一种RISC-V指令集的卷积神经网络处理器，实现了在低成本的嵌入式平台上进行卷积神经网络加速运算。本课题主要实现了以下功能：</p>
<ol type="1">
<li><p>使用RISC-V处理器搭建一个完整的SOC，包含RISC-V
Core、片上总线、Debug调试模块以及基本的外设。</p></li>
<li><p>设计可重构的卷积神经网络加速器，并将其作为协处理器，并为其设计设计专用的指令，包括矢量存储指令，矢量加载指令，矢量加法指令和卷积运算指令以加快卷积过程的执行速度。</p></li>
</ol>
<h2 id="本课题拟采用的研究手段">本课题拟采用的研究手段</h2>
<p>本课题设计主要包含两部分，搭建RISC-V处理器核设计卷积神经网络加速器。整体结构如下图所示：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173444.png" alt="sch">
<figcaption aria-hidden="true">sch</figcaption>
</figure>
<p>在RISC-V处理器的选取上有两种方案，一是使用已有的开源处理器，如Hummingbird
E200、PicoRV32、Ibex等，二是自己设计整个处理器。考虑到第二种方案工作量过大，且性能难以达到较优的水平，一次在本课题采用了现有的开源RISC-V处理器。在对比各种各种处理器的特点之后，最终采取了Ibex
RISC-V
Core。Ibex是一个小型高效的32位有序RISC-V内核，具有2级流水线，可实现RV32IMC指令集。</p>
<p>在卷积神经网络加速器的设计部分，CNN算法在通用CPU上运行时，在卷积部分用循环实现，因此在宏观上，加速卷积神经网络有两种思路：1.
改变循环嵌套的先后顺序，提高数据的重用率，减少对外部存储的访问；2.
将一些低层循环进行Unroll操作展开，利用低层循环中数据相互不依赖的特性，有进行并行计算的可能<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>。本设计中，采取了第二种方案，将层内的循环进行展开，从而实现对卷积神经网络算法的硬件加速。</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr>
<ol>
<li id="fn1"><p>C. Farabet, C. Poulet, J. Y. Han, and Y. Lecun, “Cnp: An
fpga-based processor for convolutional networks,” in International
Conference on Field Programmable Logic &amp; Applications, 2009.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>M. Peemen, A. A. A. Setio, B. Mesman, and H. Corporaal,
“Memory-centric accelerator design for convolutional neural networks,”
2013.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>T. Chen, Z. Du, N. Sun, J. Wang, C. Wu, Y. Chen, and O.
Temam, “Diannao: a small-footprint high-throughput accelerator for
ubiquitous machine-learning,” Acm Sigplan Notices, vol. 49, no. 4, pp.
269–284, 2014.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>The RISC-V instruction set manual<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>K. Asanovic and D. Patterson. Instruction Sets Should Be
Free: The Case for RISC-V. Technical Report UCB/EECS-2014-146, EECS
Department, University of California, Berkeley, Aug 2014.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>RISC-V Foundation. http://www.riscv.org, 2017 (accessed
Aug 15, 2017).<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>陆志坚 ． 基 于 FPGA 的卷积神经网络并行结构研究 ［ Ｄ ]
哈尔滨：哈尔滨工程大学,2013．<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>RISC-V</tag>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>设置ssh通过秘钥登录</title>
    <url>/2020/04/25/%E8%AE%BE%E7%BD%AEssh%E9%80%9A%E8%BF%87%E7%A7%98%E9%92%A5%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p>无论是个人的 VPS 还是企业允许公网访问的服务器，如果开放 22 端口的 SSH
密码登录验证方式，被众多黑客暴力猜解捅破菊花也可能是经常发生的惨剧。企业可以通过防火墙来做限制，普通用户也可能借助修改
22 端口和强化弱口令等方式防护，但目前相对安全和简单的方案则是让 SSH
使用密钥登录并禁止口令登录。</p>
<span id="more"></span>
<h1 id="本地电脑的设置client">本地电脑的设置（client）</h1>
<p>生成 rsa 秘钥对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>会在 <em>~/.ssh/</em> 目录下生成 <em>id_rsa</em> 和
<em>id_rsa.pub</em> 两个文件，分别为私钥和公钥。</p>
<h1 id="服务器端的设置server">服务器端的设置（server）</h1>
<ol type="1">
<li><p>在 <em>/<username>/.ssh/</username></em> 目录下，创建文件
<em>authorized_keys</em>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> /&lt;username&gt;/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li>
<li><p>将 client 的公钥里的内容复制到 server 的 <em>authorized_keys</em>
中（server 的 <em>authorized_keys</em> 中可以存放多个 client
的公钥，之间用换行隔开就行）。</p></li>
<li><p>修改 <em>/<username>/.ssh</username></em> 的权限为 700,
<em>authorized_keys</em> 的权限为 600 或者更严格的
400，否则登录的时候会提示<code>server refuse you key</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 700 /&lt;username&gt;/.ssh</span><br><span class="line"><span class="built_in">chmod</span> 600 /&lt;username&gt;/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li>
<li><p>修改 ssh 的配置，使其允许秘钥登录：</p>
<p>编辑 <em>/etc/ssh/sshd_config</em> 文件，修改如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RSAAuthentication <span class="built_in">yes</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">AuthorizedKeysFile      .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>另外，请留意 root 用户能否通过 SSH 登录，最好进制 root 用户通过 SSH
登录：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PermitRootLogin</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启 SSH 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>
<p>这时查看一下是否可以使用秘钥登录，如果可以就可以禁用密码登录</p></li>
<li><p>修改 ssh 的配置，禁用密码登录：</p>
<p>编辑 <em>/etc/ssh/sshd_config</em> 文件，修改如下内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PasswordAuthentication</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure></li>
<li><p>最后重启 SSH 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="more">more</h1>
<h2 id="查看登录记录">查看登录记录</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">last -x -F</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录成功的记录</span></span><br><span class="line">less /var/log/auth.log|grep <span class="string">&#x27;Accepted&#x27;</span> <span class="comment"># Ubuntu</span></span><br><span class="line">less /var/log/secure|grep <span class="string">&#x27;Accepted&#x27;</span> <span class="comment"># Centos</span></span><br><span class="line"><span class="comment"># 登录失败</span></span><br><span class="line">less /var/log/auth.log | grep <span class="string">&quot;Connection closed&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="换端口">换端口</h2>
<p>修改文件 <em>/etc/ssh/sshd_config</em>：</p>
<p>找到 Prot，改为想要的端口。</p>
<p>然后重启sshd服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart sshd</span><br></pre></td></tr></table></figure>
<p>修改防火墙，放行新的端口，同时关闭旧端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ufw allow 1122 <span class="comment"># 放行新的端口</span></span><br><span class="line"><span class="built_in">sudo</span> ufw delete allow 22 <span class="comment"># 禁止外部访问 22 端口 # or sudo ufw delete allow ssh</span></span><br><span class="line"><span class="built_in">sudo</span> ufw status <span class="comment"># 查看防火墙状态</span></span><br><span class="line"><span class="built_in">sudo</span> ufw logging on <span class="comment"># 打开防火墙日志，位于 /var/log/ufw.log</span></span><br></pre></td></tr></table></figure>
<h2 id="限制连续登录次数好像使用秘钥登录后这个就不用管了"><del>限制连续登录次数</del>(好像使用秘钥登录后，这个就不用管了)</h2>
<p>在 <em>/etc/pam.d/sshd</em> 文件第一行（最前面）添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auth required pam_tally2.so deny=3 unlock_time=3600 even_deny_root root_unlock_time=3600</span><br></pre></td></tr></table></figure>
<p>deny=3 表示尝试登录次数,超过3次后会执行后续动作,单位为秒
even_deny_root 对root也开启此限制</p>
<p>查看登录失败次数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pam_tally2 --user &lt;user&gt;</span><br></pre></td></tr></table></figure>
<p>设置重复验证次数，默认6次</p>
<p>编辑 SSH 配置文件 <em>/etc/ssh/sshd_­con­fig</em>：</p>
<p>在 ssh 配置文件中查找 #Max­Au­thTries 修改为： Max­Au­thTries 3 #错误 3
次即断开连接</p>
]]></content>
      <categories>
        <category>GEEK</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GEEK</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Altium Designer 卡死问题</title>
    <url>/2020/07/01/%E8%A7%A3%E5%86%B3-Altium-Designer-%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近用 Altium Designer 20
画了几个板子，经常卡死，真的让人崩溃，在排除电脑硬件问题及系统问题后，找到了
AD 软件自身的问题。</p>
<!--more--->
<p>目前网上主要有两种解决方案如下：</p>
<h1 id="禁止-ad-自动联网">1. 禁止 AD 自动联网</h1>
<h2 id="第一步关闭-ad-自动更新">第一步：关闭 AD 自动更新</h2>
<p>点击右上角的设置小齿轮，然后在 System-&gt; Account Management 中改为
"No,…”，如下图：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173721.jpg" alt="ad1">
<figcaption aria-hidden="true">ad1</figcaption>
</figure>
<p>在 System -&gt; Installation 的 "Check frequency” 改为
“Never”，如下图：</p>
<figure>
<img src="https://pic.zhouyuqian.com/img/20210727173722.jpg" alt="ad2">
<figcaption aria-hidden="true">ad2</figcaption>
</figure>
<h2 id="第二步设置防火墙禁止-ad-联网">第二步：设置防火墙，禁止 AD
联网</h2>
<p>这步就是设置防火墙禁止 AD 软件联网，方法比较简单，参考：<a href="https://blog.csdn.net/qq_23957035/article/details/82492093">禁止Altium
designer（其他软件同样适用）联网的配置操作</a></p>
<h1 id="删除多余的库">2. 删除多余的库</h1>
<p>这个方法的思路在于 AD
有时候库过多导致打开的时间过长，个人觉得用处不大。参考：<a href="https://www.bilibili.com/read/cv3488833/">Altium教程：AD中pcb文件和库文件libraries卡死解决办法</a></p>
]]></content>
      <categories>
        <category>Altium-Designer</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
        <tag>Altium-Designer</tag>
      </tags>
  </entry>
  <entry>
    <title>部署 Hexo 到服务器</title>
    <url>/2020/07/09/%E9%83%A8%E7%BD%B2-Hexo-%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="部署到服务器">部署到服务器</h1>
<blockquote>
<p>Ref:</p>
<p><a href="https://qianfanguojin.github.io/2020/03/03/Hexo博客进阶：将Hexo部署到云服务器/">Hexo博客进阶：将Hexo部署到云服务器</a></p>
<p><a href="https://www.cnblogs.com/jie-fang/p/13445939.html"><strong>将Hexo部署到自己的服务器上</strong></a></p>
</blockquote>
<h1 id="no-www和www跳转">no-www和www跳转</h1>
<blockquote>
<p>Ref:</p>
<p><a href="https://www.jianshu.com/p/cec753473ec9">nginx实现no-www和www跳转</a></p>
</blockquote>
<h1 id="强制-https-跳转">强制 HTTPs 跳转</h1>
<h2 id="首先查看-nginx-是否有-ssl-支持模块"><del>首先查看 Nginx 是否有
SSL 支持模块</del></h2>
<p>使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure>
<p>看输出中是否有：</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line">configure arguments:</span><br><span class="line"><span class="meta prompt_">...</span></span><br><span class="line">--with-http_ssl_module</span><br><span class="line"><span class="meta prompt_">...</span></span><br></pre></td></tr></table></figure>
<p>如果没有，则需要重新编译 nginx，增加 SSL 支持模块，参考<a href="https://www.codelast.com/原创-为nginx添加ssl支持模块/">为nginx添加SSL支持模块</a>。</p>
<h2 id="安装-nginx">安装 Nginx</h2>
<p>参考：<a href="https://blog.csdn.net/qq_40015566/article/details/90169882">北海骆驼-Nginx的编译安装并支持ssl</a></p>
<h1 id="申请下载证书略">申请&amp;下载证书（略）</h1>
<h1 id="上传证书">上传证书</h1>
<p>在 Nginx 的安装目录 <em>/etc/nginx/</em> 下创建 cert
目录，并将证书文件（SSL Key 和 CSR 文件）上传到 cert 目录中。</p>
<blockquote>
<p>可以用 <code>whereis nginx</code> 查看 Nginx 安装目录</p>
</blockquote>
<h1 id="配置-nginx">配置 Nginx</h1>
<p>修改默认配置文件 <em>/etc/nginx/sites-available/default</em> :</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">    # SSL configuration</span></span><br><span class="line"><span class="comment">    #</span></span><br><span class="line">    listen <span class="number">443</span> ssl default_server;</span><br><span class="line">    listen [::]:<span class="number">443</span> ssl default_server;</span><br><span class="line"><span class="comment">    #</span></span><br><span class="line"></span><br><span class="line"><span class="comment">    # 定义服务器的默认网站根目录位置</span></span><br><span class="line">    root /var/www/hexo;</span><br><span class="line">    </span><br><span class="line"><span class="comment">    # ssl</span></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate cert/<span class="number">1</span>_example.com_bundle.crt;</span><br><span class="line">    ssl_certificate_key cert/<span class="number">2</span>_example.com.key;</span><br><span class="line">    ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"><span class="comment">    # Add index.php to the list if you are using PHP</span></span><br><span class="line">    index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"><span class="comment">        # First attempt to serve request as file, then</span></span><br><span class="line"><span class="comment">        # as directory, then fall back to displaying a 404.</span></span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向，强制 https &amp; no-www 访问</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen *:<span class="number">80</span>;</span><br><span class="line">    listen *:<span class="number">443</span> ssl; </span><br><span class="line">    listen [::]:<span class="number">80</span>;</span><br><span class="line">    listen [::]:<span class="number">443</span> ssl; </span><br><span class="line">    server_name www.example.com;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">301</span> https://example.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen *:<span class="number">80</span>;</span><br><span class="line">    listen [::]:<span class="number">80</span>;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">301</span> https://example.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改配置后，使用如下命令，检查配置是否正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
<p>最后重启 Nginx。</p>
<span id="more"></span>
<blockquote>
<p>这里需要注意下，导入新的证书后需要重启而不是重载，nginx -s
reload是普通修改配置重载。</p>
</blockquote>
<blockquote>
<h2 id="nginx日常操作命令">Nginx日常操作命令</h2>
<ul>
<li><code>nginx -t</code> 测试配置文件</li>
<li><code>nginx -s reload</code> 修改配置后重载生效</li>
<li><code>nginx -s reopen</code> 重新打开日志文件</li>
<li><code>nginx -s stop</code> 快速停止</li>
<li><code>nginx -s quit</code></li>
<li>查看 Nginx 进程 <code>ps -ef | grep nginx</code></li>
</ul>
</blockquote>
<h1 id="参考资料">参考资料</h1>
<ol type="1">
<li><p><a href="https://qianfanguojin.github.io/2020/03/03/Hexo博客进阶：将Hexo部署到云服务器/">Hexo博客进阶：将Hexo部署到云服务器</a></p></li>
<li><p><a href="https://juejin.im/post/5c0144036fb9a04a102f046a">nginx配置ssl实现https访问
小白文</a></p></li>
<li><p><a href="https://www.jianshu.com/p/cec753473ec9">nginx实现no-www和www跳转</a></p></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>GEEK</tag>
        <tag>hexo</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>车流量统计</title>
    <url>/2020/01/26/%E8%BD%A6%E6%B5%81%E9%87%8F%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<blockquote>
<p>项目地址：https://github.com/Starrynightzyq/Drone_Vehicle_Flow_Detection</p>
<p>改进版（带 GUI
界面）：https://github.com/LeiWang1999/VehicleFlowDetection</p>
<p>效果展示：</p>
<ul>
<li><p>检测：</p>
<figure>
<img src="https://github.com/Starrynightzyq/Drone_Vehicle_Flow_Detection/raw/master/docs/images/detect.gif" alt="detect">
<figcaption aria-hidden="true">detect</figcaption>
</figure></li>
<li><p>计数：</p>
<figure>
<img src="https://github.com/Starrynightzyq/Drone_Vehicle_Flow_Detection/raw/master/docs/images/counting.gif" alt="count">
<figcaption aria-hidden="true">count</figcaption>
</figure></li>
</ul>
</blockquote>
<span id="more"></span>
<h1 id="准备">准备</h1>
<h2 id="安装tensorflow">安装tensorflow</h2>
<p>参考<a href="https://tensorflow.juejin.im/install/install_mac.html">在 macOS
中安装 TensorFlow</a></p>
<h2 id="安装opencv">安装OpenCV</h2>
<ol type="1">
<li><p>Homebrew安装OpenCV</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install opencv</span><br></pre></td></tr></table></figure>
<p>最新版本的<code>opencv</code>已经不分<code>opencv3</code>了，而是在目录下分成<code>python2</code>和<code>python3</code>版本的文件夹。
安装好的<code>opencv</code>库在<code>/usr/local/Cellar/opencv/</code>。</p></li>
<li><p>将OpenCV链接到Python的site-packages目录下</p>
<p>首先需要找到自己Python安装位置，可以用如下方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开Python</span></span><br><span class="line">python3</span><br><span class="line"><span class="comment"># 通过sys查看Python安装路径</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(sys.path)</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip&#x27;</span>, <span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7&#x27;</span>, <span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload&#x27;</span>, <span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>可以看到最后一行就是site-packages的路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入site-packages目录</span></span><br><span class="line"><span class="built_in">cd</span> /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages</span><br><span class="line"><span class="comment"># 建立软链接</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/local/Cellar/opencv/4.2.0_1/lib/python3.7/site-packages/cv2/python-3.7/cv2.cpython-37m-darwin.so cv2.so</span><br></pre></td></tr></table></figure></li>
<li><p>依赖包</p>
<p>我们这时测试一下OpenCV是否可用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cv2</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;numpy&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: numpy.core.multiarray failed to <span class="keyword">import</span></span><br></pre></td></tr></table></figure>
<p>缺少numpy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装numpy</span></span><br><span class="line">pip3 install --upgrade numpy</span><br></pre></td></tr></table></figure>
<p>成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.7.4 (v3.7.4:e09359112e, Jul  8 2019, 14:54:52)</span><br><span class="line">[Clang 6.0 (clang-600.0.57)] on darwin</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import cv2</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>真不该手贱接下这个项目，完全没有头绪！</p>
</blockquote>
<h1 id="准确率">准确率</h1>
<p>目前检测 VisDrone 数据集的正确率已经比较高了</p>
<figure>
<img src="https://github.com/Starrynightzyq/Drone_Vehicle_Flow_Detection/raw/master/mAP/mAP.png" alt="mAP">
<figcaption aria-hidden="true">mAP</figcaption>
</figure>
]]></content>
      <categories>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
        <tag>图像处理</tag>
      </tags>
  </entry>
</search>
